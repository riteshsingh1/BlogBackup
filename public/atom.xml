<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuzhida33的博客</title>
  <icon>https://www.gravatar.com/avatar/a3ee7b1a505b6a29af08790ce8bb3461</icon>
  <subtitle>志不强者，智不达</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuzhida33.cn/"/>
  <updated>2018-04-19T09:06:05.298Z</updated>
  <id>http://liuzhida33.cn/</id>
  
  <author>
    <name>liuzhida33</name>
    <email>liuzhida33@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我遇到的一些面试题</title>
    <link href="http://liuzhida33.cn/2018/04/14/InterviewQuestions-20180414/"/>
    <id>http://liuzhida33.cn/2018/04/14/InterviewQuestions-20180414/</id>
    <published>2018-04-14T02:36:00.000Z</published>
    <updated>2018-04-19T09:06:05.298Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/interview-top.jpg" alt="top"></p><a id="more"></a><h3 id="1-一个objc对象的isa的指针指向什么？"><a href="#1-一个objc对象的isa的指针指向什么？" class="headerlink" title="1. 一个objc对象的isa的指针指向什么？"></a>1. 一个objc对象的isa的指针指向什么？</h3><p>isa指针指向它的类对象，类对象的isa指针指向该类对象元对象(meta class)，元对象的isa指针指向根元对象，根元对象的isa指针指向自身。</p><blockquote><p><strong>类对象：</strong>当向一个class发送消息时，class本身是一个对象，未编译时是一个结构体。</p></blockquote><h3 id="2-类对象的superclass指针指向什么？"><a href="#2-类对象的superclass指针指向什么？" class="headerlink" title="2. 类对象的superclass指针指向什么？"></a>2. 类对象的superclass指针指向什么？</h3><p>类对象的superclass指针指向它的父类对象，如果该类为根类（NSObject），则指向nil。</p><h3 id="3-一个由C-C-编译的程序占用的内存（内存分配方式）有哪几种？"><a href="#3-一个由C-C-编译的程序占用的内存（内存分配方式）有哪几种？" class="headerlink" title="3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？"></a>3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？</h3><ul><li><p><strong>堆区（heap）：</strong>由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收。堆空间饿分配总是动态的，地址由低向高增长。</p></li><li><p><strong>栈区（stack）：</strong>由编译器自动分配释放。栈空间分静态分配和动态分配两种，静态分配由编译器完成，动态分配由alloca函数分配（自动释放）,地址由高向低增长。</p></li><li><strong>静态区（全局区）（static）：</strong>全局变量和静态变量的存储放在一起的，初始化的全局变量和静态变量是放在一块内存区域，未初始化的全局变量和静态变量放在相邻的另一块内存区域。程序结束后由系统自动释放。</li><li><strong>常量区：</strong>由系统自动释放。</li><li><strong>代码区：</strong>存放函数的二进制代码，只准许读取，不允许写入。</li></ul><h3 id="4-如何用GCD同步若干个异步调用？"><a href="#4-如何用GCD同步若干个异步调用？" class="headerlink" title="4.  如何用GCD同步若干个异步调用？"></a>4.  如何用GCD同步若干个异步调用？</h3><p>使用dispatch_group_enter和dispatch_group_level处理异步任务的同步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.queue.demo&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    /*模拟异步耗时操作 */</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        sleep(3);</span><br><span class="line">        NSLog(@&quot;任务1&quot;);</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    /*模拟异步耗时操作 */</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;任务2&quot;);</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    /*模拟异步耗时操作 */</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">        sleep(2);</span><br><span class="line">        NSLog(@&quot;任务3&quot;);</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    // 任务完成</span><br><span class="line">    NSLog(@&quot;任务完成&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-并发与并行的概念"><a href="#5-并发与并行的概念" class="headerlink" title="5. 并发与并行的概念"></a>5. 并发与并行的概念</h3><p>并发指能够让多个任务在逻辑上同时执行的程序设计，而并行则是指在物理上真正的同时执行。并行是并发的子集，属于并发的一种实现方式。通过时间片轮转实现的多任务同时执行是通过调度算法实现逻辑上的同步执行，属于并发。通过多核 CPU 实现并发时，多任务是真正物理上的同时执行，才属于并行。</p><blockquote><p><a href="http://xuyafei.cn/post/draft/ios-thread" target="_blank" rel="noopener">iOS中的多线程技术</a></p></blockquote><h3 id="6-集合对象的深复制实现方式"><a href="#6-集合对象的深复制实现方式" class="headerlink" title="6.集合对象的深复制实现方式"></a>6.集合对象的深复制实现方式</h3><ul><li>第一种方法：通过归解档生成两份完全独立的对象，但是前提是对象必须支持 NSCoding 协议。</li><li>第二种方法：使用<code>initWithSet:copyItems:</code>第二个参数为<code>YES</code>实现深复制，集合里的每个对象都会收到 <code>copyWithZone:</code> 消息。如果集合里的对象遵循 <code>NSCopying</code> 协议，那么对象就会被深复制到新的集合。</li></ul><blockquote><p><a href="https://www.zybuluo.com/MicroCai/note/50592" target="_blank" rel="noopener">iOS 集合的深复制与浅复制</a></p></blockquote><h3 id="7-autoreleasepool如何实现的？释放时机是什么？"><a href="#7-autoreleasepool如何实现的？释放时机是什么？" class="headerlink" title="7. @autoreleasepool如何实现的？释放时机是什么？"></a>7. <code>@autoreleasepool</code>如何实现的？释放时机是什么？</h3><ul><li>对 autorelease 分别执行 push和 pop 操作。销毁对象时执行release操作。</li><li>在没有手加Autorelease Pool的情况下，Autorelease对象是在当前的<code>runloop</code>迭代结束时释放的，而它能够释放的原因是<strong>系统在每个runloop迭代中都加入了自动释放池Push和Pop</strong></li></ul><blockquote><p><a href="https://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="noopener">黑幕背后的Autorelease</a></p></blockquote><h3 id="8-iOS事件是如何响应的？"><a href="#8-iOS事件是如何响应的？" class="headerlink" title="8. iOS事件是如何响应的？"></a>8. iOS事件是如何响应的？</h3><p>iOS获取到了用户的“点击”这一行为后，把这个事件封装成UITouch和UIEvent形式的实例，然后找到当前运行的程序，并逐级寻找能够响应这个事件的对象，直到没有响应者响应。这个过程就叫做事件的响应链。</p><blockquote><p>示例：<code>UIButton</code> -&gt; <code>UIView</code> -&gt; <code>UIViewController</code> -&gt; <code>UIWindow</code> -&gt; <code>UIApplication</code> -&gt; <code>AppDelegate</code></p></blockquote><h3 id="9-数组和链表的区别？"><a href="#9-数组和链表的区别？" class="headerlink" title="9. 数组和链表的区别？"></a>9. 数组和链表的区别？</h3><ul><li>数组静态分配内存，链表动态分配内存。</li><li>数组在内存中连续，链表不连续。</li><li>数组元素在栈区，链表元素在堆区。</li><li>数组元素利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度为O(n)。</li><li>数组插入或删除元素的时间复杂度为O(n)，链表的时间复杂度为O(1)。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/interview-top.jpg&quot; alt=&quot;top&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://liuzhida33.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods Podfile文件参数剖析</title>
    <link href="http://liuzhida33.cn/2018/04/10/Cocoapods-Podfile-Arguments/"/>
    <id>http://liuzhida33.cn/2018/04/10/Cocoapods-Podfile-Arguments/</id>
    <published>2018-04-10T08:39:25.000Z</published>
    <updated>2018-04-19T14:18:12.632Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/cocoapods-top.jpg" alt="top"></p><a id="more"></a><blockquote><p>文章内容摘自<a href="http://www.pluto-y.com/cocoapods-getting-stared/" target="_blank" rel="noopener">pluto-y大神</a>的博客，感谢大神～</p></blockquote><h3 id="Podfile文件"><a href="#Podfile文件" class="headerlink" title="Podfile文件"></a>Podfile文件</h3><h5 id="1-pod-‘框架名’-参数"><a href="#1-pod-‘框架名’-参数" class="headerlink" title="1. pod ‘框架名’ 参数"></a>1. pod ‘框架名’ 参数</h5><ul><li><strong>参数一：版本号。</strong>有大于( <code>pod &#39;AFNetworking&#39;, &#39;&gt; 3.1&#39;</code> )、小于( <code>pod &#39;AFNetworking&#39;, &#39;&lt; 3.1&#39;</code> )、等于( <code>pod &#39;AFNetworking&#39;, &#39;3.1&#39;</code> )、大于等于( <code>pod &#39;AFNetworking&#39;, &#39;&gt;= 3.1&#39;</code> )等。<strong>‘~&gt; 3.1’ 意思是&gt;=3.1 并且&lt;3.2的意思。</strong></li><li><strong>参数二：地址。</strong>地址Cocoapods可以指定某一个git的目录或者是本地的目录，表示一直用最新版本。例如直接在后面接上：<code>:git =&gt; &#39;https://github.com/XXX/AFNetworking.git&#39;</code>，或者开发模式下：<code>:path =&gt; &#39;~/Documents/AFNetworking&#39;</code>。</li><li><strong>参数三：tag、branch、commit。</strong>例如：<code>:branch =&gt; &#39;branch名&#39;</code>、<code>:tag =&gt; &#39;tag名&#39;</code>、<code>:commit =&gt; &#39;提交号&#39;</code>。</li><li><strong>参数四：inhibitallwarnings。</strong>用来避免第三方框架中带来的warnings。例如：<code>:inhibitallwarnings =&gt; true</code></li></ul><h5 id="2-platform"><a href="#2-platform" class="headerlink" title="2. platform"></a>2. platform</h5><p>依赖的库希望在哪个平台被编译。 <code>platform :ios, &#39;7.0&#39;</code> 希望采用iOS7.0进行编译。</p><ol><li><p>target</p><p>指定具体的配置适配在哪个<strong>target</strong>。</p></li><li><p>use_frameworks!</p><p>指明编译成动态库。<strong>swift下必须有这句话。</strong></p></li><li><p>source</p><p>指明Cocoapods从哪些仓库中获得框架的源代码。</p></li></ol><h4 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># open source</span></span><br><span class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有源</span></span><br><span class="line">source <span class="string">'https://github.com/Artsy/Specs.git'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 iOS9.0 进行编译</span></span><br><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'9.0'</span></span><br><span class="line"></span><br><span class="line">target <span class="string">'App'</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 编译动态库（swift必须）</span></span><br><span class="line">  use_frameworks!</span><br><span class="line">  </span><br><span class="line">  pod <span class="string">'AFNetworking'</span></span><br><span class="line">  </span><br><span class="line">  pod <span class="string">'SVProgressHUD'</span>, <span class="string">'~&gt;2.1'</span> <span class="comment">#大于等于2.1，小于2.2</span></span><br><span class="line">  </span><br><span class="line">  pod <span class="string">'MJRefresh'</span>，<span class="symbol">:git=&gt;</span> <span class="string">'https://github.com/XXX/MJRefresh.git'</span> <span class="comment">#从 https://github.com/XXX/MJRefresh.git 目录更新cocoapods</span></span><br><span class="line">  </span><br><span class="line">  pod <span class="string">'Masonry'</span>, <span class="symbol">:git=&gt;</span> <span class="string">'https://github.com/XXX/MJRefresh.git'</span>, <span class="symbol">:branch</span> =&gt; <span class="string">'1-1-stable'</span> <span class="comment">#指定从特定的git repo branch更新cocoapod</span></span><br><span class="line">  pod <span class="string">'Masonry'</span>, <span class="symbol">:git=&gt;</span> <span class="string">'https://github.com/XXX/MJRefresh.git'</span>, <span class="symbol">:tag</span> =&gt; <span class="string">'1.3.0'</span> <span class="comment">#指定从特定的git repo tag更新cocoapod</span></span><br><span class="line"></span><br><span class="line">  target <span class="string">'AppTests'</span> <span class="keyword">do</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 编译动态库（swift必须）</span></span><br><span class="line">    use_frameworks!</span><br><span class="line">    </span><br><span class="line">    pod <span class="string">'FBSnapshotTestCase'</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="命令行-pod-install-和-pod-update"><a href="#命令行-pod-install-和-pod-update" class="headerlink" title="命令行 pod install 和 pod update"></a>命令行 <code>pod install</code> 和 <code>pod update</code></h3><ol><li>参数 <code>--no-repo-update</code></li></ol><p>在执行<code>pod install</code>和<code>pod update</code>两条命令时，会执行<code>pod repo update</code>的操作，只更新当前项目的第三方框架。</p><ol start="2"><li>参数<code>—verbose</code> 和 <code>--silent</code></li></ol><p>用来控制<code>pod</code>命令，不希望看到输出的情况时可使用<code>--silent</code>。如果出错，可添加<code>--verbose</code>显示具体的出错信息。对于大多数的<code>Cocoapods</code>的命令行来说都带有着两个参数。</p><h3 id="更新Ruby"><a href="#更新Ruby" class="headerlink" title="更新Ruby"></a>更新Ruby</h3><ol><li><p>移除Ruby的默认源：</p><p><code>gem sources --remove https://rubygems.org/</code> </p></li><li><p>替换Ruby China源：</p><p><code>gem sources -a https://gems.ruby-china.org/</code> </p></li><li><p>验证当前的Ruby源：</p><p><code>gem sources -l</code> </p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/cocoapods-top.jpg&quot; alt=&quot;top&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Podfile" scheme="http://liuzhida33.cn/tags/Podfile/"/>
    
      <category term="Cocoapods" scheme="http://liuzhida33.cn/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>HTTP和HTTPS对比</title>
    <link href="http://liuzhida33.cn/2018/04/08/HTTP-and-HTTPS/"/>
    <id>http://liuzhida33.cn/2018/04/08/HTTP-and-HTTPS/</id>
    <published>2018-04-08T09:16:26.000Z</published>
    <updated>2018-04-19T09:28:07.714Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/http-https-top.jpg" alt="top"></p><a id="more"></a><blockquote><p><strong>HTTP协议（HyperText Transfer Protocol，超文本传输协议）</strong>：是一种用于分布式、协作式和超媒体信息系统的应用层协议。目的是为了提供一种发布和接收HTML页面的方法。默认端口号为<code>80</code>。</p><p><strong>HTTPS协议（Hypertext Transfer Protocol Secure）</strong>：是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。默认端口号为<code>443</code>。</p><blockquote><p>引自维基百科<a href="https://zh.wikipedia.org/wiki/超文本传输协议" target="_blank" rel="noopener">HTTP</a>和<a href="https://zh.wikipedia.org/wiki/超文本传输安全协议" target="_blank" rel="noopener">HTTPS</a></p></blockquote></blockquote><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h4 id="1-协议概述"><a href="#1-协议概述" class="headerlink" title="1. 协议概述"></a>1. 协议概述</h4><p>​    由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p><h4 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h4><blockquote><p><strong>URL（Uniform / Universal Resource Locator）</strong>：统一资源定位符，是用于完整地描述Internet上网页和其他资源的地址的一种标识方法。</p></blockquote><p><strong>基本格式</strong>：<code>scheme://host[:port#]/path/…/[?query-string][#anchor]</code></p><ul><li><strong>scheme</strong>：协议(例如：http, https, ftp)</li><li><strong>host</strong>：服务器的IP地址或者域名</li><li><strong>port</strong>#：服务器的端口（如果是走协议默认端口，缺省端口80）</li><li><strong>path</strong>：访问资源的路径</li><li><strong>query-string</strong>：参数，发送给http服务器的数据</li><li><strong>anchor</strong>：锚（跳转到网页的指定锚点位置）</li></ul><h4 id="3-请求方法（HTTP-1-1）"><a href="#3-请求方法（HTTP-1-1）" class="headerlink" title="3. 请求方法（HTTP/1.1）"></a>3. 请求方法（HTTP/1.1）</h4><ol><li><strong>GET</strong>：请求指定的页面信息，并返回实体主体。参数显示在URL中。</li><li><strong>HEAD</strong>：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。</li><li><strong>POST</strong>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。参数在请求体中。</li><li><strong>PUT</strong>：从客户端向服务器传达的数据取代指定的文档的内容。</li><li><strong>DELETE</strong>：请求服务器删除指定的页面。</li><li><strong>CONNECT</strong>：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li><li><strong>OPTIONS</strong>：允许客户端查看服务器的性能。</li><li><strong>TRACE</strong>：回显服务器收到的请求，主要用于测试或诊断。</li></ol><blockquote><p>避免使用<code>GET</code>方式提交表单，因为有可能会导致安全问题。比如说在登陆表单中用Get方式，用户输入的用户名和密码将在地址栏中暴露无遗。</p></blockquote><h4 id="4-常用的请求报头"><a href="#4-常用的请求报头" class="headerlink" title="4.常用的请求报头"></a>4.常用的请求报头</h4><blockquote><p>HTTP请求由四个部分组成，分别是：<strong>请求行</strong>、<strong>请求头部</strong>、<strong>空行</strong>、<strong>请求数据</strong>。</p></blockquote><h5 id="1-Host（主机和端口号）"><a href="#1-Host（主机和端口号）" class="headerlink" title="1.Host（主机和端口号）"></a>1.Host（主机和端口号）</h5><blockquote><p><strong>Host</strong>：对应网址URL中的Web名称和端口号，用于指定被请求资源的Internet主机和端口号，通常属于URL的一部分。</p></blockquote><h5 id="2-Connection-链接类型"><a href="#2-Connection-链接类型" class="headerlink" title="2.Connection (链接类型)"></a>2.Connection (链接类型)</h5><blockquote><p><strong>Connection</strong>：表示客户端与服务连接类型.</p></blockquote><ol><li>Client 发起一个包含 <code>Connection:keep-alive</code> 的请求，HTTP/1.1使用 <code>keep-alive</code> 为默认值。</li><li>Server收到请求后：<ul><li>如果 Server 支持 <code>keep-alive</code>，回复一个包含 <code>Connection:keep-alive</code> 的响应，不关闭连接；</li><li>如果 Server 不支持 <code>keep-alive</code>，回复一个包含 <code>Connection:close</code> 的响应，关闭连接。</li></ul></li><li>如果client收到包含 <code>Connection:keep-alive</code> 的响应，向同一个连接发送下一个请求，直到一方主动关闭连接。</li></ol><blockquote><p><code>keep-alive</code>在很多情况下能够重用连接，减少资源消耗，缩短响应时间，比如当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都去请求建立连接。</p></blockquote><h5 id="3-Upgrade-Insecure-Requests-升级为HTTPS请求"><a href="#3-Upgrade-Insecure-Requests-升级为HTTPS请求" class="headerlink" title="3.Upgrade-Insecure-Requests (升级为HTTPS请求)"></a>3.Upgrade-Insecure-Requests (升级为HTTPS请求)</h5><blockquote><p><strong>Upgrade-Insecure-Requests</strong>：升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示https页面中的http请求警报。</p></blockquote><h5 id="4-User-Agent-浏览器名称"><a href="#4-User-Agent-浏览器名称" class="headerlink" title="4.User-Agent(浏览器名称)"></a>4.User-Agent(浏览器名称)</h5><blockquote><p><strong>User-Agent</strong>：是客户浏览器的名称。</p></blockquote><h5 id="5-Accept（传输文件类型）"><a href="#5-Accept（传输文件类型）" class="headerlink" title="5.Accept（传输文件类型）"></a>5.Accept（传输文件类型）</h5><blockquote><p><strong>Accept</strong>：指浏览器或其他客户端可以接受的MIME（Multipurpose Internet Mail Extensions（多用途互联网邮件扩展））文件类型，服务器可以根据它判断并返回适当的文件格式。</p></blockquote><ul><li><code>Accept: \*/\*</code>：表示什么都可以接收。</li><li><code>Accept: image/gif</code>：表示客户端希望接收GIF图像格式的资源。</li><li><code>Accept: text/html</code>：表示客户端希望接收html文本。</li><li><code>Accept: text/html, application/xhtml+xml;q=0.9, image/*;q=0.8</code>：表示浏览器支持的MIME类型分别是html文本、xhtml和xml文档、所有的图像格式资源。</li></ul><blockquote><p><code>q</code>是权重系数，范围0 =&lt; q &lt;= 1，<code>q</code>值越大，请求越倾向于获得其“<code>;</code>”之前的类型表示的内容。若没有指定<code>q</code>值，则默认为1，按照从左到右排序顺序；若被赋值为0，则用于表示浏览器不接收此内容类型。</p><p><code>Text</code>：用于标准化的表示的文本信息，文本消息可以是多种字符集和或者多种格式的。</p><p><code>Application</code>：用于传输应用程序数据或者二进制数据。</p></blockquote><h5 id="6-Referer（页面跳转处）"><a href="#6-Referer（页面跳转处）" class="headerlink" title="6.Referer（页面跳转处）"></a>6.Referer（页面跳转处）</h5><blockquote><p><strong>Referer</strong>：表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的等。例如防盗链原理。</p></blockquote><h5 id="7-Accept-Encoding（文件编解码格式）"><a href="#7-Accept-Encoding（文件编解码格式）" class="headerlink" title="7.Accept-Encoding（文件编解码格式）"></a>7.Accept-Encoding（文件编解码格式）</h5><blockquote><p><strong>Accept-Encoding</strong>：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式，许多情形下这可以减少大量的下载时间。</p></blockquote><ul><li><code>Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0</code>：如果有多个Encoding同时匹配, 按照q值顺序排列，本例中按顺序支持 gzip, identity压缩编码，支持gzip的浏览器会返回经过gzip编码的HTML页面。 如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。</li></ul><h5 id="8-Accept-Language（语言种类）"><a href="#8-Accept-Language（语言种类）" class="headerlink" title="8.Accept-Language（语言种类）"></a>8.Accept-Language（语言种类）</h5><blockquote><p><strong>Accept-Langeuage</strong>：指出浏览器可以接受的语言种类，如en或en-us指英语，zh或者zh-cn指中文，当服务器能够提供一种以上的语言版本时要用到。</p></blockquote><h5 id="9-Accept-Charset（字符编码）"><a href="#9-Accept-Charset（字符编码）" class="headerlink" title="9.Accept-Charset（字符编码）"></a>9.Accept-Charset（字符编码）</h5><blockquote><p><strong>Accept-Charset</strong>：指出浏览器可以接受的字符编码。</p></blockquote><ul><li><code>Accept-Charset:iso-8859-1,gb2312,utf-8</code>：本例中支持<code>ISO8859-1</code>、<code>gb2312</code>、<code>utf-8</code>编码。如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。</li></ul><h5 id="10-Cookie"><a href="#10-Cookie" class="headerlink" title="10.Cookie"></a>10.Cookie</h5><blockquote><p><strong>Cookie</strong>：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。</p></blockquote><h5 id="11-Content-Type-（POST数据类型）"><a href="#11-Content-Type-（POST数据类型）" class="headerlink" title="11.Content-Type （POST数据类型）"></a>11.Content-Type （POST数据类型）</h5><blockquote><p><strong>Content-Type</strong>：POST请求里用来表示的内容类型。</p></blockquote><ul><li><code>Content-Type = Text/XML; charset=gb2312</code>：指明该请求中的消息体中包含的是纯文本的<code>XML</code>类型的数据，字符编码采用<code>gb2312</code>。</li></ul><h4 id="5-服务端常用的响应报头"><a href="#5-服务端常用的响应报头" class="headerlink" title="5.服务端常用的响应报头"></a>5.服务端常用的响应报头</h4><blockquote><p>HTTP响应由四个部分组成，分别是： <strong>状态行</strong>、<strong>消息报头</strong>、<strong>空行</strong>、<strong>响应正文</strong>。</p></blockquote><h5 id="1-Cache-Control-must-revalidate-no-cache-private"><a href="#1-Cache-Control-must-revalidate-no-cache-private" class="headerlink" title="1.Cache-Control: must-revalidate, no-cache, private"></a>1.Cache-Control: must-revalidate, no-cache, private</h5><blockquote><p>这个值告诉客户端，服务端不希望客户端缓存资源，在下次请求资源时，必须要重新请求服务器，不能从缓存中获取资源。</p></blockquote><ul><li><code>Cache-Control</code>是响应头中很重要的信息，当客户端请求头中包含<code>Cache-Control: max-age = 0</code>请求，明确表示不会缓存服务器资源时，<code>Cache-Control</code>作为回应信息，通常会返回<code>no-cache</code>。</li><li>当客户端在请求头中没有包含<code>Cache-Control</code>时，服务端往往会定不同的资源不同的缓存策略，比如说oschina在缓存图片资源的策略是<code>Cache-Control: max-age = 86400</code>，这个意思是，从当前时间开始，在86400秒的时间内，客户端可以直接从缓存中读取资源，而不需要向服务器请求。</li></ul><h5 id="2-Connection-keep-alive"><a href="#2-Connection-keep-alive" class="headerlink" title="2.Connection: keep-alive"></a>2.Connection: keep-alive</h5><blockquote><p>这个字段作为回应客户端的<code>Connection: keep-alive</code>，告诉客户端服务器的TCP连接也是一个长连接，客户端可以继续使用这个TCP连接发送HTTP请求。</p></blockquote><h5 id="3-Content-Encoding-gzip"><a href="#3-Content-Encoding-gzip" class="headerlink" title="3.Content-Encoding: gzip"></a>3.Content-Encoding: gzip</h5><blockquote><p>告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。</p></blockquote><h5 id="4-Content-Type-text-html-charset-UTF-8"><a href="#4-Content-Type-text-html-charset-UTF-8" class="headerlink" title="4.Content-Type: text/html; charset = UTF-8"></a>4.Content-Type: text/html; charset = UTF-8</h5><blockquote><p>告诉客户端，资源文件的类型和字符编码，客户端通过UTF-8对资源进行解码，然后对资源进行html解析。</p></blockquote><h5 id="5-Date-Sun-21-Sep-2016-06-18-21-GMT"><a href="#5-Date-Sun-21-Sep-2016-06-18-21-GMT" class="headerlink" title="5.Date: Sun, 21 Sep 2016 06:18:21 GMT"></a>5.Date: Sun, 21 Sep 2016 06:18:21 GMT</h5><blockquote><p>服务端发送资源时的服务器时间。</p></blockquote><h5 id="6-Expires-Sun-1-Jan-2000-01-00-00-GMT"><a href="#6-Expires-Sun-1-Jan-2000-01-00-00-GMT" class="headerlink" title="6.Expires: Sun, 1 Jan 2000 01:00:00 GMT"></a>6.Expires: Sun, 1 Jan 2000 01:00:00 GMT</h5><blockquote><p>告诉客户端可以在这个时间前直接访问缓存。该值存在问题，客户端和服务器的时间不一定都是相同的，所有没有<code>Cache-Control: max-age = *</code> 准确。</p></blockquote><h5 id="7-Pragma-no-cache"><a href="#7-Pragma-no-cache" class="headerlink" title="7.Pragma: no-cache"></a>7.Pragma: no-cache</h5><blockquote><p>含义与<code>Cache-Control</code>相同</p></blockquote><h5 id="8-Server-Tengine-1-4-6"><a href="#8-Server-Tengine-1-4-6" class="headerlink" title="8.Server: Tengine/1.4.6"></a>8.Server: Tengine/1.4.6</h5><blockquote><p>服务器和相对应的版本，告诉客户端服务器的信息。</p></blockquote><h5 id="9-Transfer-Encoding-chunked"><a href="#9-Transfer-Encoding-chunked" class="headerlink" title="9.Transfer-Encoding: chunked"></a>9.Transfer-Encoding: chunked</h5><blockquote><p>告诉客户端，服务器发送的资源方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。</p></blockquote><h5 id="10-Vary-Accept-Encoding"><a href="#10-Vary-Accept-Encoding" class="headerlink" title="10.Vary: Accept-Encoding"></a>10.Vary: Accept-Encoding</h5><blockquote><p>告诉缓存服务器，缓存压缩文件和非压缩文件两个版本。</p></blockquote><h4 id="6-响应状态码"><a href="#6-响应状态码" class="headerlink" title="6.响应状态码"></a>6.响应状态码</h4><ul><li><code>100～199</code>：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。</li><li><code>200～299</code>：表示服务器成功接收请求并 已完成整个处理过程。常用<code>200</code>（OK请求成功）。</li><li><code>300～399</code>：为完成请求，客户端需进一步细化请求。例如：请求的资源已经移动一个新地址，常用<code>302</code>（所请求的页面已经临时转移至新的URL）、<code>307</code>和<code>304</code>（使用缓存资源）。</li><li><code>400～499</code>：客户端的请求有错误，常用<code>404</code>（服务器无法找到被请求的页面）、<code>403</code>（服务器拒绝访问，权限不够）。</li><li><code>500～599</code>：服务端出现错误，常用<code>500</code>（请求未完成。服务器遇到不可预知的情况）。</li></ul><h4 id="7-Cookie和Session"><a href="#7-Cookie和Session" class="headerlink" title="7.Cookie和Session"></a>7.Cookie和Session</h4><blockquote><p>服务器和客户端的交互仅限于请求/响应过程，结束之后便断开，在下一次请求时，服务器会认为新的客户端。为了维护他们之间的连接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息。</p></blockquote><ul><li><code>Cooke</code>：通过在客户端记录的信息确定用户的身份。</li><li><code>Session</code>：通过在服务端记录的信息确定用户的身份。</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><blockquote><p>HTTPS = HTTP + SSL/TLS</p><p>SSL：Secure Sockets Layer 安全套接层</p><p>TLS：ransport Layer Security 安全传输层协议。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）</p></blockquote><h5 id="1-客户端发起HTTPS请求"><a href="#1-客户端发起HTTPS请求" class="headerlink" title="1.客户端发起HTTPS请求"></a>1.客户端发起HTTPS请求</h5><h5 id="2-服务端的配置"><a href="#2-服务端的配置" class="headerlink" title="2.服务端的配置"></a>2.服务端的配置</h5><blockquote><p>采用HTTPS协议的服务器必须有一套数字证书，包含一对公钥和私钥。</p></blockquote><h5 id="3-传送证书"><a href="#3-传送证书" class="headerlink" title="3.传送证书"></a>3.传送证书</h5><blockquote><p>该证书是公钥，包含证书的颁发机构、过期时间等等。</p></blockquote><h5 id="4-客户端解析证书"><a href="#4-客户端解析证书" class="headerlink" title="4.客户端解析证书"></a>4.客户端解析证书</h5><blockquote><p>由客户端的TLS完成，首先验证公钥是否有效，比如颁发机构、过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密。</p></blockquote><h5 id="5-传送加密信息"><a href="#5-传送加密信息" class="headerlink" title="5.传送加密信息"></a>5.传送加密信息</h5><blockquote><p>传送的是用证书加密后的随机值，目的是让服务端得到这个随机值，以后客户端和服务端通信就可以通过这个随机值来进行加密解密了。</p></blockquote><h5 id="6-服务端解密信息"><a href="#6-服务端解密信息" class="headerlink" title="6.服务端解密信息"></a>6.服务端解密信息</h5><blockquote><p>服务端用私钥解密后，得到了客户端传过来的随机值（私钥），然后把内容通过该值进行对称加密。</p></blockquote><h5 id="7-传输加密后的信息"><a href="#7-传输加密后的信息" class="headerlink" title="7.传输加密后的信息"></a>7.传输加密后的信息</h5><h5 id="8-客户端解密信息"><a href="#8-客户端解密信息" class="headerlink" title="8.客户端解密信息"></a>8.客户端解密信息</h5><blockquote><p>客户端用之前生成的私钥解密服务端传过来的信息，于是获取了解密后的内容。</p></blockquote><p><img src="./images/HTTP和HTTPS.JPG" alt="RSA密钥交换过程"></p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li>HTTP协议是运行在TCP之上，所有传输的内容都是明文，客户端和服务端都无法验证对方的身份。</li><li>HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS是运行在TCP之上。所有传输的内容都是经过加密，加密采用对称加密，但对称加密的密钥用服务器的证书进行了非对称加密。</li></ul><h2 id="TCP建立连接的三次握手"><a href="#TCP建立连接的三次握手" class="headerlink" title="TCP建立连接的三次握手"></a>TCP建立连接的三次握手</h2><blockquote><p><strong>FLAGS字段：</strong></p><p>SYN：表示建立连接。</p><p>FIN：表示关闭连接。</p><p>ACK：表示响应。</p><p>PSH：表示有DATA数据传输。</p><p>RST：表示连接重置。</p></blockquote><ul><li>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机。</li><li>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包。</li><li>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li></ul><p>完成三次握手，主机A与主机B开始传送数据。</p><h2 id="TCP断开连接的四次握手"><a href="#TCP断开连接的四次握手" class="headerlink" title="TCP断开连接的四次握手"></a>TCP断开连接的四次握手</h2><blockquote><p>TCP断开连接有两种方式，第一种是正常的四次握手断开的，第二种是RST异常断开的</p></blockquote><h5 id="1-正常断开"><a href="#1-正常断开" class="headerlink" title="1.正常断开"></a>1.正常断开</h5><ul><li>服务器80端口向41826端口发出FIN的断开连接请求。</li><li>41826端口收到请求之后向服务器80端口回复了一个ACK。</li><li>41826端口向服务器80端口发送断开请求FIN。</li><li>服务器80向客户端发送断开的回复ACK。</li></ul><h5 id="2-异常断开"><a href="#2-异常断开" class="headerlink" title="2.异常断开"></a>2.异常断开</h5><ul><li>服务器80端口向41826端口发出FIN的断开连接请求。</li><li>41826端口收到请求之后向服务器80端口回复了一个ACK。</li><li>41826端口向服务器80端口发送了GET请求。</li><li>41826端口向服务器80端口发送断开请求FIN。</li><li>服务器端口80因为原因没有确认客户端发送的确认请求而断开，因此返回了RST。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/http-https-top.jpg&quot; alt=&quot;top&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://liuzhida33.cn/tags/HTTP/"/>
    
      <category term="HTTPS" scheme="http://liuzhida33.cn/tags/HTTPS/"/>
    
      <category term="握手" scheme="http://liuzhida33.cn/tags/%E6%8F%A1%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>在 Hexo 中给文章添加版权信息(yilia主题)</title>
    <link href="http://liuzhida33.cn/2018/03/20/Hexo-add-deciare/"/>
    <id>http://liuzhida33.cn/2018/03/20/Hexo-add-deciare/</id>
    <published>2018-03-20T07:26:32.000Z</published>
    <updated>2018-04-20T07:58:05.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/hexo-add-deciare-top.jpg" alt="top"></p><a id="more"></a><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>在<code>layout\_partial\post\</code> 目录下新建 <code>declare.ejs</code> 内如如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> ((theme.declare_type === <span class="number">2</span> || (theme.declare_type === <span class="number">1</span> &amp;&amp; post.declare)) &amp;&amp; !index)&#123; %&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"declare"</span>&gt;</span><br><span class="line">&lt;strong&gt;本文标题：&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= post.title %&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;strong&gt;本文作者：&lt;/</span>strong&gt;</span><br><span class="line">&lt;%= theme.author%&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;strong&gt;发布时间：&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= page.date.format("YYYY年MM月DD日 - HH:MM")%&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;strong&gt;本文链接：&lt;/</span>strong&gt;</span><br><span class="line">&lt;a href=<span class="string">"&lt;%= post.permalink %&gt;"</span>&gt;&lt;%= post.permalink %&gt;&lt;/a&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;strong&gt;许可协议：&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">&lt;i class="fa fa-creative-commons"&gt;&lt;/i</span>&gt;&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&gt; </span><br><span class="line">&lt;a rel="license" href="&lt;%= theme.licensee_url%&gt;" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;&lt;%= theme.licensee_name%&gt;&lt;/a&gt; 转载请保留原文链接及作者。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>在<code>layout\_partial\article.ejs</code> 文件下添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'post/declare'</span>) %&gt;</span><br></pre></td></tr></table></figure><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>创建新文件<code>themes/yilia/source-src/css/declare.scss</code>，添加如下CSS代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.declare &#123;</span><br><span class="line">    background-color: #eaeaea;</span><br><span class="line">    margin-top: <span class="number">2</span>em;</span><br><span class="line">    border-left: 3px solid #ff1700;</span><br><span class="line">    padding: <span class="number">.5</span>em <span class="number">1</span>em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在<code>themes/yilia/source-src/css/main.scss</code>添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"./declare"</span>;</span><br></pre></td></tr></table></figure><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>在<code>themes/yilia/</code>目录下输入：</p><p><code>npm run dev</code>生成新代码，<br>或<code>npm run dist</code>生成新代码，并压缩。</p><blockquote><p>提示：<code>yilia</code>文件夹需要单独copy一份执行<code>npm install webpack-cli -D</code>局部安装<code>webpack</code>，然后再执行<code>npm run dev</code>或<code>npm run dist</code>，执行命令之前可先清空<code>themes/yilia/source</code>里面的文件（不包括文件夹），最后再复制到hexo项目中覆盖，否则可能会因为权限问题导致ERROR。</p></blockquote><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>修改<code>themes/yilia/_config.yml</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#版权声明：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明</span><br><span class="line">declare_type: <span class="number">2</span> </span><br><span class="line">licensee_url: https:<span class="comment">//creativecommons.org/licenses/by-nc-nd/4.0/</span></span><br><span class="line">licensee_name: <span class="string">'署名-非商业性使用-禁止演绎 4.0 国际'</span></span><br></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/hexo-add-deciare-top.jpg&quot; alt=&quot;top&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://liuzhida33.cn/tags/Hexo/"/>
    
      <category term="yilia" scheme="http://liuzhida33.cn/tags/yilia/"/>
    
  </entry>
  
</feed>
