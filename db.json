{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/assets/blogImg/liuzhida33.png","path":"assets/blogImg/liuzhida33.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.ico","path":"images/favicon-16x16.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.ico","path":"images/favicon-32x32.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"source/assets/img/alipay.jpg","path":"assets/img/alipay.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/weixin.jpg","path":"assets/img/weixin.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/fonts/LobsterTwo-Regular.ttf","path":"fonts/LobsterTwo-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/canvas-lzd.js","path":"js/src/canvas-lzd.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"source/assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png","path":"assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/assets/blogImg/InterviewQuestions/interview-top.jpg","path":"assets/blogImg/InterviewQuestions/interview-top.jpg","modified":0,"renderable":0},{"_id":"source/assets/blogImg/HTTP-and-HTTPS/http-https.jpg","path":"assets/blogImg/HTTP-and-HTTPS/http-https.jpg","modified":0,"renderable":0},{"_id":"source/assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg","path":"assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"source/assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg","path":"assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg","path":"assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/sidebar.jpg","path":"images/sidebar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1524149187550},{"_id":"source/.DS_Store","hash":"cbccee4d7214459ade16a34fc27af2a81581eb40","modified":1525138328060},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1524729971650},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1524729971650},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1524729971650},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1524729971652},{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524732550304},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1524729971652},{"_id":"themes/next/.jshintrc","hash":"ed3cce243df27e8d54fe1b8e6deb191136766333","modified":1524729971652},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1524729971653},{"_id":"themes/next/.stickler.yml","hash":"a94dcbac9fb71bbad94fff5e5abc07492c0ff11f","modified":1524729971652},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1524722284972},{"_id":"themes/next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1524722284972},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1524729971653},{"_id":"themes/next/bower.json","hash":"29515e8a97ae28e07a934e38d0fc79af695d14fc","modified":1524722284973},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1524722284973},{"_id":"themes/next/_config.yml","hash":"9c22dab739a3a86111cfb79225af57ad2bd7d7dd","modified":1525936458925},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1524722284979},{"_id":"themes/next/package.json","hash":"d2eccdf5f241a3b42f2c9a873e3a063e54316ea9","modified":1524722285010},{"_id":"source/CNAME","hash":"05ffc723b5694470a4c872eff5ab804a298b340f","modified":1524155993576},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1524729971652},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524669998620},{"_id":"source/_posts/Cocoapods-Podfile-Arguments.md","hash":"9ec1ff62e1886d79f4cafc9afa9cc4276c2cc37a","modified":1526782659508},{"_id":"source/_posts/File-Templates.md","hash":"de82e31c246e320a1256319e8b28fad0d2f882b6","modified":1526790822706},{"_id":"source/_posts/Hexo-add-deciare.md","hash":"36f98c7b561178d469b108cf3a4897f8e8c70f1d","modified":1524985307749},{"_id":"source/_posts/Hexo-nexT-custom-sidebar-left.md","hash":"9e10e545e950ad921e46b6de666faeb5a1aa332c","modified":1526782549683},{"_id":"source/_posts/Hexo-next-canvas.md","hash":"47bc3d7d0141736fa2c677367800869f9ba2b853","modified":1526782459678},{"_id":"source/_posts/Hexo-themes-sync.md","hash":"6df13acd66a30cee3ec53c559572761583808bbd","modified":1524732478074},{"_id":"source/_posts/HTTP-and-HTTPS.md","hash":"79bed6be3707417b8ffb301d870fe70b16c18ff2","modified":1526782689736},{"_id":"source/_posts/InterviewQuestions-20180420.md","hash":"3dceee8d66e59d8f03acb1c2fbf645b56341f26c","modified":1524985523161},{"_id":"source/_posts/JosephusSolution.md","hash":"aad498e757bb73c36d2c7d978b17e0fcfc0aeb02","modified":1525936725902},{"_id":"source/_posts/Web-Dev-Tools.md","hash":"d322696ea0259f651c74ca8de97debc5edc53cbc","modified":1525489367550},{"_id":"source/_posts/InterviewQuestions-20180414.md","hash":"c1680bf040fe1f38fe96cbbc36481806dccb9078","modified":1524985512738},{"_id":"source/_posts/NSDictionary-Principle-of-realization.md","hash":"c0e9aa83addde75f7c02db8fadcc1534dffa413c","modified":1526782383329},{"_id":"source/assets/.DS_Store","hash":"cafa04d1fe393ffe461a358b30aad15b030c49b8","modified":1524123882827},{"_id":"source/photos/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524126463201},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1524729971651},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1524729971651},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1524729971652},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1524729971651},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1524729971651},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1524729971652},{"_id":"source/tags/index.md","hash":"49e93038d42ac54de87f2382248357c8983d254d","modified":1524719430593},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1524722284974},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1524722284973},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1524722284974},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1524722284974},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1524722284974},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1524722284974},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1524722284975},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1524722284975},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1524722284975},{"_id":"themes/next/layout/_layout.swig","hash":"837b4c901bf3dd6e09ce7a1308b8c86b2efe0174","modified":1525138408185},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1524722285008},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1524722285008},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1524722285008},{"_id":"themes/next/layout/page.swig","hash":"3f9b2444f12251727ebbc28159f02e9e9489742e","modified":1524722285009},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1524722285009},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1524722285009},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1524722285009},{"_id":"themes/next/languages/de.yml","hash":"1bdc91fdd74f41c2432273e0f469e27613e79962","modified":1524722284979},{"_id":"themes/next/languages/en.yml","hash":"527902104af2444106ddaa2c4f24309f9c103c6b","modified":1524722284979},{"_id":"themes/next/languages/id.yml","hash":"f457487bb96130b7efb7125275e2d26e106c9071","modified":1524722284980},{"_id":"themes/next/languages/default.yml","hash":"527902104af2444106ddaa2c4f24309f9c103c6b","modified":1524722284979},{"_id":"themes/next/languages/fr.yml","hash":"52e8cfc1984e1fe8235f97983693fe4ef724d002","modified":1524722284980},{"_id":"themes/next/languages/it.yml","hash":"d16885be837e99d44c8c004b07b53ac78e443087","modified":1524722284980},{"_id":"themes/next/languages/ja.yml","hash":"567b2b57ffcbea409c897b74b41f82d3bd35d7ac","modified":1524722284981},{"_id":"themes/next/languages/ko.yml","hash":"65aea531d1e2cbb79d15cec8c4f5c3d615a11fa6","modified":1524722284981},{"_id":"themes/next/languages/pt-BR.yml","hash":"2ef3d965569d727047b310a2c5dfff15cbc4d653","modified":1524722284981},{"_id":"themes/next/languages/pt.yml","hash":"b50964d3fbee2a2f83be7a2842333556bc971839","modified":1524722284982},{"_id":"themes/next/languages/nl.yml","hash":"446dd4bc56efbb8bf0b8e7acf1a077b3e7643edf","modified":1524722284981},{"_id":"themes/next/languages/tr.yml","hash":"0664fe016b30be41e6f73e4fc5171d748df09269","modified":1524722284982},{"_id":"themes/next/languages/ru.yml","hash":"056da24924342926cbb7f3cab123e3a116a855e7","modified":1524722284982},{"_id":"themes/next/languages/vi.yml","hash":"d305b5f55aeffc879ca3405cbe660a00f1914255","modified":1524722284983},{"_id":"themes/next/languages/zh-HK.yml","hash":"4323f8b8ed7a52b6bb0dc938acf58b15eab85abc","modified":1524722284983},{"_id":"themes/next/languages/zh-TW.yml","hash":"69455c196d0d06b717b614ba4d49d1980d251429","modified":1524722284984},{"_id":"themes/next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1524722285010},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1524722285010},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1524722285011},{"_id":"themes/next/languages/zh-CN.yml","hash":"9edf916d3b592a5a95085940a62f3840346845e3","modified":1524736634558},{"_id":"themes/next/scripts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524814953676},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1524722285053},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1524722285053},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1524722285053},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524760150453},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722285039},{"_id":"source/assets/blogImg/.DS_Store","hash":"e24c69523f371f093f77b29d279dbd8431c1f5d0","modified":1524985805878},{"_id":"source/assets/blogImg/liuzhida33.png","hash":"2d6eef187bf280d2a213cfa5f88306fa00cea21a","modified":1524123731464},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1524722284976},{"_id":"themes/next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1524722284976},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1524722284975},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1524722284976},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1524722284977},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1524722284977},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1524722284976},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1524722284977},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1524722284978},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1524722284977},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1524722284978},{"_id":"themes/next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1524722284978},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1524722284979},{"_id":"themes/next/layout/_custom/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524739030939},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1524722284984},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524722284985},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1524722284986},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1524722284987},{"_id":"themes/next/layout/_macro/reward.swig","hash":"95d18631c92a068475c65d4bff38574ee1c50fd3","modified":1525936480456},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1524722284988},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"d7af71e54a5f04d12c4762953090812fb7092ee7","modified":1524736797623},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"ef8e15c99b9f42787449f251e250f09456c479ab","modified":1524764229117},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1524722284995},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1524722284996},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1524722284996},{"_id":"themes/next/layout/_macro/post.swig","hash":"33845d6da9e4180fcbb58a4266a7509295e56a55","modified":1524723042134},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1524722284997},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1524722284988},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1524722284989},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2d7209b15377fa1dac9ac5f759aa6b0506021789","modified":1524722284989},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1524722284992},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1524722284993},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1524722285001},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"08cbad4bb66196f2597682ca793e8c9f24b35c31","modified":1524722285003},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1524722285004},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1524722285004},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1524722285005},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1524722285006},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1524722285005},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1524722285006},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1524722285006},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1524722285011},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1524722285011},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1524722285012},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1524722285012},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1524722285012},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1524722285013},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1524722285013},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1524722285013},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1524722285014},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1524722285014},{"_id":"themes/next/source/css/.DS_Store","hash":"8fed5a0538cc5f3c6d91fb617ad7eba43e814ef1","modified":1526393914118},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1524722285039},{"_id":"themes/next/source/images/.DS_Store","hash":"02f398ee0771086e9150a907311884097cbb14f8","modified":1524723024469},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514748788000},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"f5f59f1025dedfbb5474cc94e577b93309b076ce","modified":1524280717101},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514748788000},{"_id":"themes/next/source/images/avatar.png","hash":"f5f59f1025dedfbb5474cc94e577b93309b076ce","modified":1524280717101},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514748788000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514748788000},{"_id":"themes/next/source/images/favicon-16x16.ico","hash":"c1295501c9c2cc52ad7adaf9f53d3d740d678644","modified":1524280550999},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/favicon-32x32.ico","hash":"573da18a7385c553419e84c71438beb2dd9db48f","modified":1524280539470},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514748788000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514748788000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514748788000},{"_id":"themes/next/source/images/logo.svg","hash":"dbd6b6387de4a1086bb834d8eff6a03da6ee0b3f","modified":1524281059042},{"_id":"source/assets/img/alipay.jpg","hash":"090631c4daf26723645f2825be76cdd63a1c19cf","modified":1524123637000},{"_id":"source/assets/img/weixin.jpg","hash":"ce70e725d61157a0557f835d11090d6a3f370265","modified":1524123555000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722284997},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722284997},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722285032},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722285032},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722285033},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722285038},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524722285039},{"_id":"themes/next/source/fonts/LobsterTwo-Regular.ttf","hash":"5c3618fe5afab581dcfc46cd91efcea9ce134f58","modified":1306361370000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1524722284986},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1524722284985},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1524722284996},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1524722284997},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1524722284997},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1524722284989},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1524722284990},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1524722284990},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"b5c9f191c55622d778a1f4fb14008f858b87e8f7","modified":1524722284991},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"e76745ff68fc017c250d749880ab67a68a9f2695","modified":1524722284991},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1524722284992},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1524722284992},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1524722284993},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1524722284993},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1524722284993},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1524722284994},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1524722284994},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1524722284994},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1524722284995},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1524722284995},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1524722284998},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1524722284998},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1524722284998},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1524722284999},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1524722284999},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1524722284999},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1524722284999},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1524722285000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1524722285000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1524722285000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1524722285000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1524722285000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1524722285001},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1524722285001},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1524722285002},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1524722285002},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1524722285002},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1524722285002},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1524722285003},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1524722285003},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1524722285003},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1524722285004},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1524722285005},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1524722285005},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1524722285007},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1524722285007},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1524722285007},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1524722285008},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1524722285032},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1524722285033},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1524722285033},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"876b10b29c467234744eca81248890ba440521f2","modified":1525489731959},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1524722285038},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1524722285038},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1524722285038},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1524722285039},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1524722285045},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1524722285045},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1524722285045},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1524722285045},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1524722285045},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1524722285052},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1524722285052},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1524722285052},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1524722285043},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1524722285043},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1524722285043},{"_id":"themes/next/source/js/src/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524815718878},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1524722285043},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1524722285043},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1524722285044},{"_id":"themes/next/source/js/src/canvas-lzd.js","hash":"4cd88cfc53a4ae3a0fc4b636a05f7d8994b8d46b","modified":1524985792581},{"_id":"themes/next/source/js/src/motion.js","hash":"562e000b47699968d922a602f61f8eaa0e63dd9d","modified":1524722861984},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1524722285044},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1524722285044},{"_id":"themes/next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1524722285044},{"_id":"source/assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png","hash":"8639e71c1394a1515b5fdcac0df4a6735e07098b","modified":1524817947169},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524722285050},{"_id":"source/assets/blogImg/InterviewQuestions/interview-top.jpg","hash":"adc021283431cdcede7eaa6784a9bc94c48f4b45","modified":1524148302099},{"_id":"source/assets/blogImg/HTTP-and-HTTPS/http-https.jpg","hash":"86525d6afc5071d8cbcb6400b9abad1159695180","modified":1521633247000},{"_id":"source/assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg","hash":"acbd25aae3c177bd5ef5c1a9ae801e2575173d83","modified":1524209939200},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1524722285031},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1524722285007},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1524722285007},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1524722285031},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1524722285031},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1524722285031},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1524722285031},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1524722285032},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1524722285032},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1524722285015},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1524722285015},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"a0fb6000cd6a83f5447dfe88ae89f5bb345c8fd0","modified":1526781735286},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1524722285015},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1524758466751},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1524722285016},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1524722285020},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1524722285027},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1524722285035},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1524722285035},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1524722285035},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524722285036},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1524722285036},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1524722285036},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1524722285037},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1524722285037},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1524722285033},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1524722285037},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1524722285037},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1524722285037},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1524722285038},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1524722285033},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1524722285034},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1524722285034},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1524722285034},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1524722285034},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524722285034},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1524722285034},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1524722285046},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1524722285046},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524722285046},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1524722285050},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1524722285050},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1524722285044},{"_id":"source/assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg","hash":"104c2f6fd3ed7d4feb96359a722ed1c941c9d98a","modified":1524148294391},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1524722285051},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524722285048},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524722285049},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1524722285016},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1524722285016},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1524722285017},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1524722285017},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1524722285017},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1524722285017},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1524722285017},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1524722285018},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1524722285018},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1524722285018},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1524722285021},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1524722285020},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1524722285021},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1524722285021},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1524722285021},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1524722285021},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1524722285022},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1524722285022},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1524722285022},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1524722285023},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1524722285023},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1524722285023},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1524722285024},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"221e422879f6fb6bfe43e1b40b69638f2b3e30a5","modified":1524737191293},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1524722285024},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1524722285024},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1524722285025},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1524722285025},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1524722285025},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1524722285026},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1524722285026},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1524722285026},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1524722285026},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1524722285027},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1524765425122},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1524818851807},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1524722285018},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1524722285019},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1524722285019},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1524722285019},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1524722285019},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1524722285020},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1524722285027},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1524722285027},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1524722285027},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1524722285028},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1524722285028},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1524722285028},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1524722285028},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1524722285028},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1524722285029},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1524722285029},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1524722285029},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1524722285029},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1524722285029},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1524722285030},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1524722285030},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1524722285030},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1524722285030},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1524722285030},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1524722285030},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524722285036},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1524722285035},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524722285035},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524722285048},{"_id":"source/assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg","hash":"fcb98ddd1f8f5006f6d0d199d98c265f1c126e27","modified":1524129900000},{"_id":"themes/next/source/images/sidebar.jpg","hash":"120dc95d0d839a273a59b70c20cf1f4bce7ccb96","modified":1524758282656},{"_id":"public/baidusitemap.xml","hash":"104b5f26d980ccea6b244fd8b4e2914693df7c6d","modified":1526790842865},{"_id":"public/atom.xml","hash":"b4a0d33c45ffe8eba00ba2e4be0c19665ea01684","modified":1526790842875},{"_id":"public/content.json","hash":"d01e2dd2829140f7a5423481e4402bc3b4461694","modified":1526789933024},{"_id":"public/sitemap.xml","hash":"cd4f58054c64d1730b91541afed4168cbba6a9dc","modified":1526790842875},{"_id":"public/404.html","hash":"ccb89966d434fbb10434925d39295191212b5c99","modified":1526789933039},{"_id":"public/tags/index.html","hash":"12735b8c3cb795b77910a1c3d495845d579979a9","modified":1526789933039},{"_id":"public/archives/2018/03/index.html","hash":"54ee02a3c432e6dd1e773e2ab290971160fe7325","modified":1526789933039},{"_id":"public/archives/2018/05/index.html","hash":"56f39f1e148967ea359b7ace986d03f9d039a6d0","modified":1526789933039},{"_id":"public/tags/Podfile/index.html","hash":"38b649590236528006b678e7f86016665ffd6181","modified":1526789933040},{"_id":"public/tags/Cocoapods/index.html","hash":"b918dfc5cdba8dee90a7a83db3a52c5a242e2143","modified":1526789933040},{"_id":"public/tags/XCode/index.html","hash":"2c761ef00429eec42ed177482f790803ee762485","modified":1526789933040},{"_id":"public/tags/Templates/index.html","hash":"739c5977845126a7c4bfcda3ddcae1c4ca353311","modified":1526789933040},{"_id":"public/tags/Hexo/index.html","hash":"3d259dde12ae2769274fe9d1fc5824df513a3bf4","modified":1526789933040},{"_id":"public/tags/yilia/index.html","hash":"1234548bfde76dcdc02b00fbc92cd6813a986707","modified":1526789933040},{"_id":"public/tags/NexT/index.html","hash":"c7830b13e6609f56a624b7b9003c1ee48a3e5fe6","modified":1526789933040},{"_id":"public/tags/HTTP/index.html","hash":"da01ef774bd53ae5d5b8bf3f06b194cd549e04d9","modified":1526789933041},{"_id":"public/tags/HTTPS/index.html","hash":"89761e9aee02151180353ff5e593d4efc91486de","modified":1526789933041},{"_id":"public/tags/握手/index.html","hash":"a19abcd5480377c9d2714852b9ac20e2be81120e","modified":1526789933041},{"_id":"public/tags/Algorithm/index.html","hash":"1d14c8ae066dd5851ba0253129539094eaaa49aa","modified":1526789933041},{"_id":"public/tags/面试/index.html","hash":"84e6ea51205ec54b72f45f7a1835f3a0fe81f8ad","modified":1526789933041},{"_id":"public/tags/Javascript/index.html","hash":"3c691687bcf43cd85f625c9b35b4e460fa780796","modified":1526789933041},{"_id":"public/tags/CSS/index.html","hash":"e5d13870f9b44afe063787f43df5efad2a9569cf","modified":1526789933041},{"_id":"public/tags/NSDictionary/index.html","hash":"a7d6a3e7bcecaf65960345630be5276ae72831a3","modified":1526789933041},{"_id":"public/2018/05/20/File-Templates/index.html","hash":"c8fcf729c1155350277b1855f0591f4c9d99bcf2","modified":1526790842884},{"_id":"public/2018/05/07/JosephusSolution/index.html","hash":"c229b4f9d654af2866ec5cc6fe6e1a9e0ccfcb1a","modified":1526789933041},{"_id":"public/2018/04/29/NSDictionary-Principle-of-realization/index.html","hash":"6d9fc7cab03bbe34f41695d964cd7cd5ae84a026","modified":1526789933042},{"_id":"public/2018/04/28/Web-Dev-Tools/index.html","hash":"52654ead9c3fcad90fa12c4d318fbf0f8d0bf7d2","modified":1526789933042},{"_id":"public/2018/04/27/Hexo-next-canvas/index.html","hash":"a1447ecab56ef52479f62dc89ff2348974f68b4d","modified":1526789933042},{"_id":"public/2018/04/26/Hexo-themes-sync/index.html","hash":"aaf599cdb34901f63d58712ee6aa9e0330b6ec55","modified":1526789933042},{"_id":"public/2018/04/26/Hexo-nexT-custom-sidebar-left/index.html","hash":"c62bf2ea38fecd3fc9d5d3323b7ed59cd42456fd","modified":1526789933042},{"_id":"public/2018/04/20/InterviewQuestions-20180420/index.html","hash":"343b1483c7d130dac2c969043747c19b66784102","modified":1526789933042},{"_id":"public/2018/04/14/InterviewQuestions-20180414/index.html","hash":"bd36749c43fcbf8850d0432cb95133d572f4a010","modified":1526789933042},{"_id":"public/2018/04/10/Cocoapods-Podfile-Arguments/index.html","hash":"8f994fb2b5b11195f00e06cc39e460d028755c9c","modified":1526789933042},{"_id":"public/2018/04/08/HTTP-and-HTTPS/index.html","hash":"51b80e6f5361a482f4b99631d452ab944dc8ee0a","modified":1526789933042},{"_id":"public/2018/03/20/Hexo-add-deciare/index.html","hash":"424cb9a99bcd822d43bb4e2cf1bcb43ee08c33ee","modified":1526789933042},{"_id":"public/archives/index.html","hash":"04256cdde1771d9263f242461b3bac174524ff58","modified":1526789933042},{"_id":"public/archives/2018/index.html","hash":"a8f4c12c1a02a89288fd4ea61398dfb16a70597f","modified":1526789933042},{"_id":"public/archives/2018/04/index.html","hash":"ab402c73d372ea5147cdcf97a4e35046729d0050","modified":1526789933043},{"_id":"public/index.html","hash":"1cf2fbcf19aab0a70ed46ee37288ca7099bfd90d","modified":1526790842885},{"_id":"public/page/2/index.html","hash":"583734669f901656fb2af47591437f37edfb1acf","modified":1526789933043},{"_id":"public/CNAME","hash":"05ffc723b5694470a4c872eff5ab804a298b340f","modified":1526789933054},{"_id":"public/assets/blogImg/liuzhida33.png","hash":"2d6eef187bf280d2a213cfa5f88306fa00cea21a","modified":1526789933054},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1526789933054},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526789933054},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526789933054},{"_id":"public/images/apple-touch-icon.png","hash":"f5f59f1025dedfbb5474cc94e577b93309b076ce","modified":1526789933054},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526789933055},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526789933055},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526789933055},{"_id":"public/images/avatar.png","hash":"f5f59f1025dedfbb5474cc94e577b93309b076ce","modified":1526789933055},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526789933055},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526789933055},{"_id":"public/images/favicon-16x16.ico","hash":"c1295501c9c2cc52ad7adaf9f53d3d740d678644","modified":1526789933055},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526789933056},{"_id":"public/images/favicon-32x32.ico","hash":"573da18a7385c553419e84c71438beb2dd9db48f","modified":1526789933056},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526789933056},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526789933056},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526789933056},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526789933056},{"_id":"public/images/logo.svg","hash":"dbd6b6387de4a1086bb834d8eff6a03da6ee0b3f","modified":1526789933056},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526789933056},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526789933056},{"_id":"public/assets/img/alipay.jpg","hash":"090631c4daf26723645f2825be76cdd63a1c19cf","modified":1526789934578},{"_id":"public/assets/img/weixin.jpg","hash":"ce70e725d61157a0557f835d11090d6a3f370265","modified":1526789934580},{"_id":"public/fonts/LobsterTwo-Regular.ttf","hash":"5c3618fe5afab581dcfc46cd91efcea9ce134f58","modified":1526789934587},{"_id":"public/assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png","hash":"8639e71c1394a1515b5fdcac0df4a6735e07098b","modified":1526789934587},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526789934587},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526789934587},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1526789934665},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526789934665},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526789934666},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526789934669},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1526789934669},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526789934670},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526789934670},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1526789934670},{"_id":"public/js/src/canvas-lzd.js","hash":"4cd88cfc53a4ae3a0fc4b636a05f7d8994b8d46b","modified":1526789934671},{"_id":"public/js/src/motion.js","hash":"562e000b47699968d922a602f61f8eaa0e63dd9d","modified":1526789934671},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526789934671},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526789934671},{"_id":"public/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1526789934671},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526789934671},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526789934671},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1526789934671},{"_id":"public/css/main.css","hash":"b9ee71902750ab0051ad43120d6a314aad0c6d74","modified":1526789934671},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526789934671},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526789934671},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526789934672},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526789934672},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526789934672},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526789934672},{"_id":"public/assets/blogImg/InterviewQuestions/interview-top.jpg","hash":"adc021283431cdcede7eaa6784a9bc94c48f4b45","modified":1526789934672},{"_id":"public/assets/blogImg/HTTP-and-HTTPS/http-https.jpg","hash":"86525d6afc5071d8cbcb6400b9abad1159695180","modified":1526789934672},{"_id":"public/assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg","hash":"acbd25aae3c177bd5ef5c1a9ae801e2575173d83","modified":1526789934672},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526789934672},{"_id":"public/assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg","hash":"104c2f6fd3ed7d4feb96359a722ed1c941c9d98a","modified":1526789934679},{"_id":"public/assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg","hash":"fcb98ddd1f8f5006f6d0d199d98c265f1c126e27","modified":1526789934730},{"_id":"public/images/sidebar.jpg","hash":"120dc95d0d839a273a59b70c20cf1f4bce7ccb96","modified":1526789934743}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-04-29T08:10:03.165Z","updated":"2018-04-19T14:46:27.550Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjhebautg0000ofxfpptc3d8g","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"标签","date":"2018-04-26T04:56:16.000Z","type":"tags","comments":0,"declare":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-04-26 12:56:16\ntype: \"tags\"\ncomments: false\ndeclare: false\n---\n","updated":"2018-04-26T05:10:30.593Z","path":"tags/index.html","layout":"page","_id":"cjhebav8z001hofxfzfmf295n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Cocoapods Podfile文件参数剖析","date":"2018-04-10T08:39:25.000Z","declare":false,"reward":false,"comments":1,"_content":"\n![top](/assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg)\n\n<!-- more -->\n\n> 文章内容摘自[pluto-y大神](http://www.pluto-y.com/cocoapods-getting-stared/)的博客，感谢大神～\n\n### Podfile文件\n\n##### 1. pod '框架名' 参数\n\n- **参数一：版本号。**有大于( `pod 'AFNetworking', '> 3.1'` )、小于( `pod 'AFNetworking', '< 3.1'` )、等于( `pod 'AFNetworking', '3.1'` )、大于等于( `pod 'AFNetworking', '>= 3.1'` )等。**'~> 3.1' 意思是>=3.1 并且<3.2的意思。**\n- **参数二：地址。**地址Cocoapods可以指定某一个git的目录或者是本地的目录，表示一直用最新版本。例如直接在后面接上：`:git => 'https://github.com/XXX/AFNetworking.git'`，或者开发模式下：`:path => '~/Documents/AFNetworking'`。\n- **参数三：tag、branch、commit。**例如：`:branch => 'branch名'`、`:tag => 'tag名'`、`:commit => '提交号'`。\n- **参数四：inhibitallwarnings。**用来避免第三方框架中带来的warnings。例如：`:inhibitallwarnings => true`\n\n##### 2. platform\n\n依赖的库希望在哪个平台被编译。 `platform :ios, '7.0'` 希望采用iOS7.0进行编译。\n\n1. target\n\n   指定具体的配置适配在哪个**target**。\n\n2. use_frameworks!\n\n   指明编译成动态库。**swift下必须有这句话。**\n\n3. source\n\n   指明Cocoapods从哪些仓库中获得框架的源代码。\n\n#### Demo：\n\n```ruby\n# open source\nsource 'https://github.com/CocoaPods/Specs.git'\n\n# 私有源\nsource 'https://github.com/Artsy/Specs.git'\n\n# 指定 iOS9.0 进行编译\nplatform :ios, '9.0'\n\ntarget 'App' do\n  \n  # 编译动态库（swift必须）\n  use_frameworks!\n  \n  pod 'AFNetworking'\n  \n  pod 'SVProgressHUD', '~>2.1' #大于等于2.1，小于2.2\n  \n  pod 'MJRefresh'，:git=> 'https://github.com/XXX/MJRefresh.git' #从 https://github.com/XXX/MJRefresh.git 目录更新cocoapods\n  \n  pod 'Masonry', :git=> 'https://github.com/XXX/MJRefresh.git', :branch => '1-1-stable' #指定从特定的git repo branch更新cocoapod\n  pod 'Masonry', :git=> 'https://github.com/XXX/MJRefresh.git', :tag => '1.3.0' #指定从特定的git repo tag更新cocoapod\n\n  target 'AppTests' do\n    \n    # 编译动态库（swift必须）\n    use_frameworks!\n    \n    pod 'FBSnapshotTestCase'\n    \n  end\nend\n```\n\n### 命令行 `pod install` 和 `pod update`\n\n1. 参数 `--no-repo-update`\n\n在执行`pod install`和`pod update`两条命令时，会执行`pod repo update`的操作，只更新当前项目的第三方框架。\n\n2. 参数`—verbose` 和 `--silent`\n\n用来控制`pod`命令，不希望看到输出的情况时可使用`--silent`。如果出错，可添加`--verbose`显示具体的出错信息。对于大多数的`Cocoapods`的命令行来说都带有着两个参数。\n\n### 更新Ruby\n\n1. 移除Ruby的默认源：\n\n   `gem sources --remove https://rubygems.org/` \n\n2. 替换Ruby China源：\n\n   `gem sources -a https://gems.ruby-china.org/` \n\n3. 验证当前的Ruby源：\n\n   `gem sources -l` \n","source":"_posts/Cocoapods-Podfile-Arguments.md","raw":"---\ntitle: Cocoapods Podfile文件参数剖析\ndate: 2018-04-10 16:39:25\ndeclare: false\nreward: false\ncomments: true\ntags:\n- Podfile\n- Cocoapods\n---\n\n![top](/assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg)\n\n<!-- more -->\n\n> 文章内容摘自[pluto-y大神](http://www.pluto-y.com/cocoapods-getting-stared/)的博客，感谢大神～\n\n### Podfile文件\n\n##### 1. pod '框架名' 参数\n\n- **参数一：版本号。**有大于( `pod 'AFNetworking', '> 3.1'` )、小于( `pod 'AFNetworking', '< 3.1'` )、等于( `pod 'AFNetworking', '3.1'` )、大于等于( `pod 'AFNetworking', '>= 3.1'` )等。**'~> 3.1' 意思是>=3.1 并且<3.2的意思。**\n- **参数二：地址。**地址Cocoapods可以指定某一个git的目录或者是本地的目录，表示一直用最新版本。例如直接在后面接上：`:git => 'https://github.com/XXX/AFNetworking.git'`，或者开发模式下：`:path => '~/Documents/AFNetworking'`。\n- **参数三：tag、branch、commit。**例如：`:branch => 'branch名'`、`:tag => 'tag名'`、`:commit => '提交号'`。\n- **参数四：inhibitallwarnings。**用来避免第三方框架中带来的warnings。例如：`:inhibitallwarnings => true`\n\n##### 2. platform\n\n依赖的库希望在哪个平台被编译。 `platform :ios, '7.0'` 希望采用iOS7.0进行编译。\n\n1. target\n\n   指定具体的配置适配在哪个**target**。\n\n2. use_frameworks!\n\n   指明编译成动态库。**swift下必须有这句话。**\n\n3. source\n\n   指明Cocoapods从哪些仓库中获得框架的源代码。\n\n#### Demo：\n\n```ruby\n# open source\nsource 'https://github.com/CocoaPods/Specs.git'\n\n# 私有源\nsource 'https://github.com/Artsy/Specs.git'\n\n# 指定 iOS9.0 进行编译\nplatform :ios, '9.0'\n\ntarget 'App' do\n  \n  # 编译动态库（swift必须）\n  use_frameworks!\n  \n  pod 'AFNetworking'\n  \n  pod 'SVProgressHUD', '~>2.1' #大于等于2.1，小于2.2\n  \n  pod 'MJRefresh'，:git=> 'https://github.com/XXX/MJRefresh.git' #从 https://github.com/XXX/MJRefresh.git 目录更新cocoapods\n  \n  pod 'Masonry', :git=> 'https://github.com/XXX/MJRefresh.git', :branch => '1-1-stable' #指定从特定的git repo branch更新cocoapod\n  pod 'Masonry', :git=> 'https://github.com/XXX/MJRefresh.git', :tag => '1.3.0' #指定从特定的git repo tag更新cocoapod\n\n  target 'AppTests' do\n    \n    # 编译动态库（swift必须）\n    use_frameworks!\n    \n    pod 'FBSnapshotTestCase'\n    \n  end\nend\n```\n\n### 命令行 `pod install` 和 `pod update`\n\n1. 参数 `--no-repo-update`\n\n在执行`pod install`和`pod update`两条命令时，会执行`pod repo update`的操作，只更新当前项目的第三方框架。\n\n2. 参数`—verbose` 和 `--silent`\n\n用来控制`pod`命令，不希望看到输出的情况时可使用`--silent`。如果出错，可添加`--verbose`显示具体的出错信息。对于大多数的`Cocoapods`的命令行来说都带有着两个参数。\n\n### 更新Ruby\n\n1. 移除Ruby的默认源：\n\n   `gem sources --remove https://rubygems.org/` \n\n2. 替换Ruby China源：\n\n   `gem sources -a https://gems.ruby-china.org/` \n\n3. 验证当前的Ruby源：\n\n   `gem sources -l` \n","slug":"Cocoapods-Podfile-Arguments","published":1,"updated":"2018-05-20T02:17:39.508Z","_id":"cjhebauwb0001ofxflb5mpwfr","layout":"post","photos":[],"link":"","content":"<p><img src=\"/assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg\" alt=\"top\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>文章内容摘自<a href=\"http://www.pluto-y.com/cocoapods-getting-stared/\" target=\"_blank\" rel=\"noopener\">pluto-y大神</a>的博客，感谢大神～</p>\n</blockquote>\n<h3 id=\"Podfile文件\"><a href=\"#Podfile文件\" class=\"headerlink\" title=\"Podfile文件\"></a>Podfile文件</h3><h5 id=\"1-pod-‘框架名’-参数\"><a href=\"#1-pod-‘框架名’-参数\" class=\"headerlink\" title=\"1. pod ‘框架名’ 参数\"></a>1. pod ‘框架名’ 参数</h5><ul>\n<li><strong>参数一：版本号。</strong>有大于( <code>pod &#39;AFNetworking&#39;, &#39;&gt; 3.1&#39;</code> )、小于( <code>pod &#39;AFNetworking&#39;, &#39;&lt; 3.1&#39;</code> )、等于( <code>pod &#39;AFNetworking&#39;, &#39;3.1&#39;</code> )、大于等于( <code>pod &#39;AFNetworking&#39;, &#39;&gt;= 3.1&#39;</code> )等。<strong>‘~&gt; 3.1’ 意思是&gt;=3.1 并且&lt;3.2的意思。</strong></li>\n<li><strong>参数二：地址。</strong>地址Cocoapods可以指定某一个git的目录或者是本地的目录，表示一直用最新版本。例如直接在后面接上：<code>:git =&gt; &#39;https://github.com/XXX/AFNetworking.git&#39;</code>，或者开发模式下：<code>:path =&gt; &#39;~/Documents/AFNetworking&#39;</code>。</li>\n<li><strong>参数三：tag、branch、commit。</strong>例如：<code>:branch =&gt; &#39;branch名&#39;</code>、<code>:tag =&gt; &#39;tag名&#39;</code>、<code>:commit =&gt; &#39;提交号&#39;</code>。</li>\n<li><strong>参数四：inhibitallwarnings。</strong>用来避免第三方框架中带来的warnings。例如：<code>:inhibitallwarnings =&gt; true</code></li>\n</ul>\n<h5 id=\"2-platform\"><a href=\"#2-platform\" class=\"headerlink\" title=\"2. platform\"></a>2. platform</h5><p>依赖的库希望在哪个平台被编译。 <code>platform :ios, &#39;7.0&#39;</code> 希望采用iOS7.0进行编译。</p>\n<ol>\n<li><p>target</p>\n<p>指定具体的配置适配在哪个<strong>target</strong>。</p>\n</li>\n<li><p>use_frameworks!</p>\n<p>指明编译成动态库。<strong>swift下必须有这句话。</strong></p>\n</li>\n<li><p>source</p>\n<p>指明Cocoapods从哪些仓库中获得框架的源代码。</p>\n</li>\n</ol>\n<h4 id=\"Demo：\"><a href=\"#Demo：\" class=\"headerlink\" title=\"Demo：\"></a>Demo：</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># open source</span></span><br><span class=\"line\">source <span class=\"string\">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 私有源</span></span><br><span class=\"line\">source <span class=\"string\">'https://github.com/Artsy/Specs.git'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 iOS9.0 进行编译</span></span><br><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">'9.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'App'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 编译动态库（swift必须）</span></span><br><span class=\"line\">  use_frameworks!</span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'AFNetworking'</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'SVProgressHUD'</span>, <span class=\"string\">'~&gt;2.1'</span> <span class=\"comment\">#大于等于2.1，小于2.2</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'MJRefresh'</span>，<span class=\"symbol\">:git=&gt;</span> <span class=\"string\">'https://github.com/XXX/MJRefresh.git'</span> <span class=\"comment\">#从 https://github.com/XXX/MJRefresh.git 目录更新cocoapods</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'Masonry'</span>, <span class=\"symbol\">:git=&gt;</span> <span class=\"string\">'https://github.com/XXX/MJRefresh.git'</span>, <span class=\"symbol\">:branch</span> =&gt; <span class=\"string\">'1-1-stable'</span> <span class=\"comment\">#指定从特定的git repo branch更新cocoapod</span></span><br><span class=\"line\">  pod <span class=\"string\">'Masonry'</span>, <span class=\"symbol\">:git=&gt;</span> <span class=\"string\">'https://github.com/XXX/MJRefresh.git'</span>, <span class=\"symbol\">:tag</span> =&gt; <span class=\"string\">'1.3.0'</span> <span class=\"comment\">#指定从特定的git repo tag更新cocoapod</span></span><br><span class=\"line\"></span><br><span class=\"line\">  target <span class=\"string\">'AppTests'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 编译动态库（swift必须）</span></span><br><span class=\"line\">    use_frameworks!</span><br><span class=\"line\">    </span><br><span class=\"line\">    pod <span class=\"string\">'FBSnapshotTestCase'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"命令行-pod-install-和-pod-update\"><a href=\"#命令行-pod-install-和-pod-update\" class=\"headerlink\" title=\"命令行 pod install 和 pod update\"></a>命令行 <code>pod install</code> 和 <code>pod update</code></h3><ol>\n<li>参数 <code>--no-repo-update</code></li>\n</ol>\n<p>在执行<code>pod install</code>和<code>pod update</code>两条命令时，会执行<code>pod repo update</code>的操作，只更新当前项目的第三方框架。</p>\n<ol start=\"2\">\n<li>参数<code>—verbose</code> 和 <code>--silent</code></li>\n</ol>\n<p>用来控制<code>pod</code>命令，不希望看到输出的情况时可使用<code>--silent</code>。如果出错，可添加<code>--verbose</code>显示具体的出错信息。对于大多数的<code>Cocoapods</code>的命令行来说都带有着两个参数。</p>\n<h3 id=\"更新Ruby\"><a href=\"#更新Ruby\" class=\"headerlink\" title=\"更新Ruby\"></a>更新Ruby</h3><ol>\n<li><p>移除Ruby的默认源：</p>\n<p><code>gem sources --remove https://rubygems.org/</code> </p>\n</li>\n<li><p>替换Ruby China源：</p>\n<p><code>gem sources -a https://gems.ruby-china.org/</code> </p>\n</li>\n<li><p>验证当前的Ruby源：</p>\n<p><code>gem sources -l</code> </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImg/Cocoapods-Podfile-Arguments/cocoapods-top.jpg\" alt=\"top\"></p>","more":"<blockquote>\n<p>文章内容摘自<a href=\"http://www.pluto-y.com/cocoapods-getting-stared/\" target=\"_blank\" rel=\"noopener\">pluto-y大神</a>的博客，感谢大神～</p>\n</blockquote>\n<h3 id=\"Podfile文件\"><a href=\"#Podfile文件\" class=\"headerlink\" title=\"Podfile文件\"></a>Podfile文件</h3><h5 id=\"1-pod-‘框架名’-参数\"><a href=\"#1-pod-‘框架名’-参数\" class=\"headerlink\" title=\"1. pod ‘框架名’ 参数\"></a>1. pod ‘框架名’ 参数</h5><ul>\n<li><strong>参数一：版本号。</strong>有大于( <code>pod &#39;AFNetworking&#39;, &#39;&gt; 3.1&#39;</code> )、小于( <code>pod &#39;AFNetworking&#39;, &#39;&lt; 3.1&#39;</code> )、等于( <code>pod &#39;AFNetworking&#39;, &#39;3.1&#39;</code> )、大于等于( <code>pod &#39;AFNetworking&#39;, &#39;&gt;= 3.1&#39;</code> )等。<strong>‘~&gt; 3.1’ 意思是&gt;=3.1 并且&lt;3.2的意思。</strong></li>\n<li><strong>参数二：地址。</strong>地址Cocoapods可以指定某一个git的目录或者是本地的目录，表示一直用最新版本。例如直接在后面接上：<code>:git =&gt; &#39;https://github.com/XXX/AFNetworking.git&#39;</code>，或者开发模式下：<code>:path =&gt; &#39;~/Documents/AFNetworking&#39;</code>。</li>\n<li><strong>参数三：tag、branch、commit。</strong>例如：<code>:branch =&gt; &#39;branch名&#39;</code>、<code>:tag =&gt; &#39;tag名&#39;</code>、<code>:commit =&gt; &#39;提交号&#39;</code>。</li>\n<li><strong>参数四：inhibitallwarnings。</strong>用来避免第三方框架中带来的warnings。例如：<code>:inhibitallwarnings =&gt; true</code></li>\n</ul>\n<h5 id=\"2-platform\"><a href=\"#2-platform\" class=\"headerlink\" title=\"2. platform\"></a>2. platform</h5><p>依赖的库希望在哪个平台被编译。 <code>platform :ios, &#39;7.0&#39;</code> 希望采用iOS7.0进行编译。</p>\n<ol>\n<li><p>target</p>\n<p>指定具体的配置适配在哪个<strong>target</strong>。</p>\n</li>\n<li><p>use_frameworks!</p>\n<p>指明编译成动态库。<strong>swift下必须有这句话。</strong></p>\n</li>\n<li><p>source</p>\n<p>指明Cocoapods从哪些仓库中获得框架的源代码。</p>\n</li>\n</ol>\n<h4 id=\"Demo：\"><a href=\"#Demo：\" class=\"headerlink\" title=\"Demo：\"></a>Demo：</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># open source</span></span><br><span class=\"line\">source <span class=\"string\">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 私有源</span></span><br><span class=\"line\">source <span class=\"string\">'https://github.com/Artsy/Specs.git'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 iOS9.0 进行编译</span></span><br><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">'9.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'App'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 编译动态库（swift必须）</span></span><br><span class=\"line\">  use_frameworks!</span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'AFNetworking'</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'SVProgressHUD'</span>, <span class=\"string\">'~&gt;2.1'</span> <span class=\"comment\">#大于等于2.1，小于2.2</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'MJRefresh'</span>，<span class=\"symbol\">:git=&gt;</span> <span class=\"string\">'https://github.com/XXX/MJRefresh.git'</span> <span class=\"comment\">#从 https://github.com/XXX/MJRefresh.git 目录更新cocoapods</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  pod <span class=\"string\">'Masonry'</span>, <span class=\"symbol\">:git=&gt;</span> <span class=\"string\">'https://github.com/XXX/MJRefresh.git'</span>, <span class=\"symbol\">:branch</span> =&gt; <span class=\"string\">'1-1-stable'</span> <span class=\"comment\">#指定从特定的git repo branch更新cocoapod</span></span><br><span class=\"line\">  pod <span class=\"string\">'Masonry'</span>, <span class=\"symbol\">:git=&gt;</span> <span class=\"string\">'https://github.com/XXX/MJRefresh.git'</span>, <span class=\"symbol\">:tag</span> =&gt; <span class=\"string\">'1.3.0'</span> <span class=\"comment\">#指定从特定的git repo tag更新cocoapod</span></span><br><span class=\"line\"></span><br><span class=\"line\">  target <span class=\"string\">'AppTests'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 编译动态库（swift必须）</span></span><br><span class=\"line\">    use_frameworks!</span><br><span class=\"line\">    </span><br><span class=\"line\">    pod <span class=\"string\">'FBSnapshotTestCase'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"命令行-pod-install-和-pod-update\"><a href=\"#命令行-pod-install-和-pod-update\" class=\"headerlink\" title=\"命令行 pod install 和 pod update\"></a>命令行 <code>pod install</code> 和 <code>pod update</code></h3><ol>\n<li>参数 <code>--no-repo-update</code></li>\n</ol>\n<p>在执行<code>pod install</code>和<code>pod update</code>两条命令时，会执行<code>pod repo update</code>的操作，只更新当前项目的第三方框架。</p>\n<ol start=\"2\">\n<li>参数<code>—verbose</code> 和 <code>--silent</code></li>\n</ol>\n<p>用来控制<code>pod</code>命令，不希望看到输出的情况时可使用<code>--silent</code>。如果出错，可添加<code>--verbose</code>显示具体的出错信息。对于大多数的<code>Cocoapods</code>的命令行来说都带有着两个参数。</p>\n<h3 id=\"更新Ruby\"><a href=\"#更新Ruby\" class=\"headerlink\" title=\"更新Ruby\"></a>更新Ruby</h3><ol>\n<li><p>移除Ruby的默认源：</p>\n<p><code>gem sources --remove https://rubygems.org/</code> </p>\n</li>\n<li><p>替换Ruby China源：</p>\n<p><code>gem sources -a https://gems.ruby-china.org/</code> </p>\n</li>\n<li><p>验证当前的Ruby源：</p>\n<p><code>gem sources -l</code> </p>\n</li>\n</ol>"},{"title":"定制XCode9工程目录以及文件模板","declare":true,"comments":1,"reward":false,"date":"2018-05-20T02:03:00.000Z","_content":"\n### 目标\n\n定制Xcode项目模板和文件模板\n\n- [项目模板](#1)\n- [文件模板](#2)\n\n<!-- more -->\n\n### 实现\n\n<h3 id = \"1\">1. 项目模板</h3>\n\n创建一个工程模板结构：\n\n<pre>\n\nUser Defined App.xctemplate\n├── Application\n│   └── README.md\n├── BootLoader\n│   └── README.md\n├── Classes\n│   └── README.md\n├── Resource\n│   └── README.md\n├── Services\n│   ├── AppContext.h\n│   ├── AppContext.m\n│   ├── AppDelegate+Service.h\n│   ├── AppDelegate+Service.m\n│   └── README.md\n├── TemplateInfo.plist\n├── Tools\n│   └── README.md\n├── Utils\n│   ├── Category\n│   │   └── README.md\n│   └── Common\n│       └── README.md\n└── Vendors\n​    └── README.md\n\n</pre>\n\n\n\n> 参考链接\n> [ 1 ] : [http://mama.indstate.edu/users/ice/tree/](http://mama.indstate.edu/users/ice/tree/)\n> [ 2 ] : [http://jeanetienne.net/2017/09/10/xcode-templates.html](http://jeanetienne.net/2017/09/10/xcode-templates.html)\n> [ 3 ] : [http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/](http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/)\n\n\n\n","source":"_posts/File-Templates.md","raw":"---\ntitle: 定制XCode9工程目录以及文件模板\ndeclare: true\ncomments: true\nreward: false\ndate: 2018-05-20 10:03:00\ntags:\n- XCode\n- Templates\n---\n\n### 目标\n\n定制Xcode项目模板和文件模板\n\n- [项目模板](#1)\n- [文件模板](#2)\n\n<!-- more -->\n\n### 实现\n\n<h3 id = \"1\">1. 项目模板</h3>\n\n创建一个工程模板结构：\n\n<pre>\n\nUser Defined App.xctemplate\n├── Application\n│   └── README.md\n├── BootLoader\n│   └── README.md\n├── Classes\n│   └── README.md\n├── Resource\n│   └── README.md\n├── Services\n│   ├── AppContext.h\n│   ├── AppContext.m\n│   ├── AppDelegate+Service.h\n│   ├── AppDelegate+Service.m\n│   └── README.md\n├── TemplateInfo.plist\n├── Tools\n│   └── README.md\n├── Utils\n│   ├── Category\n│   │   └── README.md\n│   └── Common\n│       └── README.md\n└── Vendors\n​    └── README.md\n\n</pre>\n\n\n\n> 参考链接\n> [ 1 ] : [http://mama.indstate.edu/users/ice/tree/](http://mama.indstate.edu/users/ice/tree/)\n> [ 2 ] : [http://jeanetienne.net/2017/09/10/xcode-templates.html](http://jeanetienne.net/2017/09/10/xcode-templates.html)\n> [ 3 ] : [http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/](http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/)\n\n\n\n","slug":"File-Templates","published":1,"updated":"2018-05-20T04:43:21.867Z","_id":"cjhebauwr0002ofxfojkwltsj","layout":"post","photos":[],"link":"","content":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>定制Xcode项目模板和文件模板</p>\n<ul>\n<li><a href=\"#1\">项目模板</a></li>\n<li><a href=\"#2\">文件模板</a></li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h3 id=\"1\">1. 项目模板</h3>\n\n<p>创建一个工程模板结构：</p>\n<pre>\n\nUser Defined App.xctemplate\n├── Application\n│   └── README.md\n├── BootLoader\n│   └── README.md\n├── Classes\n│   └── README.md\n├── Resource\n│   └── README.md\n├── Services\n│   ├── AppContext.h\n│   ├── AppContext.m\n│   ├── AppDelegate+Service.h\n│   ├── AppDelegate+Service.m\n│   └── README.md\n├── TemplateInfo.plist\n├── Tools\n│   └── README.md\n├── Utils\n│   ├── Category\n│   │   └── README.md\n│   └── Common\n│       └── README.md\n└── Vendors\n​    └── README.md\n\n</pre>\n\n\n\n<blockquote>\n<p>参考链接<br>[ 1 ] : <a href=\"http://mama.indstate.edu/users/ice/tree/\" target=\"_blank\" rel=\"noopener\">http://mama.indstate.edu/users/ice/tree/</a><br>[ 2 ] : <a href=\"http://jeanetienne.net/2017/09/10/xcode-templates.html\" target=\"_blank\" rel=\"noopener\">http://jeanetienne.net/2017/09/10/xcode-templates.html</a><br>[ 3 ] : <a href=\"http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/\" target=\"_blank\" rel=\"noopener\">http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>定制Xcode项目模板和文件模板</p>\n<ul>\n<li><a href=\"#1\">项目模板</a></li>\n<li><a href=\"#2\">文件模板</a></li>\n</ul>","more":"<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h3 id=\"1\">1. 项目模板</h3>\n\n<p>创建一个工程模板结构：</p>\n<pre>\n\nUser Defined App.xctemplate\n├── Application\n│   └── README.md\n├── BootLoader\n│   └── README.md\n├── Classes\n│   └── README.md\n├── Resource\n│   └── README.md\n├── Services\n│   ├── AppContext.h\n│   ├── AppContext.m\n│   ├── AppDelegate+Service.h\n│   ├── AppDelegate+Service.m\n│   └── README.md\n├── TemplateInfo.plist\n├── Tools\n│   └── README.md\n├── Utils\n│   ├── Category\n│   │   └── README.md\n│   └── Common\n│       └── README.md\n└── Vendors\n​    └── README.md\n\n</pre>\n\n\n\n<blockquote>\n<p>参考链接<br>[ 1 ] : <a href=\"http://mama.indstate.edu/users/ice/tree/\" target=\"_blank\" rel=\"noopener\">http://mama.indstate.edu/users/ice/tree/</a><br>[ 2 ] : <a href=\"http://jeanetienne.net/2017/09/10/xcode-templates.html\" target=\"_blank\" rel=\"noopener\">http://jeanetienne.net/2017/09/10/xcode-templates.html</a><br>[ 3 ] : <a href=\"http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/\" target=\"_blank\" rel=\"noopener\">http://kentonyu.com/2016/04/27/如何Copy框架：自定义Xcode%20Template/</a></p>\n</blockquote>"},{"title":"在 Hexo 中给文章添加版权信息(yilia主题)","date":"2018-03-20T07:26:32.000Z","declare":true,"comments":1,"_content":"\n![top](/assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg)\n\n<!-- more -->\n\n### Step 1\n\n在`layout\\_partial\\post\\` 目录下新建 `declare.ejs` 内如如下：\n\n```javascript\n<% if ((theme.declare_type === 2 || (theme.declare_type === 1 && post.declare)) && !index){ %>\n<div class=\"declare\">\n\t<strong>本文标题：</strong>\n\t<%= post.title %>\n\t<br>\n\t<strong>本文作者：</strong>\n\t<%= theme.author%>\n\t<br>\n\t<strong>发布时间：</strong>\n\t<%= page.date.format(\"YYYY年MM月DD日 - HH:MM\")%>\n\t<br>\n\t<strong>本文链接：</strong>\n\t<a href=\"<%= post.permalink %>\"><%= post.permalink %></a>\n\t<br>\n\t<strong>许可协议：</strong>\n\t<i class=\"fa fa-creative-commons\"></i><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"> \n\t<a rel=\"license\" href=\"<%= theme.licensee_url%>\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"><%= theme.licensee_name%></a> 转载请保留原文链接及作者。\n</div>\n<% } %>\n```\n\n### Step 2\n\n在`layout\\_partial\\article.ejs` 文件下添加如下代码：\n\n```javascript\n<%- partial('post/declare') %>\n```\n\n### Step 3\n\n创建新文件`themes/yilia/source-src/css/declare.scss`，添加如下CSS代码：\n\n```javascript\n.declare {\n    background-color: #eaeaea;\n    margin-top: 2em;\n    border-left: 3px solid #ff1700;\n    padding: .5em 1em;\n}\n```\n\n同时在`themes/yilia/source-src/css/main.scss`添加如下代码：\n\n```javascript\n@import \"./declare\";\n```\n\n### Step 4\n\n在`themes/yilia/`目录下输入：\n\n`npm run dev`生成新代码，\n或`npm run dist`生成新代码，并压缩。\n\n> 提示：`yilia`文件夹需要单独copy一份执行`npm install webpack-cli -D`局部安装`webpack`，然后再执行`npm run dev`或`npm run dist`，执行命令之前可先清空`themes/yilia/source`里面的文件（不包括文件夹），最后再复制到hexo项目中覆盖，否则可能会因为权限问题导致ERROR。\n\n### Step 5\n\n修改`themes/yilia/_config.yml`：\n\n```javascript\n#版权声明：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明\ndeclare_type: 2 \nlicensee_url: https://creativecommons.org/licenses/by-nc-nd/4.0/\nlicensee_name: '署名-非商业性使用-禁止演绎 4.0 国际'\n```\n\n### End\n\n","source":"_posts/Hexo-add-deciare.md","raw":"---\ntitle: 在 Hexo 中给文章添加版权信息(yilia主题)\ndate: 2018-03-20 15:26:32\ndeclare: true\ncomments: true\ntags:\n- Hexo\n- yilia\n---\n\n![top](/assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg)\n\n<!-- more -->\n\n### Step 1\n\n在`layout\\_partial\\post\\` 目录下新建 `declare.ejs` 内如如下：\n\n```javascript\n<% if ((theme.declare_type === 2 || (theme.declare_type === 1 && post.declare)) && !index){ %>\n<div class=\"declare\">\n\t<strong>本文标题：</strong>\n\t<%= post.title %>\n\t<br>\n\t<strong>本文作者：</strong>\n\t<%= theme.author%>\n\t<br>\n\t<strong>发布时间：</strong>\n\t<%= page.date.format(\"YYYY年MM月DD日 - HH:MM\")%>\n\t<br>\n\t<strong>本文链接：</strong>\n\t<a href=\"<%= post.permalink %>\"><%= post.permalink %></a>\n\t<br>\n\t<strong>许可协议：</strong>\n\t<i class=\"fa fa-creative-commons\"></i><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"> \n\t<a rel=\"license\" href=\"<%= theme.licensee_url%>\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"><%= theme.licensee_name%></a> 转载请保留原文链接及作者。\n</div>\n<% } %>\n```\n\n### Step 2\n\n在`layout\\_partial\\article.ejs` 文件下添加如下代码：\n\n```javascript\n<%- partial('post/declare') %>\n```\n\n### Step 3\n\n创建新文件`themes/yilia/source-src/css/declare.scss`，添加如下CSS代码：\n\n```javascript\n.declare {\n    background-color: #eaeaea;\n    margin-top: 2em;\n    border-left: 3px solid #ff1700;\n    padding: .5em 1em;\n}\n```\n\n同时在`themes/yilia/source-src/css/main.scss`添加如下代码：\n\n```javascript\n@import \"./declare\";\n```\n\n### Step 4\n\n在`themes/yilia/`目录下输入：\n\n`npm run dev`生成新代码，\n或`npm run dist`生成新代码，并压缩。\n\n> 提示：`yilia`文件夹需要单独copy一份执行`npm install webpack-cli -D`局部安装`webpack`，然后再执行`npm run dev`或`npm run dist`，执行命令之前可先清空`themes/yilia/source`里面的文件（不包括文件夹），最后再复制到hexo项目中覆盖，否则可能会因为权限问题导致ERROR。\n\n### Step 5\n\n修改`themes/yilia/_config.yml`：\n\n```javascript\n#版权声明：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明\ndeclare_type: 2 \nlicensee_url: https://creativecommons.org/licenses/by-nc-nd/4.0/\nlicensee_name: '署名-非商业性使用-禁止演绎 4.0 国际'\n```\n\n### End\n\n","slug":"Hexo-add-deciare","published":1,"updated":"2018-04-29T07:01:47.749Z","layout":"post","photos":[],"link":"","_id":"cjhebauwy0004ofxfth2er7f1","content":"<p><img src=\"/assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg\" alt=\"top\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p>在<code>layout\\_partial\\post\\</code> 目录下新建 <code>declare.ejs</code> 内如如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> ((theme.declare_type === <span class=\"number\">2</span> || (theme.declare_type === <span class=\"number\">1</span> &amp;&amp; post.declare)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"declare\"</span>&gt;</span><br><span class=\"line\">\t&lt;strong&gt;本文标题：&lt;<span class=\"regexp\">/strong&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;%= post.title %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;strong&gt;本文作者：&lt;/</span>strong&gt;</span><br><span class=\"line\">\t&lt;%= theme.author%&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t&lt;strong&gt;发布时间：&lt;<span class=\"regexp\">/strong&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;%= page.date.format(\"YYYY年MM月DD日 - HH:MM\")%&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;strong&gt;本文链接：&lt;/</span>strong&gt;</span><br><span class=\"line\">\t&lt;a href=<span class=\"string\">\"&lt;%= post.permalink %&gt;\"</span>&gt;&lt;%= post.permalink %&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t&lt;strong&gt;许可协议：&lt;<span class=\"regexp\">/strong&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;i class=\"fa fa-creative-commons\"&gt;&lt;/i</span>&gt;&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"&gt; </span><br><span class=\"line\">\t&lt;a rel=\"license\" href=\"&lt;%= theme.licensee_url%&gt;\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"&gt;&lt;%= theme.licensee_name%&gt;&lt;/a&gt; 转载请保留原文链接及作者。</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>在<code>layout\\_partial\\article.ejs</code> 文件下添加如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">'post/declare'</span>) %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>创建新文件<code>themes/yilia/source-src/css/declare.scss</code>，添加如下CSS代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.declare &#123;</span><br><span class=\"line\">    background-color: #eaeaea;</span><br><span class=\"line\">    margin-top: <span class=\"number\">2</span>em;</span><br><span class=\"line\">    border-left: 3px solid #ff1700;</span><br><span class=\"line\">    padding: <span class=\"number\">.5</span>em <span class=\"number\">1</span>em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时在<code>themes/yilia/source-src/css/main.scss</code>添加如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"./declare\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>在<code>themes/yilia/</code>目录下输入：</p>\n<p><code>npm run dev</code>生成新代码，<br>或<code>npm run dist</code>生成新代码，并压缩。</p>\n<blockquote>\n<p>提示：<code>yilia</code>文件夹需要单独copy一份执行<code>npm install webpack-cli -D</code>局部安装<code>webpack</code>，然后再执行<code>npm run dev</code>或<code>npm run dist</code>，执行命令之前可先清空<code>themes/yilia/source</code>里面的文件（不包括文件夹），最后再复制到hexo项目中覆盖，否则可能会因为权限问题导致ERROR。</p>\n</blockquote>\n<h3 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h3><p>修改<code>themes/yilia/_config.yml</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#版权声明：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明</span><br><span class=\"line\">declare_type: <span class=\"number\">2</span> </span><br><span class=\"line\">licensee_url: https:<span class=\"comment\">//creativecommons.org/licenses/by-nc-nd/4.0/</span></span><br><span class=\"line\">licensee_name: <span class=\"string\">'署名-非商业性使用-禁止演绎 4.0 国际'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImg/Hexo-add-deciare/hexo-add-deciare-top.jpg\" alt=\"top\"></p>","more":"<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p>在<code>layout\\_partial\\post\\</code> 目录下新建 <code>declare.ejs</code> 内如如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> ((theme.declare_type === <span class=\"number\">2</span> || (theme.declare_type === <span class=\"number\">1</span> &amp;&amp; post.declare)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"declare\"</span>&gt;</span><br><span class=\"line\">\t&lt;strong&gt;本文标题：&lt;<span class=\"regexp\">/strong&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;%= post.title %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;strong&gt;本文作者：&lt;/</span>strong&gt;</span><br><span class=\"line\">\t&lt;%= theme.author%&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t&lt;strong&gt;发布时间：&lt;<span class=\"regexp\">/strong&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;%= page.date.format(\"YYYY年MM月DD日 - HH:MM\")%&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;strong&gt;本文链接：&lt;/</span>strong&gt;</span><br><span class=\"line\">\t&lt;a href=<span class=\"string\">\"&lt;%= post.permalink %&gt;\"</span>&gt;&lt;%= post.permalink %&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t&lt;strong&gt;许可协议：&lt;<span class=\"regexp\">/strong&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;i class=\"fa fa-creative-commons\"&gt;&lt;/i</span>&gt;&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"&gt; </span><br><span class=\"line\">\t&lt;a rel=\"license\" href=\"&lt;%= theme.licensee_url%&gt;\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"&gt;&lt;%= theme.licensee_name%&gt;&lt;/a&gt; 转载请保留原文链接及作者。</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>在<code>layout\\_partial\\article.ejs</code> 文件下添加如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">'post/declare'</span>) %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>创建新文件<code>themes/yilia/source-src/css/declare.scss</code>，添加如下CSS代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.declare &#123;</span><br><span class=\"line\">    background-color: #eaeaea;</span><br><span class=\"line\">    margin-top: <span class=\"number\">2</span>em;</span><br><span class=\"line\">    border-left: 3px solid #ff1700;</span><br><span class=\"line\">    padding: <span class=\"number\">.5</span>em <span class=\"number\">1</span>em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时在<code>themes/yilia/source-src/css/main.scss</code>添加如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"./declare\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>在<code>themes/yilia/</code>目录下输入：</p>\n<p><code>npm run dev</code>生成新代码，<br>或<code>npm run dist</code>生成新代码，并压缩。</p>\n<blockquote>\n<p>提示：<code>yilia</code>文件夹需要单独copy一份执行<code>npm install webpack-cli -D</code>局部安装<code>webpack</code>，然后再执行<code>npm run dev</code>或<code>npm run dist</code>，执行命令之前可先清空<code>themes/yilia/source</code>里面的文件（不包括文件夹），最后再复制到hexo项目中覆盖，否则可能会因为权限问题导致ERROR。</p>\n</blockquote>\n<h3 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h3><p>修改<code>themes/yilia/_config.yml</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#版权声明：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明</span><br><span class=\"line\">declare_type: <span class=\"number\">2</span> </span><br><span class=\"line\">licensee_url: https:<span class=\"comment\">//creativecommons.org/licenses/by-nc-nd/4.0/</span></span><br><span class=\"line\">licensee_name: <span class=\"string\">'署名-非商业性使用-禁止演绎 4.0 国际'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>"},{"title":"让NexT主题的Muse模板侧边栏居左","declare":true,"comments":1,"date":"2018-04-26T02:56:21.000Z","_content":"\n> NexT主题（v5.14）只有`Pisces`和`Gemini`主题支持侧边栏居左，因此本文将使用Muse模板并使其侧边栏在左侧，修改内容如下：\n\n<!-- more -->\n\n### 1. 修改motion.js\n\n- 在主题目录下`source/js/src/motion.js`中查找`paddingRight`，将其修改为`paddingLeft`（一共两处）。\n- 修改菜单箭头动画方向：\n\n```javascript\nvar sidebarToggleLine1st = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-first',\n    status: {\n      arrow: {width: '60%', rotateZ: '45deg', top: '2px', left: '5px'},\n      close: {width: '100%', rotateZ: '-45deg', top: '5px', left: '0px'}\n    }\n  });\n  var sidebarToggleLine2nd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-middle',\n    status: {\n      arrow: {width: '90%'},\n      close: {opacity: 0}\n    }\n  });\n  var sidebarToggleLine3rd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-last',\n    status: {\n      arrow: {width: '60%', rotateZ: '-45deg', top: '-2px', left: '5px'},\n      close: {width: '100%', rotateZ: '45deg', top: '-5px', left: '0px'}\n    }\n  });\n```\n\n### 2. 修改custom.styl\n\n在主题目录下`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n/* 修改菜单为左侧 */\n.sidebar-toggle{\n    left:30px;\n}\n/* 修改siedebar为左侧 */\n.sidebar{\n    left:0;\n}\n/* 修改上滑按钮为左侧 */\n.back-to-top{\n    left:30px;\n}\n```\n\n### 3. 去掉社交链接圆点和下划线\n\n在主题目录下`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n.links-of-author a,\n.links-of-author .exturl{\n  border-bottom-color: rgba(255, 255, 255, 0);\n  &:before {\n        display: none;\n      }\n}\n```\n\n### 4. 为侧边栏链接添加鼠标悬浮放大效果\n\n在主题目录下`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n.sidebar {\n    left:0;\n    background:url(/images/sidebar.jpg);\n    background-size: cover;\n    background-position:left;\n    background-repeat:no-repeat;\n    a, .exturl {\n      padding: 0px 10px 0px 10px;\n      font-size: 20px;\n      -webkit-transition-duration: .3s;\n      transition-duration: .3s;\n      -webkit-transition-property: transform;\n      -webkit-transition-property: -webkit-transform;\n      transition-property: -webkit-transform;\n      transition-property: transform;\n      transition-property: transform, -webkit-transform;\n      -webkit-transform: translateZ(0);\n      transform: translateZ(0);\n      -webkit-backface-visibility: hidden;\n      backface-visibility: hidden;\n      &:hover, &:focus, &:active { \n        color:rgb(252, 100, 35);\n        -webkit-transform: scale(1.1);\n        transform: scale(1.1);\n      }\n    }\n}\n```\n\n假如在 `.sidebar` 修改链接字体和颜色并含有`RSS`元素，同时会导致`RSS`样式有所不协调，需要添加如下代码：\n\n```css\n.feed-link {\n  a,.exturl {\n    font-size: 14px;\n  }\n}\n.feed-link {\n  a:hover, a:focus, a:active {\n    color:white;\n      background: rgb(252, 100, 35);\n\n      i { color: white; }\n  }\n}\n```\n\n文章目录也会发现有所变化，添加如下代码：\n\n```css\n.post-toc ol {\n  a {\n    font-size: 14px;\n    &:hover {\n        color: rgb(252, 100, 35);\n    }\n  }\n}\n```\n\n\n\n> 参考链接：\n>\n> [ 1 ] : [http://shenzekun.cn/hexo的next主题个性化配置教程.html](http://shenzekun.cn/hexo的next主题个性化配置教程.html)\n> [ 2 ] : [https://github.com/theme-next/hexo-theme-next](https://github.com/theme-next/hexo-theme-next)\n> [ 3 ] : [https://theme-next.org](https://theme-next.org)\n\n","source":"_posts/Hexo-nexT-custom-sidebar-left.md","raw":"---\ntitle: 让NexT主题的Muse模板侧边栏居左\ndeclare: true\ncomments: true\ndate: 2018-04-26 10:56:21\ntags:\n- NexT\n- Hexo\n---\n\n> NexT主题（v5.14）只有`Pisces`和`Gemini`主题支持侧边栏居左，因此本文将使用Muse模板并使其侧边栏在左侧，修改内容如下：\n\n<!-- more -->\n\n### 1. 修改motion.js\n\n- 在主题目录下`source/js/src/motion.js`中查找`paddingRight`，将其修改为`paddingLeft`（一共两处）。\n- 修改菜单箭头动画方向：\n\n```javascript\nvar sidebarToggleLine1st = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-first',\n    status: {\n      arrow: {width: '60%', rotateZ: '45deg', top: '2px', left: '5px'},\n      close: {width: '100%', rotateZ: '-45deg', top: '5px', left: '0px'}\n    }\n  });\n  var sidebarToggleLine2nd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-middle',\n    status: {\n      arrow: {width: '90%'},\n      close: {opacity: 0}\n    }\n  });\n  var sidebarToggleLine3rd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-last',\n    status: {\n      arrow: {width: '60%', rotateZ: '-45deg', top: '-2px', left: '5px'},\n      close: {width: '100%', rotateZ: '45deg', top: '-5px', left: '0px'}\n    }\n  });\n```\n\n### 2. 修改custom.styl\n\n在主题目录下`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n/* 修改菜单为左侧 */\n.sidebar-toggle{\n    left:30px;\n}\n/* 修改siedebar为左侧 */\n.sidebar{\n    left:0;\n}\n/* 修改上滑按钮为左侧 */\n.back-to-top{\n    left:30px;\n}\n```\n\n### 3. 去掉社交链接圆点和下划线\n\n在主题目录下`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n.links-of-author a,\n.links-of-author .exturl{\n  border-bottom-color: rgba(255, 255, 255, 0);\n  &:before {\n        display: none;\n      }\n}\n```\n\n### 4. 为侧边栏链接添加鼠标悬浮放大效果\n\n在主题目录下`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n.sidebar {\n    left:0;\n    background:url(/images/sidebar.jpg);\n    background-size: cover;\n    background-position:left;\n    background-repeat:no-repeat;\n    a, .exturl {\n      padding: 0px 10px 0px 10px;\n      font-size: 20px;\n      -webkit-transition-duration: .3s;\n      transition-duration: .3s;\n      -webkit-transition-property: transform;\n      -webkit-transition-property: -webkit-transform;\n      transition-property: -webkit-transform;\n      transition-property: transform;\n      transition-property: transform, -webkit-transform;\n      -webkit-transform: translateZ(0);\n      transform: translateZ(0);\n      -webkit-backface-visibility: hidden;\n      backface-visibility: hidden;\n      &:hover, &:focus, &:active { \n        color:rgb(252, 100, 35);\n        -webkit-transform: scale(1.1);\n        transform: scale(1.1);\n      }\n    }\n}\n```\n\n假如在 `.sidebar` 修改链接字体和颜色并含有`RSS`元素，同时会导致`RSS`样式有所不协调，需要添加如下代码：\n\n```css\n.feed-link {\n  a,.exturl {\n    font-size: 14px;\n  }\n}\n.feed-link {\n  a:hover, a:focus, a:active {\n    color:white;\n      background: rgb(252, 100, 35);\n\n      i { color: white; }\n  }\n}\n```\n\n文章目录也会发现有所变化，添加如下代码：\n\n```css\n.post-toc ol {\n  a {\n    font-size: 14px;\n    &:hover {\n        color: rgb(252, 100, 35);\n    }\n  }\n}\n```\n\n\n\n> 参考链接：\n>\n> [ 1 ] : [http://shenzekun.cn/hexo的next主题个性化配置教程.html](http://shenzekun.cn/hexo的next主题个性化配置教程.html)\n> [ 2 ] : [https://github.com/theme-next/hexo-theme-next](https://github.com/theme-next/hexo-theme-next)\n> [ 3 ] : [https://theme-next.org](https://theme-next.org)\n\n","slug":"Hexo-nexT-custom-sidebar-left","published":1,"updated":"2018-05-20T04:43:11.005Z","_id":"cjhebaux00005ofxf20s2jt7q","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>NexT主题（v5.14）只有<code>Pisces</code>和<code>Gemini</code>主题支持侧边栏居左，因此本文将使用Muse模板并使其侧边栏在左侧，修改内容如下：</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"1-修改motion-js\"><a href=\"#1-修改motion-js\" class=\"headerlink\" title=\"1. 修改motion.js\"></a>1. 修改motion.js</h3><ul>\n<li>在主题目录下<code>source/js/src/motion.js</code>中查找<code>paddingRight</code>，将其修改为<code>paddingLeft</code>（一共两处）。</li>\n<li>修改菜单箭头动画方向：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sidebarToggleLine1st = <span class=\"keyword\">new</span> SidebarToggleLine(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'.sidebar-toggle-line-first'</span>,</span><br><span class=\"line\">    status: &#123;</span><br><span class=\"line\">      arrow: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'60%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'2px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'5px'</span>&#125;,</span><br><span class=\"line\">      close: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'100%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'-45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'5px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'0px'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sidebarToggleLine2nd = <span class=\"keyword\">new</span> SidebarToggleLine(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'.sidebar-toggle-line-middle'</span>,</span><br><span class=\"line\">    status: &#123;</span><br><span class=\"line\">      arrow: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'90%'</span>&#125;,</span><br><span class=\"line\">      close: &#123;<span class=\"attr\">opacity</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sidebarToggleLine3rd = <span class=\"keyword\">new</span> SidebarToggleLine(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'.sidebar-toggle-line-last'</span>,</span><br><span class=\"line\">    status: &#123;</span><br><span class=\"line\">      arrow: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'60%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'-45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'-2px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'5px'</span>&#125;,</span><br><span class=\"line\">      close: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'100%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'-5px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'0px'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改custom-styl\"><a href=\"#2-修改custom-styl\" class=\"headerlink\" title=\"2. 修改custom.styl\"></a>2. 修改custom.styl</h3><p>在主题目录下<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 修改菜单为左侧 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar-toggle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 修改siedebar为左侧 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 修改上滑按钮为左侧 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.back-to-top</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-去掉社交链接圆点和下划线\"><a href=\"#3-去掉社交链接圆点和下划线\" class=\"headerlink\" title=\"3. 去掉社交链接圆点和下划线\"></a>3. 去掉社交链接圆点和下划线</h3><p>在主题目录下<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.links-of-author</span> <span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.links-of-author</span> <span class=\"selector-class\">.exturl</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom-color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0);</span><br><span class=\"line\">  &amp;:before &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-为侧边栏链接添加鼠标悬浮放大效果\"><a href=\"#4-为侧边栏链接添加鼠标悬浮放大效果\" class=\"headerlink\" title=\"4. 为侧边栏链接添加鼠标悬浮放大效果\"></a>4. 为侧边栏链接添加鼠标悬浮放大效果</h3><p>在主题目录下<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(/images/sidebar.jpg);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>:no-repeat;</span><br><span class=\"line\">    a, .exturl &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">padding</span>: 0<span class=\"selector-tag\">px</span> 10<span class=\"selector-tag\">px</span> 0<span class=\"selector-tag\">px</span> 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">font-size</span>: 20<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transition-duration</span>: <span class=\"selector-class\">.3s</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-duration</span>: <span class=\"selector-class\">.3s</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transition-property</span>: <span class=\"selector-tag\">transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transition-property</span>: <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">transform</span>, <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">translateZ</span>(0);</span><br><span class=\"line\">      <span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translateZ</span>(0);</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-backface-visibility</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">backface-visibility</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">      &amp;<span class=\"selector-pseudo\">:hover</span>, &amp;<span class=\"selector-pseudo\">:focus</span>, &amp;<span class=\"selector-pseudo\">:active</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">color</span>:<span class=\"built_in\">rgb</span>(252, 100, 35);</span><br><span class=\"line\">        <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(1.1);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假如在 <code>.sidebar</code> 修改链接字体和颜色并含有<code>RSS</code>元素，同时会导致<code>RSS</code>样式有所不协调，需要添加如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.feed-link</span> &#123;</span><br><span class=\"line\">  a,.exturl &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.feed-link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">a</span>:hover, a:focus, a:active &#123;</span><br><span class=\"line\">    color:white;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(252, 100, 35);</span><br><span class=\"line\"></span><br><span class=\"line\">      i &#123; color: white; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文章目录也会发现有所变化，添加如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-toc</span> <span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">  a &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(252, 100, 35);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考链接：</p>\n<p>[ 1 ] : <a href=\"http://shenzekun.cn/hexo的next主题个性化配置教程.html\" target=\"_blank\" rel=\"noopener\">http://shenzekun.cn/hexo的next主题个性化配置教程.html</a><br>[ 2 ] : <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next</a><br>[ 3 ] : <a href=\"https://theme-next.org\" target=\"_blank\" rel=\"noopener\">https://theme-next.org</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>NexT主题（v5.14）只有<code>Pisces</code>和<code>Gemini</code>主题支持侧边栏居左，因此本文将使用Muse模板并使其侧边栏在左侧，修改内容如下：</p>\n</blockquote>","more":"<h3 id=\"1-修改motion-js\"><a href=\"#1-修改motion-js\" class=\"headerlink\" title=\"1. 修改motion.js\"></a>1. 修改motion.js</h3><ul>\n<li>在主题目录下<code>source/js/src/motion.js</code>中查找<code>paddingRight</code>，将其修改为<code>paddingLeft</code>（一共两处）。</li>\n<li>修改菜单箭头动画方向：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sidebarToggleLine1st = <span class=\"keyword\">new</span> SidebarToggleLine(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'.sidebar-toggle-line-first'</span>,</span><br><span class=\"line\">    status: &#123;</span><br><span class=\"line\">      arrow: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'60%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'2px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'5px'</span>&#125;,</span><br><span class=\"line\">      close: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'100%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'-45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'5px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'0px'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sidebarToggleLine2nd = <span class=\"keyword\">new</span> SidebarToggleLine(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'.sidebar-toggle-line-middle'</span>,</span><br><span class=\"line\">    status: &#123;</span><br><span class=\"line\">      arrow: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'90%'</span>&#125;,</span><br><span class=\"line\">      close: &#123;<span class=\"attr\">opacity</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sidebarToggleLine3rd = <span class=\"keyword\">new</span> SidebarToggleLine(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'.sidebar-toggle-line-last'</span>,</span><br><span class=\"line\">    status: &#123;</span><br><span class=\"line\">      arrow: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'60%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'-45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'-2px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'5px'</span>&#125;,</span><br><span class=\"line\">      close: &#123;<span class=\"attr\">width</span>: <span class=\"string\">'100%'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'45deg'</span>, <span class=\"attr\">top</span>: <span class=\"string\">'-5px'</span>, <span class=\"attr\">left</span>: <span class=\"string\">'0px'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改custom-styl\"><a href=\"#2-修改custom-styl\" class=\"headerlink\" title=\"2. 修改custom.styl\"></a>2. 修改custom.styl</h3><p>在主题目录下<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 修改菜单为左侧 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar-toggle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 修改siedebar为左侧 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 修改上滑按钮为左侧 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.back-to-top</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-去掉社交链接圆点和下划线\"><a href=\"#3-去掉社交链接圆点和下划线\" class=\"headerlink\" title=\"3. 去掉社交链接圆点和下划线\"></a>3. 去掉社交链接圆点和下划线</h3><p>在主题目录下<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.links-of-author</span> <span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.links-of-author</span> <span class=\"selector-class\">.exturl</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom-color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0);</span><br><span class=\"line\">  &amp;:before &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-为侧边栏链接添加鼠标悬浮放大效果\"><a href=\"#4-为侧边栏链接添加鼠标悬浮放大效果\" class=\"headerlink\" title=\"4. 为侧边栏链接添加鼠标悬浮放大效果\"></a>4. 为侧边栏链接添加鼠标悬浮放大效果</h3><p>在主题目录下<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(/images/sidebar.jpg);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>:left;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>:no-repeat;</span><br><span class=\"line\">    a, .exturl &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">padding</span>: 0<span class=\"selector-tag\">px</span> 10<span class=\"selector-tag\">px</span> 0<span class=\"selector-tag\">px</span> 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">font-size</span>: 20<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transition-duration</span>: <span class=\"selector-class\">.3s</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-duration</span>: <span class=\"selector-class\">.3s</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transition-property</span>: <span class=\"selector-tag\">transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transition-property</span>: <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">transform</span>, <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">translateZ</span>(0);</span><br><span class=\"line\">      <span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">translateZ</span>(0);</span><br><span class=\"line\">      <span class=\"selector-tag\">-webkit-backface-visibility</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">backface-visibility</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">      &amp;<span class=\"selector-pseudo\">:hover</span>, &amp;<span class=\"selector-pseudo\">:focus</span>, &amp;<span class=\"selector-pseudo\">:active</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">color</span>:<span class=\"built_in\">rgb</span>(252, 100, 35);</span><br><span class=\"line\">        <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(1.1);</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假如在 <code>.sidebar</code> 修改链接字体和颜色并含有<code>RSS</code>元素，同时会导致<code>RSS</code>样式有所不协调，需要添加如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.feed-link</span> &#123;</span><br><span class=\"line\">  a,.exturl &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.feed-link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">a</span>:hover, a:focus, a:active &#123;</span><br><span class=\"line\">    color:white;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(252, 100, 35);</span><br><span class=\"line\"></span><br><span class=\"line\">      i &#123; color: white; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文章目录也会发现有所变化，添加如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-toc</span> <span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">  a &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(252, 100, 35);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考链接：</p>\n<p>[ 1 ] : <a href=\"http://shenzekun.cn/hexo的next主题个性化配置教程.html\" target=\"_blank\" rel=\"noopener\">http://shenzekun.cn/hexo的next主题个性化配置教程.html</a><br>[ 2 ] : <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next</a><br>[ 3 ] : <a href=\"https://theme-next.org\" target=\"_blank\" rel=\"noopener\">https://theme-next.org</a></p>\n</blockquote>"},{"title":"为NexT主题header添加彩带动画","declare":true,"comments":1,"date":"2018-04-27T08:26:49.000Z","_content":"\n![top](/assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png)\n\n<!-- more -->\n\n### Step 1\n\n新建`JS`文件，保存至`source\\js\\src\\`目录下，内容如下：\n\n```javascript\n//监听触摸移动事件\n// document.addEventListener('touchmove', function (e) {\n//     e.preventDefault()  //（禁止触摸移动，手机端会出现无法滑动的现象）\n// })\n\n//初始化变量\nvar c = document.getElementsByTagName('canvas')[0],\n  x = c.getContext('2d'),\n  pr = window.devicePixelRatio || 1, //设置像素比\n  w = window.innerWidth,\n  h = window.innerHeight,\n  f = 90,\n  q,\n  m = Math,\n  r = 0,\n  u = m.PI * 2, //Math.PI*2\n  v = m.cos, //余弦值\n  z = m.random //随机数值\nc.width = w * pr //设置 Canvas 宽度为可视窗口的宽度*像素比\nc.height = h * pr //设置 Canvas 高度为可视窗口的高度*像素比\nx.scale(pr, pr) //缩放 Canvas pr = 1 = 100%\nx.globalAlpha = 0.2 //设置 Canvas 透明度\n\n//循环函数\nfunction i() {\n  x.clearRect(0, 0, w, h) //清空矩形\n  //数组变量对象\n  q = [{ x: 0, y: h * .7 + f }, { x: 0, y: h * .7 - f }]\n  //循环，0 < 可视窗口宽度+90\n  while (q[1].x < w + f) {\n    d(q[0], q[1]) //绘制函数传参\n  }\n}\n\n//绘制函数传参，i 和 j 均有一个 x 与 y 数值对象\nfunction d(i, j) {\n  x.beginPath() //开始路径\n  x.moveTo(i.x, i.y) //移动路径\n  x.lineTo(j.x, j.y) //创建线条\n  var k = j.x + (z() * 2 - 0.25) * f, //重新定义数组对象 q[1] 的变量对象，z() 随机数值\n    n = y(j.y) //将 y() 传参函数赋值给 n\n  x.lineTo(k, n) //创建线条\n  x.closePath() //关闭路径\n  r -= u / -50\n  //填充颜色，toString(16)转换为16进制颜色值\n  //关于（<< 与 |）位运算操作参考：http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp\n  x.fillStyle = '#' + (v(r) * 127 + 128 << 16 | v(r + u / 3) * 127 + 128 << 8 | v(r + u / 3 * 2) * 127 + 128).toString(16);\n  x.fill()\n  //重新定义数组对象，增加无限可变性\n  q[0] = q[1]\n  q[1] = { x: k, y: n }\n}\n\n//传参函数 return 返回数值\nfunction y(p) {\n  var t = p + (z() * 2 - 1.1) * f //z() 随机数值\n  return (t > h || t < 0) ? y(p) : t //判断后返回不同数值后增加了更多的可变性\n}\n\n//点击与触摸时执行 i() 函数\nvar headerDiv = document.getElementById(\"canvas-header\");\nheaderDiv.onclick = i;\ni()\n\n```\n\n### Step 2\n\n在`layout\\_layout.swig`文件中结尾`</body>`前添加引入`JS`代码：\n\n```html\n  <script id=\"canvas-lzd\" type=\"text/javascript\" src=\"/js/src/canvas-lzd.js\"></script>\n```\n\n并搜索`<div class=\"header-inner\">`标签代码，在`<header>`之后添加` <div id=\"canvas-header\" class=\"header\" position:absolute>`标签，使`header`部分拥有`onclick`事件， 在`</div>`和`</header>`之间添加`<canvas>`标签代码：\n\n```html\n<header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n  <div id=\"canvas-header\" class=\"header\" style=\"-webkit-tap-highlight-color: transparent;\" position:absolute>\n  <div class=\"header-inner\">{% include '_partials/header/index.swig' %}\n  </div>\n  \n  <canvas class=\"canvas-lzd\" position:absolute>\n  </canvas>\n  \n  </div>\n</header>\n```\n\n> ` <header> ` 无法添加onclick事件，需要嵌套一层`div`。\n>\n> `style=\"-webkit-tap-highlight-color: transparent;\"`：为了取消移动端点击后有阴影。\n\n### Step 3\n\n在`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n/* canvas样式 */\n.canvas-lzd {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 0;\n  width: 100%;\n  height: 334px;\n  pointer-events: none;\n}\n```\n\n重新部署后就能看到彩带header了\n\n>参考链接：\n>\n>[ 1 ] : [https://zproo.github.io/2017/为Next主题添加canvas-ribbon/](https://zproo.github.io/2017/为Next主题添加canvas-ribbon/)\n\n","source":"_posts/Hexo-next-canvas.md","raw":"---\ntitle: 为NexT主题header添加彩带动画\ndeclare: true\ncomments: true\ndate: 2018-04-27 16:26:49\ntags:\n- Hexo\n- NexT\n---\n\n![top](/assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png)\n\n<!-- more -->\n\n### Step 1\n\n新建`JS`文件，保存至`source\\js\\src\\`目录下，内容如下：\n\n```javascript\n//监听触摸移动事件\n// document.addEventListener('touchmove', function (e) {\n//     e.preventDefault()  //（禁止触摸移动，手机端会出现无法滑动的现象）\n// })\n\n//初始化变量\nvar c = document.getElementsByTagName('canvas')[0],\n  x = c.getContext('2d'),\n  pr = window.devicePixelRatio || 1, //设置像素比\n  w = window.innerWidth,\n  h = window.innerHeight,\n  f = 90,\n  q,\n  m = Math,\n  r = 0,\n  u = m.PI * 2, //Math.PI*2\n  v = m.cos, //余弦值\n  z = m.random //随机数值\nc.width = w * pr //设置 Canvas 宽度为可视窗口的宽度*像素比\nc.height = h * pr //设置 Canvas 高度为可视窗口的高度*像素比\nx.scale(pr, pr) //缩放 Canvas pr = 1 = 100%\nx.globalAlpha = 0.2 //设置 Canvas 透明度\n\n//循环函数\nfunction i() {\n  x.clearRect(0, 0, w, h) //清空矩形\n  //数组变量对象\n  q = [{ x: 0, y: h * .7 + f }, { x: 0, y: h * .7 - f }]\n  //循环，0 < 可视窗口宽度+90\n  while (q[1].x < w + f) {\n    d(q[0], q[1]) //绘制函数传参\n  }\n}\n\n//绘制函数传参，i 和 j 均有一个 x 与 y 数值对象\nfunction d(i, j) {\n  x.beginPath() //开始路径\n  x.moveTo(i.x, i.y) //移动路径\n  x.lineTo(j.x, j.y) //创建线条\n  var k = j.x + (z() * 2 - 0.25) * f, //重新定义数组对象 q[1] 的变量对象，z() 随机数值\n    n = y(j.y) //将 y() 传参函数赋值给 n\n  x.lineTo(k, n) //创建线条\n  x.closePath() //关闭路径\n  r -= u / -50\n  //填充颜色，toString(16)转换为16进制颜色值\n  //关于（<< 与 |）位运算操作参考：http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp\n  x.fillStyle = '#' + (v(r) * 127 + 128 << 16 | v(r + u / 3) * 127 + 128 << 8 | v(r + u / 3 * 2) * 127 + 128).toString(16);\n  x.fill()\n  //重新定义数组对象，增加无限可变性\n  q[0] = q[1]\n  q[1] = { x: k, y: n }\n}\n\n//传参函数 return 返回数值\nfunction y(p) {\n  var t = p + (z() * 2 - 1.1) * f //z() 随机数值\n  return (t > h || t < 0) ? y(p) : t //判断后返回不同数值后增加了更多的可变性\n}\n\n//点击与触摸时执行 i() 函数\nvar headerDiv = document.getElementById(\"canvas-header\");\nheaderDiv.onclick = i;\ni()\n\n```\n\n### Step 2\n\n在`layout\\_layout.swig`文件中结尾`</body>`前添加引入`JS`代码：\n\n```html\n  <script id=\"canvas-lzd\" type=\"text/javascript\" src=\"/js/src/canvas-lzd.js\"></script>\n```\n\n并搜索`<div class=\"header-inner\">`标签代码，在`<header>`之后添加` <div id=\"canvas-header\" class=\"header\" position:absolute>`标签，使`header`部分拥有`onclick`事件， 在`</div>`和`</header>`之间添加`<canvas>`标签代码：\n\n```html\n<header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n  <div id=\"canvas-header\" class=\"header\" style=\"-webkit-tap-highlight-color: transparent;\" position:absolute>\n  <div class=\"header-inner\">{% include '_partials/header/index.swig' %}\n  </div>\n  \n  <canvas class=\"canvas-lzd\" position:absolute>\n  </canvas>\n  \n  </div>\n</header>\n```\n\n> ` <header> ` 无法添加onclick事件，需要嵌套一层`div`。\n>\n> `style=\"-webkit-tap-highlight-color: transparent;\"`：为了取消移动端点击后有阴影。\n\n### Step 3\n\n在`source/css\\_custom/custom.styl`添加以下内容：\n\n```css\n/* canvas样式 */\n.canvas-lzd {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 0;\n  width: 100%;\n  height: 334px;\n  pointer-events: none;\n}\n```\n\n重新部署后就能看到彩带header了\n\n>参考链接：\n>\n>[ 1 ] : [https://zproo.github.io/2017/为Next主题添加canvas-ribbon/](https://zproo.github.io/2017/为Next主题添加canvas-ribbon/)\n\n","slug":"Hexo-next-canvas","published":1,"updated":"2018-05-20T04:42:09.748Z","_id":"cjhebaux30006ofxfpzilrmt5","layout":"post","photos":[],"link":"","content":"<p><img src=\"/assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png\" alt=\"top\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p>新建<code>JS</code>文件，保存至<code>source\\js\\src\\</code>目录下，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//监听触摸移动事件</span></span><br><span class=\"line\"><span class=\"comment\">// document.addEventListener('touchmove', function (e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     e.preventDefault()  //（禁止触摸移动，手机端会出现无法滑动的现象）</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'canvas'</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">  x = c.getContext(<span class=\"string\">'2d'</span>),</span><br><span class=\"line\">  pr = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">1</span>, <span class=\"comment\">//设置像素比</span></span><br><span class=\"line\">  w = <span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">  h = <span class=\"built_in\">window</span>.innerHeight,</span><br><span class=\"line\">  f = <span class=\"number\">90</span>,</span><br><span class=\"line\">  q,</span><br><span class=\"line\">  m = <span class=\"built_in\">Math</span>,</span><br><span class=\"line\">  r = <span class=\"number\">0</span>,</span><br><span class=\"line\">  u = m.PI * <span class=\"number\">2</span>, <span class=\"comment\">//Math.PI*2</span></span><br><span class=\"line\">  v = m.cos, <span class=\"comment\">//余弦值</span></span><br><span class=\"line\">  z = m.random <span class=\"comment\">//随机数值</span></span><br><span class=\"line\">c.width = w * pr <span class=\"comment\">//设置 Canvas 宽度为可视窗口的宽度*像素比</span></span><br><span class=\"line\">c.height = h * pr <span class=\"comment\">//设置 Canvas 高度为可视窗口的高度*像素比</span></span><br><span class=\"line\">x.scale(pr, pr) <span class=\"comment\">//缩放 Canvas pr = 1 = 100%</span></span><br><span class=\"line\">x.globalAlpha = <span class=\"number\">0.2</span> <span class=\"comment\">//设置 Canvas 透明度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//循环函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  x.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h) <span class=\"comment\">//清空矩形</span></span><br><span class=\"line\">  <span class=\"comment\">//数组变量对象</span></span><br><span class=\"line\">  q = [&#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: h * <span class=\"number\">.7</span> + f &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: h * <span class=\"number\">.7</span> - f &#125;]</span><br><span class=\"line\">  <span class=\"comment\">//循环，0 &lt; 可视窗口宽度+90</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (q[<span class=\"number\">1</span>].x &lt; w + f) &#123;</span><br><span class=\"line\">    d(q[<span class=\"number\">0</span>], q[<span class=\"number\">1</span>]) <span class=\"comment\">//绘制函数传参</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制函数传参，i 和 j 均有一个 x 与 y 数值对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\">i, j</span>) </span>&#123;</span><br><span class=\"line\">  x.beginPath() <span class=\"comment\">//开始路径</span></span><br><span class=\"line\">  x.moveTo(i.x, i.y) <span class=\"comment\">//移动路径</span></span><br><span class=\"line\">  x.lineTo(j.x, j.y) <span class=\"comment\">//创建线条</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> k = j.x + (z() * <span class=\"number\">2</span> - <span class=\"number\">0.25</span>) * f, <span class=\"comment\">//重新定义数组对象 q[1] 的变量对象，z() 随机数值</span></span><br><span class=\"line\">    n = y(j.y) <span class=\"comment\">//将 y() 传参函数赋值给 n</span></span><br><span class=\"line\">  x.lineTo(k, n) <span class=\"comment\">//创建线条</span></span><br><span class=\"line\">  x.closePath() <span class=\"comment\">//关闭路径</span></span><br><span class=\"line\">  r -= u / <span class=\"number\">-50</span></span><br><span class=\"line\">  <span class=\"comment\">//填充颜色，toString(16)转换为16进制颜色值</span></span><br><span class=\"line\">  <span class=\"comment\">//关于（&lt;&lt; 与 |）位运算操作参考：http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp</span></span><br><span class=\"line\">  x.fillStyle = <span class=\"string\">'#'</span> + (v(r) * <span class=\"number\">127</span> + <span class=\"number\">128</span> &lt;&lt; <span class=\"number\">16</span> | v(r + u / <span class=\"number\">3</span>) * <span class=\"number\">127</span> + <span class=\"number\">128</span> &lt;&lt; <span class=\"number\">8</span> | v(r + u / <span class=\"number\">3</span> * <span class=\"number\">2</span>) * <span class=\"number\">127</span> + <span class=\"number\">128</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  x.fill()</span><br><span class=\"line\">  <span class=\"comment\">//重新定义数组对象，增加无限可变性</span></span><br><span class=\"line\">  q[<span class=\"number\">0</span>] = q[<span class=\"number\">1</span>]</span><br><span class=\"line\">  q[<span class=\"number\">1</span>] = &#123; <span class=\"attr\">x</span>: k, <span class=\"attr\">y</span>: n &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//传参函数 return 返回数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">y</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = p + (z() * <span class=\"number\">2</span> - <span class=\"number\">1.1</span>) * f <span class=\"comment\">//z() 随机数值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (t &gt; h || t &lt; <span class=\"number\">0</span>) ? y(p) : t <span class=\"comment\">//判断后返回不同数值后增加了更多的可变性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点击与触摸时执行 i() 函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> headerDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas-header\"</span>);</span><br><span class=\"line\">headerDiv.onclick = i;</span><br><span class=\"line\">i()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>在<code>layout\\_layout.swig</code>文件中结尾<code>&lt;/body&gt;</code>前添加引入<code>JS</code>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas-lzd\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/canvas-lzd.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>并搜索<code>&lt;div class=&quot;header-inner&quot;&gt;</code>标签代码，在<code>&lt;header&gt;</code>之后添加<code>&lt;div id=&quot;canvas-header&quot; class=&quot;header&quot; position:absolute&gt;</code>标签，使<code>header</code>部分拥有<code>onclick</code>事件， 在<code>&lt;/div&gt;</code>和<code>&lt;/header&gt;</code>之间添加<code>&lt;canvas&gt;</code>标签代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">itemscope</span> <span class=\"attr\">itemtype</span>=<span class=\"string\">\"http://schema.org/WPHeader\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas-header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"-webkit-tap-highlight-color: transparent;\"</span> <span class=\"attr\">position:absolute</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-inner\"</span>&gt;</span>&#123;% include '_partials/header/index.swig' %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">\"canvas-lzd\"</span> <span class=\"attr\">position:absolute</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>&lt;header&gt;</code> 无法添加onclick事件，需要嵌套一层<code>div</code>。</p>\n<p><code>style=&quot;-webkit-tap-highlight-color: transparent;&quot;</code>：为了取消移动端点击后有阴影。</p>\n</blockquote>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>在<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* canvas样式 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.canvas-lzd</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">334px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">pointer-events</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新部署后就能看到彩带header了</p>\n<blockquote>\n<p>参考链接：</p>\n<p>[ 1 ] : <a href=\"https://zproo.github.io/2017/为Next主题添加canvas-ribbon/\" target=\"_blank\" rel=\"noopener\">https://zproo.github.io/2017/为Next主题添加canvas-ribbon/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImg/Hexo-next-canvas/hexo-next-canvas.png\" alt=\"top\"></p>","more":"<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p>新建<code>JS</code>文件，保存至<code>source\\js\\src\\</code>目录下，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//监听触摸移动事件</span></span><br><span class=\"line\"><span class=\"comment\">// document.addEventListener('touchmove', function (e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     e.preventDefault()  //（禁止触摸移动，手机端会出现无法滑动的现象）</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'canvas'</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">  x = c.getContext(<span class=\"string\">'2d'</span>),</span><br><span class=\"line\">  pr = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">1</span>, <span class=\"comment\">//设置像素比</span></span><br><span class=\"line\">  w = <span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">  h = <span class=\"built_in\">window</span>.innerHeight,</span><br><span class=\"line\">  f = <span class=\"number\">90</span>,</span><br><span class=\"line\">  q,</span><br><span class=\"line\">  m = <span class=\"built_in\">Math</span>,</span><br><span class=\"line\">  r = <span class=\"number\">0</span>,</span><br><span class=\"line\">  u = m.PI * <span class=\"number\">2</span>, <span class=\"comment\">//Math.PI*2</span></span><br><span class=\"line\">  v = m.cos, <span class=\"comment\">//余弦值</span></span><br><span class=\"line\">  z = m.random <span class=\"comment\">//随机数值</span></span><br><span class=\"line\">c.width = w * pr <span class=\"comment\">//设置 Canvas 宽度为可视窗口的宽度*像素比</span></span><br><span class=\"line\">c.height = h * pr <span class=\"comment\">//设置 Canvas 高度为可视窗口的高度*像素比</span></span><br><span class=\"line\">x.scale(pr, pr) <span class=\"comment\">//缩放 Canvas pr = 1 = 100%</span></span><br><span class=\"line\">x.globalAlpha = <span class=\"number\">0.2</span> <span class=\"comment\">//设置 Canvas 透明度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//循环函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">i</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  x.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h) <span class=\"comment\">//清空矩形</span></span><br><span class=\"line\">  <span class=\"comment\">//数组变量对象</span></span><br><span class=\"line\">  q = [&#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: h * <span class=\"number\">.7</span> + f &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: h * <span class=\"number\">.7</span> - f &#125;]</span><br><span class=\"line\">  <span class=\"comment\">//循环，0 &lt; 可视窗口宽度+90</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (q[<span class=\"number\">1</span>].x &lt; w + f) &#123;</span><br><span class=\"line\">    d(q[<span class=\"number\">0</span>], q[<span class=\"number\">1</span>]) <span class=\"comment\">//绘制函数传参</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制函数传参，i 和 j 均有一个 x 与 y 数值对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\">i, j</span>) </span>&#123;</span><br><span class=\"line\">  x.beginPath() <span class=\"comment\">//开始路径</span></span><br><span class=\"line\">  x.moveTo(i.x, i.y) <span class=\"comment\">//移动路径</span></span><br><span class=\"line\">  x.lineTo(j.x, j.y) <span class=\"comment\">//创建线条</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> k = j.x + (z() * <span class=\"number\">2</span> - <span class=\"number\">0.25</span>) * f, <span class=\"comment\">//重新定义数组对象 q[1] 的变量对象，z() 随机数值</span></span><br><span class=\"line\">    n = y(j.y) <span class=\"comment\">//将 y() 传参函数赋值给 n</span></span><br><span class=\"line\">  x.lineTo(k, n) <span class=\"comment\">//创建线条</span></span><br><span class=\"line\">  x.closePath() <span class=\"comment\">//关闭路径</span></span><br><span class=\"line\">  r -= u / <span class=\"number\">-50</span></span><br><span class=\"line\">  <span class=\"comment\">//填充颜色，toString(16)转换为16进制颜色值</span></span><br><span class=\"line\">  <span class=\"comment\">//关于（&lt;&lt; 与 |）位运算操作参考：http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp</span></span><br><span class=\"line\">  x.fillStyle = <span class=\"string\">'#'</span> + (v(r) * <span class=\"number\">127</span> + <span class=\"number\">128</span> &lt;&lt; <span class=\"number\">16</span> | v(r + u / <span class=\"number\">3</span>) * <span class=\"number\">127</span> + <span class=\"number\">128</span> &lt;&lt; <span class=\"number\">8</span> | v(r + u / <span class=\"number\">3</span> * <span class=\"number\">2</span>) * <span class=\"number\">127</span> + <span class=\"number\">128</span>).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  x.fill()</span><br><span class=\"line\">  <span class=\"comment\">//重新定义数组对象，增加无限可变性</span></span><br><span class=\"line\">  q[<span class=\"number\">0</span>] = q[<span class=\"number\">1</span>]</span><br><span class=\"line\">  q[<span class=\"number\">1</span>] = &#123; <span class=\"attr\">x</span>: k, <span class=\"attr\">y</span>: n &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//传参函数 return 返回数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">y</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = p + (z() * <span class=\"number\">2</span> - <span class=\"number\">1.1</span>) * f <span class=\"comment\">//z() 随机数值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (t &gt; h || t &lt; <span class=\"number\">0</span>) ? y(p) : t <span class=\"comment\">//判断后返回不同数值后增加了更多的可变性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点击与触摸时执行 i() 函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> headerDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas-header\"</span>);</span><br><span class=\"line\">headerDiv.onclick = i;</span><br><span class=\"line\">i()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>在<code>layout\\_layout.swig</code>文件中结尾<code>&lt;/body&gt;</code>前添加引入<code>JS</code>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas-lzd\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/canvas-lzd.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>并搜索<code>&lt;div class=&quot;header-inner&quot;&gt;</code>标签代码，在<code>&lt;header&gt;</code>之后添加<code>&lt;div id=&quot;canvas-header&quot; class=&quot;header&quot; position:absolute&gt;</code>标签，使<code>header</code>部分拥有<code>onclick</code>事件， 在<code>&lt;/div&gt;</code>和<code>&lt;/header&gt;</code>之间添加<code>&lt;canvas&gt;</code>标签代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">itemscope</span> <span class=\"attr\">itemtype</span>=<span class=\"string\">\"http://schema.org/WPHeader\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas-header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"-webkit-tap-highlight-color: transparent;\"</span> <span class=\"attr\">position:absolute</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-inner\"</span>&gt;</span>&#123;% include '_partials/header/index.swig' %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">\"canvas-lzd\"</span> <span class=\"attr\">position:absolute</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>&lt;header&gt;</code> 无法添加onclick事件，需要嵌套一层<code>div</code>。</p>\n<p><code>style=&quot;-webkit-tap-highlight-color: transparent;&quot;</code>：为了取消移动端点击后有阴影。</p>\n</blockquote>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>在<code>source/css\\_custom/custom.styl</code>添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* canvas样式 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.canvas-lzd</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">334px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">pointer-events</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新部署后就能看到彩带header了</p>\n<blockquote>\n<p>参考链接：</p>\n<p>[ 1 ] : <a href=\"https://zproo.github.io/2017/为Next主题添加canvas-ribbon/\" target=\"_blank\" rel=\"noopener\">https://zproo.github.io/2017/为Next主题添加canvas-ribbon/</a></p>\n</blockquote>"},{"title":"Hexo主题同步","declare":true,"comments":1,"date":"2018-04-26T08:20:51.000Z","_content":"\n### 问题\n\n由于修改`hexo`主题的默认设置需要使用`git`管理来方便备份，所以如何同步主题的设置也是一件很重要的事。\n\n### 原因\n\n[NexT主题](https://github.com/theme-next/hexo-theme-next)的使用方法\n\n```shell\n$ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n这样配置完其实`thems/next/`就是一个包含`.git/`的子项目仓库。所以在`push`主项目的时候不会上传子项目，子项目的文件夹是灰的，并且里面是空的。所以从远程仓库拉取的项目中是没有Next主题的。\n\n<!-- more -->\n\n### 解决\n\n解决方法在[Issues](https://github.com/iissnan/hexo-theme-next/issues/328)里，使用`fork + subtree`。\n\n首先要`fork` `Next`，然后拉取到本地做修改，修改好后`push`到远程仓库。然后用`git subtree`把`themes/next/`当做子项目来统一管理。\n\n### 步骤\n\n- 首先进入Hexo博客所在的目录，本例子中是`BlogBackup`。\n\n- 新建名为`themes`的分支:\n\n  ```shell\n  $ git branch themes\n  ```\n\n  切换到`themes`分支:\n\n  ```shell\n  $ git checkout themes\n  ```\n\n- 绑定`fork`的`next`仓库：\n\n  ```shell\n  $ git remote add -f next https://github.com/liuzhida33/hexo-theme-next.git\n  ```\n\n- 添加`subtree`：\n\n  ```shell\n  $ git subtree add --prefix=themes/next next master\n  ```\n\n  这样就把`fork`之后的`next`的`master`分支所有`checkout`出来的文件作为一次提交加到了`BlogBackup`项目的`themes`分支中。\n\n- 合并`themes`分支到主分支：\n\n  ```shell\n  $ git checkout master \n  $ git merge themes --squash \n  $ git commit\n  ```\n\n### 提交对主题配置文件的修改\n\n```shell\n$ git subtree push --prefix=themes/next next master\n```\n\n这样提交之后`fork`的`next`主题仓库也会保持更新。\n\n### 更新主题\n\n```shell\ngit checkout themes \ngit merge master \ngit subtree pull --prefix=themes/next next master \ngit checkout master \ngit merge themes --squash \ngit commit\n```\n\n","source":"_posts/Hexo-themes-sync.md","raw":"---\ntitle: Hexo主题同步\ndeclare: true\ncomments: true\ndate: 2018-04-26 16:20:51\ntags:\n- Hexo\n---\n\n### 问题\n\n由于修改`hexo`主题的默认设置需要使用`git`管理来方便备份，所以如何同步主题的设置也是一件很重要的事。\n\n### 原因\n\n[NexT主题](https://github.com/theme-next/hexo-theme-next)的使用方法\n\n```shell\n$ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n这样配置完其实`thems/next/`就是一个包含`.git/`的子项目仓库。所以在`push`主项目的时候不会上传子项目，子项目的文件夹是灰的，并且里面是空的。所以从远程仓库拉取的项目中是没有Next主题的。\n\n<!-- more -->\n\n### 解决\n\n解决方法在[Issues](https://github.com/iissnan/hexo-theme-next/issues/328)里，使用`fork + subtree`。\n\n首先要`fork` `Next`，然后拉取到本地做修改，修改好后`push`到远程仓库。然后用`git subtree`把`themes/next/`当做子项目来统一管理。\n\n### 步骤\n\n- 首先进入Hexo博客所在的目录，本例子中是`BlogBackup`。\n\n- 新建名为`themes`的分支:\n\n  ```shell\n  $ git branch themes\n  ```\n\n  切换到`themes`分支:\n\n  ```shell\n  $ git checkout themes\n  ```\n\n- 绑定`fork`的`next`仓库：\n\n  ```shell\n  $ git remote add -f next https://github.com/liuzhida33/hexo-theme-next.git\n  ```\n\n- 添加`subtree`：\n\n  ```shell\n  $ git subtree add --prefix=themes/next next master\n  ```\n\n  这样就把`fork`之后的`next`的`master`分支所有`checkout`出来的文件作为一次提交加到了`BlogBackup`项目的`themes`分支中。\n\n- 合并`themes`分支到主分支：\n\n  ```shell\n  $ git checkout master \n  $ git merge themes --squash \n  $ git commit\n  ```\n\n### 提交对主题配置文件的修改\n\n```shell\n$ git subtree push --prefix=themes/next next master\n```\n\n这样提交之后`fork`的`next`主题仓库也会保持更新。\n\n### 更新主题\n\n```shell\ngit checkout themes \ngit merge master \ngit subtree pull --prefix=themes/next next master \ngit checkout master \ngit merge themes --squash \ngit commit\n```\n\n","slug":"Hexo-themes-sync","published":1,"updated":"2018-04-26T08:47:58.074Z","layout":"post","photos":[],"link":"","_id":"cjhebaux60008ofxfcb4h6e66","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>由于修改<code>hexo</code>主题的默认设置需要使用<code>git</code>管理来方便备份，所以如何同步主题的设置也是一件很重要的事。</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT主题</a>的使用方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>这样配置完其实<code>thems/next/</code>就是一个包含<code>.git/</code>的子项目仓库。所以在<code>push</code>主项目的时候不会上传子项目，子项目的文件夹是灰的，并且里面是空的。所以从远程仓库拉取的项目中是没有Next主题的。</p>\n<a id=\"more\"></a>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>解决方法在<a href=\"https://github.com/iissnan/hexo-theme-next/issues/328\" target=\"_blank\" rel=\"noopener\">Issues</a>里，使用<code>fork + subtree</code>。</p>\n<p>首先要<code>fork</code> <code>Next</code>，然后拉取到本地做修改，修改好后<code>push</code>到远程仓库。然后用<code>git subtree</code>把<code>themes/next/</code>当做子项目来统一管理。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>首先进入Hexo博客所在的目录，本例子中是<code>BlogBackup</code>。</p>\n</li>\n<li><p>新建名为<code>themes</code>的分支:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git branch themes</span><br></pre></td></tr></table></figure>\n<p>切换到<code>themes</code>分支:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git checkout themes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定<code>fork</code>的<code>next</code>仓库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git remote add -f next https://github.com/liuzhida33/hexo-theme-next.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>subtree</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git subtree add --prefix=themes/next next master</span><br></pre></td></tr></table></figure>\n<p>这样就把<code>fork</code>之后的<code>next</code>的<code>master</code>分支所有<code>checkout</code>出来的文件作为一次提交加到了<code>BlogBackup</code>项目的<code>themes</code>分支中。</p>\n</li>\n<li><p>合并<code>themes</code>分支到主分支：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git checkout master </span><br><span class=\"line\"><span class=\"meta\">$</span> git merge themes --squash </span><br><span class=\"line\"><span class=\"meta\">$</span> git commit</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"提交对主题配置文件的修改\"><a href=\"#提交对主题配置文件的修改\" class=\"headerlink\" title=\"提交对主题配置文件的修改\"></a>提交对主题配置文件的修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git subtree push --prefix=themes/next next master</span><br></pre></td></tr></table></figure>\n<p>这样提交之后<code>fork</code>的<code>next</code>主题仓库也会保持更新。</p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout themes </span><br><span class=\"line\">git merge master </span><br><span class=\"line\">git subtree pull --prefix=themes/next next master </span><br><span class=\"line\">git checkout master </span><br><span class=\"line\">git merge themes --squash </span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>由于修改<code>hexo</code>主题的默认设置需要使用<code>git</code>管理来方便备份，所以如何同步主题的设置也是一件很重要的事。</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT主题</a>的使用方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>这样配置完其实<code>thems/next/</code>就是一个包含<code>.git/</code>的子项目仓库。所以在<code>push</code>主项目的时候不会上传子项目，子项目的文件夹是灰的，并且里面是空的。所以从远程仓库拉取的项目中是没有Next主题的。</p>","more":"<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>解决方法在<a href=\"https://github.com/iissnan/hexo-theme-next/issues/328\" target=\"_blank\" rel=\"noopener\">Issues</a>里，使用<code>fork + subtree</code>。</p>\n<p>首先要<code>fork</code> <code>Next</code>，然后拉取到本地做修改，修改好后<code>push</code>到远程仓库。然后用<code>git subtree</code>把<code>themes/next/</code>当做子项目来统一管理。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>首先进入Hexo博客所在的目录，本例子中是<code>BlogBackup</code>。</p>\n</li>\n<li><p>新建名为<code>themes</code>的分支:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git branch themes</span><br></pre></td></tr></table></figure>\n<p>切换到<code>themes</code>分支:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git checkout themes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定<code>fork</code>的<code>next</code>仓库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git remote add -f next https://github.com/liuzhida33/hexo-theme-next.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>subtree</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git subtree add --prefix=themes/next next master</span><br></pre></td></tr></table></figure>\n<p>这样就把<code>fork</code>之后的<code>next</code>的<code>master</code>分支所有<code>checkout</code>出来的文件作为一次提交加到了<code>BlogBackup</code>项目的<code>themes</code>分支中。</p>\n</li>\n<li><p>合并<code>themes</code>分支到主分支：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git checkout master </span><br><span class=\"line\"><span class=\"meta\">$</span> git merge themes --squash </span><br><span class=\"line\"><span class=\"meta\">$</span> git commit</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"提交对主题配置文件的修改\"><a href=\"#提交对主题配置文件的修改\" class=\"headerlink\" title=\"提交对主题配置文件的修改\"></a>提交对主题配置文件的修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git subtree push --prefix=themes/next next master</span><br></pre></td></tr></table></figure>\n<p>这样提交之后<code>fork</code>的<code>next</code>主题仓库也会保持更新。</p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout themes </span><br><span class=\"line\">git merge master </span><br><span class=\"line\">git subtree pull --prefix=themes/next next master </span><br><span class=\"line\">git checkout master </span><br><span class=\"line\">git merge themes --squash </span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>"},{"title":"HTTP和HTTPS对比","date":"2018-04-08T09:16:26.000Z","declare":false,"reward":false,"comments":1,"_content":"\n![top](/assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg)\n\n<!-- more -->\n\n> **HTTP协议（HyperText Transfer Protocol，超文本传输协议）**：是一种用于分布式、协作式和超媒体信息系统的应用层协议。目的是为了提供一种发布和接收HTML页面的方法。默认端口号为`80`。\n>\n> **HTTPS协议（Hypertext Transfer Protocol Secure）**：是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。默认端口号为`443`。\n>\n> > 引自维基百科[HTTP](https://zh.wikipedia.org/wiki/超文本传输协议)和[HTTPS](https://zh.wikipedia.org/wiki/超文本传输安全协议)\n\n### HTTP\n\n##### 1. 协议概述\n\n​\t由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如\"HTTP/1.1 200 OK\"，以及返回的内容，如请求的文件、错误消息、或者其它信息。\n\n##### 2. URL\n\n> **URL（Uniform / Universal Resource Locator）**：统一资源定位符，是用于完整地描述Internet上网页和其他资源的地址的一种标识方法。\n\n**基本格式**：`scheme://host[:port#]/path/…/[?query-string][#anchor]`\n\n- **scheme**：协议(例如：http, https, ftp)\n- **host**：服务器的IP地址或者域名\n- **port**#：服务器的端口（如果是走协议默认端口，缺省端口80）\n- **path**：访问资源的路径\n- **query-string**：参数，发送给http服务器的数据\n- **anchor**：锚（跳转到网页的指定锚点位置）\n\n##### 3. 请求方法（HTTP/1.1）\n\n1. **GET**：请求指定的页面信息，并返回实体主体。参数显示在URL中。\n2. **HEAD**：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。\n3. **POST**：向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。参数在请求体中。\n4. **PUT**：从客户端向服务器传达的数据取代指定的文档的内容。\n5. **DELETE**：请求服务器删除指定的页面。\n6. **CONNECT**：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n7. **OPTIONS**：允许客户端查看服务器的性能。\n8. **TRACE**：回显服务器收到的请求，主要用于测试或诊断。\n\n> 避免使用`GET`方式提交表单，因为有可能会导致安全问题。比如说在登陆表单中用Get方式，用户输入的用户名和密码将在地址栏中暴露无遗。\n\n##### 4.常用的请求报头\n\n> HTTP请求由四个部分组成，分别是：**请求行**、**请求头部**、**空行**、**请求数据**。\n\n##### 1.Host（主机和端口号）\n\n> **Host**：对应网址URL中的Web名称和端口号，用于指定被请求资源的Internet主机和端口号，通常属于URL的一部分。\n\n##### 2.Connection (链接类型)\n\n> **Connection**：表示客户端与服务连接类型.\n\n1. Client 发起一个包含 `Connection:keep-alive` 的请求，HTTP/1.1使用 `keep-alive` 为默认值。\n2. Server收到请求后：\n   - 如果 Server 支持 `keep-alive`，回复一个包含 `Connection:keep-alive` 的响应，不关闭连接；\n   - 如果 Server 不支持 `keep-alive`，回复一个包含 `Connection:close` 的响应，关闭连接。\n3. 如果client收到包含 `Connection:keep-alive` 的响应，向同一个连接发送下一个请求，直到一方主动关闭连接。\n\n> `keep-alive`在很多情况下能够重用连接，减少资源消耗，缩短响应时间，比如当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都去请求建立连接。\n\n##### 3.Upgrade-Insecure-Requests (升级为HTTPS请求)\n\n> **Upgrade-Insecure-Requests**：升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示https页面中的http请求警报。\n\n##### 4.User-Agent(浏览器名称)\n\n> **User-Agent**：是客户浏览器的名称。\n\n##### 5.Accept（传输文件类型）\n\n> **Accept**：指浏览器或其他客户端可以接受的MIME（Multipurpose Internet Mail Extensions（多用途互联网邮件扩展））文件类型，服务器可以根据它判断并返回适当的文件格式。\n\n- `Accept: \\*/\\*`：表示什么都可以接收。\n- `Accept: image/gif`：表示客户端希望接收GIF图像格式的资源。\n- `Accept: text/html`：表示客户端希望接收html文本。\n- `Accept: text/html, application/xhtml+xml;q=0.9, image/*;q=0.8`：表示浏览器支持的MIME类型分别是html文本、xhtml和xml文档、所有的图像格式资源。\n\n> `q`是权重系数，范围0 =< q <= 1，`q`值越大，请求越倾向于获得其“`;`”之前的类型表示的内容。若没有指定`q`值，则默认为1，按照从左到右排序顺序；若被赋值为0，则用于表示浏览器不接收此内容类型。\n>\n> `Text`：用于标准化的表示的文本信息，文本消息可以是多种字符集和或者多种格式的。\n>\n> `Application`：用于传输应用程序数据或者二进制数据。\n\n##### 6.Referer（页面跳转处）\n\n> **Referer**：表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的等。例如防盗链原理。\n\n##### 7.Accept-Encoding（文件编解码格式）\n\n> **Accept-Encoding**：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式，许多情形下这可以减少大量的下载时间。\n\n- `Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0`：如果有多个Encoding同时匹配, 按照q值顺序排列，本例中按顺序支持 gzip, identity压缩编码，支持gzip的浏览器会返回经过gzip编码的HTML页面。 如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。\n\n##### 8.Accept-Language（语言种类）\n\n> **Accept-Langeuage**：指出浏览器可以接受的语言种类，如en或en-us指英语，zh或者zh-cn指中文，当服务器能够提供一种以上的语言版本时要用到。\n\n##### 9.Accept-Charset（字符编码）\n\n> **Accept-Charset**：指出浏览器可以接受的字符编码。\n\n- `Accept-Charset:iso-8859-1,gb2312,utf-8`：本例中支持`ISO8859-1`、`gb2312`、`utf-8`编码。如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。\n\n##### 10.Cookie\n\n> **Cookie**：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。\n\n##### 11.Content-Type （POST数据类型）\n\n> **Content-Type**：POST请求里用来表示的内容类型。\n\n- `Content-Type = Text/XML; charset=gb2312`：指明该请求中的消息体中包含的是纯文本的`XML`类型的数据，字符编码采用`gb2312`。\n\n##### 5.服务端常用的响应报头\n\n> HTTP响应由四个部分组成，分别是： **状态行**、**消息报头**、**空行**、**响应正文**。\n\n##### 1.Cache-Control: must-revalidate, no-cache, private\n\n> 这个值告诉客户端，服务端不希望客户端缓存资源，在下次请求资源时，必须要重新请求服务器，不能从缓存中获取资源。\n\n- `Cache-Control`是响应头中很重要的信息，当客户端请求头中包含`Cache-Control: max-age = 0`请求，明确表示不会缓存服务器资源时，`Cache-Control`作为回应信息，通常会返回`no-cache`。\n- 当客户端在请求头中没有包含`Cache-Control`时，服务端往往会定不同的资源不同的缓存策略，比如说oschina在缓存图片资源的策略是`Cache-Control: max-age = 86400`，这个意思是，从当前时间开始，在86400秒的时间内，客户端可以直接从缓存中读取资源，而不需要向服务器请求。\n\n##### 2.Connection: keep-alive\n\n> 这个字段作为回应客户端的`Connection: keep-alive`，告诉客户端服务器的TCP连接也是一个长连接，客户端可以继续使用这个TCP连接发送HTTP请求。\n\n##### 3.Content-Encoding: gzip\n\n> 告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。\n\n##### 4.Content-Type: text/html; charset = UTF-8\n\n> 告诉客户端，资源文件的类型和字符编码，客户端通过UTF-8对资源进行解码，然后对资源进行html解析。\n\n##### 5.Date: Sun, 21 Sep 2016 06:18:21 GMT\n\n> 服务端发送资源时的服务器时间。\n\n##### 6.Expires: Sun, 1 Jan 2000 01:00:00 GMT\n\n> 告诉客户端可以在这个时间前直接访问缓存。该值存在问题，客户端和服务器的时间不一定都是相同的，所有没有`Cache-Control: max-age = *` 准确。\n\n##### 7.Pragma: no-cache\n\n> 含义与`Cache-Control`相同\n\n##### 8.Server: Tengine/1.4.6\n\n> 服务器和相对应的版本，告诉客户端服务器的信息。\n\n##### 9.Transfer-Encoding: chunked\n\n> 告诉客户端，服务器发送的资源方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。\n\n##### 10.Vary: Accept-Encoding\n\n> 告诉缓存服务器，缓存压缩文件和非压缩文件两个版本。\n\n##### 6.响应状态码\n\n- `100～199`：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。\n- `200～299`：表示服务器成功接收请求并 已完成整个处理过程。常用`200`（OK请求成功）。\n- `300～399`：为完成请求，客户端需进一步细化请求。例如：请求的资源已经移动一个新地址，常用`302`（所请求的页面已经临时转移至新的URL）、`307`和`304`（使用缓存资源）。\n- `400～499`：客户端的请求有错误，常用`404`（服务器无法找到被请求的页面）、`403`（服务器拒绝访问，权限不够）。\n- `500～599`：服务端出现错误，常用`500`（请求未完成。服务器遇到不可预知的情况）。\n\n##### 7.Cookie和Session\n\n> 服务器和客户端的交互仅限于请求/响应过程，结束之后便断开，在下一次请求时，服务器会认为新的客户端。为了维护他们之间的连接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息。\n\n- `Cooke`：通过在客户端记录的信息确定用户的身份。\n- `Session`：通过在服务端记录的信息确定用户的身份。\n\n### HTTPS\n\n> HTTPS = HTTP + SSL/TLS\n>\n> SSL：Secure Sockets Layer 安全套接层\n>\n> TLS：ransport Layer Security 安全传输层协议。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）\n\n##### 1.客户端发起HTTPS请求\n\n##### 2.服务端的配置\n\n> 采用HTTPS协议的服务器必须有一套数字证书，包含一对公钥和私钥。\n\n##### 3.传送证书\n\n> 该证书是公钥，包含证书的颁发机构、过期时间等等。\n\n##### 4.客户端解析证书\n\n> 由客户端的TLS完成，首先验证公钥是否有效，比如颁发机构、过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密。\n\n##### 5.传送加密信息\n\n> 传送的是用证书加密后的随机值，目的是让服务端得到这个随机值，以后客户端和服务端通信就可以通过这个随机值来进行加密解密了。\n\n##### 6.服务端解密信息\n\n> 服务端用私钥解密后，得到了客户端传过来的随机值（私钥），然后把内容通过该值进行对称加密。\n\n##### 7.传输加密后的信息\n\n##### 8.客户端解密信息\n\n> 客户端用之前生成的私钥解密服务端传过来的信息，于是获取了解密后的内容。\n\n![RSA密钥交换过程](/assets/blogImg/http-https.jpg)\n\n### 不同点\n\n- HTTP协议是运行在TCP之上，所有传输的内容都是明文，客户端和服务端都无法验证对方的身份。\n- HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS是运行在TCP之上。所有传输的内容都是经过加密，加密采用对称加密，但对称加密的密钥用服务器的证书进行了非对称加密。\n\n### TCP建立连接的三次握手\n\n> **FLAGS字段：**\n>\n> SYN：表示建立连接。\n>\n> FIN：表示关闭连接。\n>\n> ACK：表示响应。\n>\n> PSH：表示有DATA数据传输。\n>\n> RST：表示连接重置。\n\n- 第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机。\n- 第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包。\n- 第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。\n\n完成三次握手，主机A与主机B开始传送数据。\n\n### TCP断开连接的四次握手\n\n> TCP断开连接有两种方式，第一种是正常的四次握手断开的，第二种是RST异常断开的\n\n##### 1.正常断开\n\n- 服务器80端口向41826端口发出FIN的断开连接请求。\n- 41826端口收到请求之后向服务器80端口回复了一个ACK。\n- 41826端口向服务器80端口发送断开请求FIN。\n- 服务器80向客户端发送断开的回复ACK。\n\n##### 2.异常断开\n\n- 服务器80端口向41826端口发出FIN的断开连接请求。\n- 41826端口收到请求之后向服务器80端口回复了一个ACK。\n- 41826端口向服务器80端口发送了GET请求。\n- 41826端口向服务器80端口发送断开请求FIN。\n- 服务器端口80因为原因没有确认客户端发送的确认请求而断开，因此返回了RST。","source":"_posts/HTTP-and-HTTPS.md","raw":"---\ntitle: HTTP和HTTPS对比\ndate: 2018-04-8 17:16:26\ndeclare: false\nreward: false\ncomments: true\ntags:\n- HTTP\n- HTTPS\n- 握手\n---\n\n![top](/assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg)\n\n<!-- more -->\n\n> **HTTP协议（HyperText Transfer Protocol，超文本传输协议）**：是一种用于分布式、协作式和超媒体信息系统的应用层协议。目的是为了提供一种发布和接收HTML页面的方法。默认端口号为`80`。\n>\n> **HTTPS协议（Hypertext Transfer Protocol Secure）**：是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。默认端口号为`443`。\n>\n> > 引自维基百科[HTTP](https://zh.wikipedia.org/wiki/超文本传输协议)和[HTTPS](https://zh.wikipedia.org/wiki/超文本传输安全协议)\n\n### HTTP\n\n##### 1. 协议概述\n\n​\t由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如\"HTTP/1.1 200 OK\"，以及返回的内容，如请求的文件、错误消息、或者其它信息。\n\n##### 2. URL\n\n> **URL（Uniform / Universal Resource Locator）**：统一资源定位符，是用于完整地描述Internet上网页和其他资源的地址的一种标识方法。\n\n**基本格式**：`scheme://host[:port#]/path/…/[?query-string][#anchor]`\n\n- **scheme**：协议(例如：http, https, ftp)\n- **host**：服务器的IP地址或者域名\n- **port**#：服务器的端口（如果是走协议默认端口，缺省端口80）\n- **path**：访问资源的路径\n- **query-string**：参数，发送给http服务器的数据\n- **anchor**：锚（跳转到网页的指定锚点位置）\n\n##### 3. 请求方法（HTTP/1.1）\n\n1. **GET**：请求指定的页面信息，并返回实体主体。参数显示在URL中。\n2. **HEAD**：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。\n3. **POST**：向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。参数在请求体中。\n4. **PUT**：从客户端向服务器传达的数据取代指定的文档的内容。\n5. **DELETE**：请求服务器删除指定的页面。\n6. **CONNECT**：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n7. **OPTIONS**：允许客户端查看服务器的性能。\n8. **TRACE**：回显服务器收到的请求，主要用于测试或诊断。\n\n> 避免使用`GET`方式提交表单，因为有可能会导致安全问题。比如说在登陆表单中用Get方式，用户输入的用户名和密码将在地址栏中暴露无遗。\n\n##### 4.常用的请求报头\n\n> HTTP请求由四个部分组成，分别是：**请求行**、**请求头部**、**空行**、**请求数据**。\n\n##### 1.Host（主机和端口号）\n\n> **Host**：对应网址URL中的Web名称和端口号，用于指定被请求资源的Internet主机和端口号，通常属于URL的一部分。\n\n##### 2.Connection (链接类型)\n\n> **Connection**：表示客户端与服务连接类型.\n\n1. Client 发起一个包含 `Connection:keep-alive` 的请求，HTTP/1.1使用 `keep-alive` 为默认值。\n2. Server收到请求后：\n   - 如果 Server 支持 `keep-alive`，回复一个包含 `Connection:keep-alive` 的响应，不关闭连接；\n   - 如果 Server 不支持 `keep-alive`，回复一个包含 `Connection:close` 的响应，关闭连接。\n3. 如果client收到包含 `Connection:keep-alive` 的响应，向同一个连接发送下一个请求，直到一方主动关闭连接。\n\n> `keep-alive`在很多情况下能够重用连接，减少资源消耗，缩短响应时间，比如当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都去请求建立连接。\n\n##### 3.Upgrade-Insecure-Requests (升级为HTTPS请求)\n\n> **Upgrade-Insecure-Requests**：升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示https页面中的http请求警报。\n\n##### 4.User-Agent(浏览器名称)\n\n> **User-Agent**：是客户浏览器的名称。\n\n##### 5.Accept（传输文件类型）\n\n> **Accept**：指浏览器或其他客户端可以接受的MIME（Multipurpose Internet Mail Extensions（多用途互联网邮件扩展））文件类型，服务器可以根据它判断并返回适当的文件格式。\n\n- `Accept: \\*/\\*`：表示什么都可以接收。\n- `Accept: image/gif`：表示客户端希望接收GIF图像格式的资源。\n- `Accept: text/html`：表示客户端希望接收html文本。\n- `Accept: text/html, application/xhtml+xml;q=0.9, image/*;q=0.8`：表示浏览器支持的MIME类型分别是html文本、xhtml和xml文档、所有的图像格式资源。\n\n> `q`是权重系数，范围0 =< q <= 1，`q`值越大，请求越倾向于获得其“`;`”之前的类型表示的内容。若没有指定`q`值，则默认为1，按照从左到右排序顺序；若被赋值为0，则用于表示浏览器不接收此内容类型。\n>\n> `Text`：用于标准化的表示的文本信息，文本消息可以是多种字符集和或者多种格式的。\n>\n> `Application`：用于传输应用程序数据或者二进制数据。\n\n##### 6.Referer（页面跳转处）\n\n> **Referer**：表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的等。例如防盗链原理。\n\n##### 7.Accept-Encoding（文件编解码格式）\n\n> **Accept-Encoding**：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式，许多情形下这可以减少大量的下载时间。\n\n- `Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0`：如果有多个Encoding同时匹配, 按照q值顺序排列，本例中按顺序支持 gzip, identity压缩编码，支持gzip的浏览器会返回经过gzip编码的HTML页面。 如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。\n\n##### 8.Accept-Language（语言种类）\n\n> **Accept-Langeuage**：指出浏览器可以接受的语言种类，如en或en-us指英语，zh或者zh-cn指中文，当服务器能够提供一种以上的语言版本时要用到。\n\n##### 9.Accept-Charset（字符编码）\n\n> **Accept-Charset**：指出浏览器可以接受的字符编码。\n\n- `Accept-Charset:iso-8859-1,gb2312,utf-8`：本例中支持`ISO8859-1`、`gb2312`、`utf-8`编码。如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。\n\n##### 10.Cookie\n\n> **Cookie**：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。\n\n##### 11.Content-Type （POST数据类型）\n\n> **Content-Type**：POST请求里用来表示的内容类型。\n\n- `Content-Type = Text/XML; charset=gb2312`：指明该请求中的消息体中包含的是纯文本的`XML`类型的数据，字符编码采用`gb2312`。\n\n##### 5.服务端常用的响应报头\n\n> HTTP响应由四个部分组成，分别是： **状态行**、**消息报头**、**空行**、**响应正文**。\n\n##### 1.Cache-Control: must-revalidate, no-cache, private\n\n> 这个值告诉客户端，服务端不希望客户端缓存资源，在下次请求资源时，必须要重新请求服务器，不能从缓存中获取资源。\n\n- `Cache-Control`是响应头中很重要的信息，当客户端请求头中包含`Cache-Control: max-age = 0`请求，明确表示不会缓存服务器资源时，`Cache-Control`作为回应信息，通常会返回`no-cache`。\n- 当客户端在请求头中没有包含`Cache-Control`时，服务端往往会定不同的资源不同的缓存策略，比如说oschina在缓存图片资源的策略是`Cache-Control: max-age = 86400`，这个意思是，从当前时间开始，在86400秒的时间内，客户端可以直接从缓存中读取资源，而不需要向服务器请求。\n\n##### 2.Connection: keep-alive\n\n> 这个字段作为回应客户端的`Connection: keep-alive`，告诉客户端服务器的TCP连接也是一个长连接，客户端可以继续使用这个TCP连接发送HTTP请求。\n\n##### 3.Content-Encoding: gzip\n\n> 告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。\n\n##### 4.Content-Type: text/html; charset = UTF-8\n\n> 告诉客户端，资源文件的类型和字符编码，客户端通过UTF-8对资源进行解码，然后对资源进行html解析。\n\n##### 5.Date: Sun, 21 Sep 2016 06:18:21 GMT\n\n> 服务端发送资源时的服务器时间。\n\n##### 6.Expires: Sun, 1 Jan 2000 01:00:00 GMT\n\n> 告诉客户端可以在这个时间前直接访问缓存。该值存在问题，客户端和服务器的时间不一定都是相同的，所有没有`Cache-Control: max-age = *` 准确。\n\n##### 7.Pragma: no-cache\n\n> 含义与`Cache-Control`相同\n\n##### 8.Server: Tengine/1.4.6\n\n> 服务器和相对应的版本，告诉客户端服务器的信息。\n\n##### 9.Transfer-Encoding: chunked\n\n> 告诉客户端，服务器发送的资源方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。\n\n##### 10.Vary: Accept-Encoding\n\n> 告诉缓存服务器，缓存压缩文件和非压缩文件两个版本。\n\n##### 6.响应状态码\n\n- `100～199`：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。\n- `200～299`：表示服务器成功接收请求并 已完成整个处理过程。常用`200`（OK请求成功）。\n- `300～399`：为完成请求，客户端需进一步细化请求。例如：请求的资源已经移动一个新地址，常用`302`（所请求的页面已经临时转移至新的URL）、`307`和`304`（使用缓存资源）。\n- `400～499`：客户端的请求有错误，常用`404`（服务器无法找到被请求的页面）、`403`（服务器拒绝访问，权限不够）。\n- `500～599`：服务端出现错误，常用`500`（请求未完成。服务器遇到不可预知的情况）。\n\n##### 7.Cookie和Session\n\n> 服务器和客户端的交互仅限于请求/响应过程，结束之后便断开，在下一次请求时，服务器会认为新的客户端。为了维护他们之间的连接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息。\n\n- `Cooke`：通过在客户端记录的信息确定用户的身份。\n- `Session`：通过在服务端记录的信息确定用户的身份。\n\n### HTTPS\n\n> HTTPS = HTTP + SSL/TLS\n>\n> SSL：Secure Sockets Layer 安全套接层\n>\n> TLS：ransport Layer Security 安全传输层协议。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）\n\n##### 1.客户端发起HTTPS请求\n\n##### 2.服务端的配置\n\n> 采用HTTPS协议的服务器必须有一套数字证书，包含一对公钥和私钥。\n\n##### 3.传送证书\n\n> 该证书是公钥，包含证书的颁发机构、过期时间等等。\n\n##### 4.客户端解析证书\n\n> 由客户端的TLS完成，首先验证公钥是否有效，比如颁发机构、过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密。\n\n##### 5.传送加密信息\n\n> 传送的是用证书加密后的随机值，目的是让服务端得到这个随机值，以后客户端和服务端通信就可以通过这个随机值来进行加密解密了。\n\n##### 6.服务端解密信息\n\n> 服务端用私钥解密后，得到了客户端传过来的随机值（私钥），然后把内容通过该值进行对称加密。\n\n##### 7.传输加密后的信息\n\n##### 8.客户端解密信息\n\n> 客户端用之前生成的私钥解密服务端传过来的信息，于是获取了解密后的内容。\n\n![RSA密钥交换过程](/assets/blogImg/http-https.jpg)\n\n### 不同点\n\n- HTTP协议是运行在TCP之上，所有传输的内容都是明文，客户端和服务端都无法验证对方的身份。\n- HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS是运行在TCP之上。所有传输的内容都是经过加密，加密采用对称加密，但对称加密的密钥用服务器的证书进行了非对称加密。\n\n### TCP建立连接的三次握手\n\n> **FLAGS字段：**\n>\n> SYN：表示建立连接。\n>\n> FIN：表示关闭连接。\n>\n> ACK：表示响应。\n>\n> PSH：表示有DATA数据传输。\n>\n> RST：表示连接重置。\n\n- 第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机。\n- 第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包。\n- 第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。\n\n完成三次握手，主机A与主机B开始传送数据。\n\n### TCP断开连接的四次握手\n\n> TCP断开连接有两种方式，第一种是正常的四次握手断开的，第二种是RST异常断开的\n\n##### 1.正常断开\n\n- 服务器80端口向41826端口发出FIN的断开连接请求。\n- 41826端口收到请求之后向服务器80端口回复了一个ACK。\n- 41826端口向服务器80端口发送断开请求FIN。\n- 服务器80向客户端发送断开的回复ACK。\n\n##### 2.异常断开\n\n- 服务器80端口向41826端口发出FIN的断开连接请求。\n- 41826端口收到请求之后向服务器80端口回复了一个ACK。\n- 41826端口向服务器80端口发送了GET请求。\n- 41826端口向服务器80端口发送断开请求FIN。\n- 服务器端口80因为原因没有确认客户端发送的确认请求而断开，因此返回了RST。","slug":"HTTP-and-HTTPS","published":1,"updated":"2018-05-20T02:18:09.736Z","_id":"cjhebaux80009ofxfladp2o4u","layout":"post","photos":[],"link":"","content":"<p><img src=\"/assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg\" alt=\"top\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>HTTP协议（HyperText Transfer Protocol，超文本传输协议）</strong>：是一种用于分布式、协作式和超媒体信息系统的应用层协议。目的是为了提供一种发布和接收HTML页面的方法。默认端口号为<code>80</code>。</p>\n<p><strong>HTTPS协议（Hypertext Transfer Protocol Secure）</strong>：是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。默认端口号为<code>443</code>。</p>\n<blockquote>\n<p>引自维基百科<a href=\"https://zh.wikipedia.org/wiki/超文本传输协议\" target=\"_blank\" rel=\"noopener\">HTTP</a>和<a href=\"https://zh.wikipedia.org/wiki/超文本传输安全协议\" target=\"_blank\" rel=\"noopener\">HTTPS</a></p>\n</blockquote>\n</blockquote>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><h5 id=\"1-协议概述\"><a href=\"#1-协议概述\" class=\"headerlink\" title=\"1. 协议概述\"></a>1. 协议概述</h5><p>​    由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p>\n<h5 id=\"2-URL\"><a href=\"#2-URL\" class=\"headerlink\" title=\"2. URL\"></a>2. URL</h5><blockquote>\n<p><strong>URL（Uniform / Universal Resource Locator）</strong>：统一资源定位符，是用于完整地描述Internet上网页和其他资源的地址的一种标识方法。</p>\n</blockquote>\n<p><strong>基本格式</strong>：<code>scheme://host[:port#]/path/…/[?query-string][#anchor]</code></p>\n<ul>\n<li><strong>scheme</strong>：协议(例如：http, https, ftp)</li>\n<li><strong>host</strong>：服务器的IP地址或者域名</li>\n<li><strong>port</strong>#：服务器的端口（如果是走协议默认端口，缺省端口80）</li>\n<li><strong>path</strong>：访问资源的路径</li>\n<li><strong>query-string</strong>：参数，发送给http服务器的数据</li>\n<li><strong>anchor</strong>：锚（跳转到网页的指定锚点位置）</li>\n</ul>\n<h5 id=\"3-请求方法（HTTP-1-1）\"><a href=\"#3-请求方法（HTTP-1-1）\" class=\"headerlink\" title=\"3. 请求方法（HTTP/1.1）\"></a>3. 请求方法（HTTP/1.1）</h5><ol>\n<li><strong>GET</strong>：请求指定的页面信息，并返回实体主体。参数显示在URL中。</li>\n<li><strong>HEAD</strong>：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。</li>\n<li><strong>POST</strong>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。参数在请求体中。</li>\n<li><strong>PUT</strong>：从客户端向服务器传达的数据取代指定的文档的内容。</li>\n<li><strong>DELETE</strong>：请求服务器删除指定的页面。</li>\n<li><strong>CONNECT</strong>：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li>\n<li><strong>OPTIONS</strong>：允许客户端查看服务器的性能。</li>\n<li><strong>TRACE</strong>：回显服务器收到的请求，主要用于测试或诊断。</li>\n</ol>\n<blockquote>\n<p>避免使用<code>GET</code>方式提交表单，因为有可能会导致安全问题。比如说在登陆表单中用Get方式，用户输入的用户名和密码将在地址栏中暴露无遗。</p>\n</blockquote>\n<h5 id=\"4-常用的请求报头\"><a href=\"#4-常用的请求报头\" class=\"headerlink\" title=\"4.常用的请求报头\"></a>4.常用的请求报头</h5><blockquote>\n<p>HTTP请求由四个部分组成，分别是：<strong>请求行</strong>、<strong>请求头部</strong>、<strong>空行</strong>、<strong>请求数据</strong>。</p>\n</blockquote>\n<h5 id=\"1-Host（主机和端口号）\"><a href=\"#1-Host（主机和端口号）\" class=\"headerlink\" title=\"1.Host（主机和端口号）\"></a>1.Host（主机和端口号）</h5><blockquote>\n<p><strong>Host</strong>：对应网址URL中的Web名称和端口号，用于指定被请求资源的Internet主机和端口号，通常属于URL的一部分。</p>\n</blockquote>\n<h5 id=\"2-Connection-链接类型\"><a href=\"#2-Connection-链接类型\" class=\"headerlink\" title=\"2.Connection (链接类型)\"></a>2.Connection (链接类型)</h5><blockquote>\n<p><strong>Connection</strong>：表示客户端与服务连接类型.</p>\n</blockquote>\n<ol>\n<li>Client 发起一个包含 <code>Connection:keep-alive</code> 的请求，HTTP/1.1使用 <code>keep-alive</code> 为默认值。</li>\n<li>Server收到请求后：<ul>\n<li>如果 Server 支持 <code>keep-alive</code>，回复一个包含 <code>Connection:keep-alive</code> 的响应，不关闭连接；</li>\n<li>如果 Server 不支持 <code>keep-alive</code>，回复一个包含 <code>Connection:close</code> 的响应，关闭连接。</li>\n</ul>\n</li>\n<li>如果client收到包含 <code>Connection:keep-alive</code> 的响应，向同一个连接发送下一个请求，直到一方主动关闭连接。</li>\n</ol>\n<blockquote>\n<p><code>keep-alive</code>在很多情况下能够重用连接，减少资源消耗，缩短响应时间，比如当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都去请求建立连接。</p>\n</blockquote>\n<h5 id=\"3-Upgrade-Insecure-Requests-升级为HTTPS请求\"><a href=\"#3-Upgrade-Insecure-Requests-升级为HTTPS请求\" class=\"headerlink\" title=\"3.Upgrade-Insecure-Requests (升级为HTTPS请求)\"></a>3.Upgrade-Insecure-Requests (升级为HTTPS请求)</h5><blockquote>\n<p><strong>Upgrade-Insecure-Requests</strong>：升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示https页面中的http请求警报。</p>\n</blockquote>\n<h5 id=\"4-User-Agent-浏览器名称\"><a href=\"#4-User-Agent-浏览器名称\" class=\"headerlink\" title=\"4.User-Agent(浏览器名称)\"></a>4.User-Agent(浏览器名称)</h5><blockquote>\n<p><strong>User-Agent</strong>：是客户浏览器的名称。</p>\n</blockquote>\n<h5 id=\"5-Accept（传输文件类型）\"><a href=\"#5-Accept（传输文件类型）\" class=\"headerlink\" title=\"5.Accept（传输文件类型）\"></a>5.Accept（传输文件类型）</h5><blockquote>\n<p><strong>Accept</strong>：指浏览器或其他客户端可以接受的MIME（Multipurpose Internet Mail Extensions（多用途互联网邮件扩展））文件类型，服务器可以根据它判断并返回适当的文件格式。</p>\n</blockquote>\n<ul>\n<li><code>Accept: \\*/\\*</code>：表示什么都可以接收。</li>\n<li><code>Accept: image/gif</code>：表示客户端希望接收GIF图像格式的资源。</li>\n<li><code>Accept: text/html</code>：表示客户端希望接收html文本。</li>\n<li><code>Accept: text/html, application/xhtml+xml;q=0.9, image/*;q=0.8</code>：表示浏览器支持的MIME类型分别是html文本、xhtml和xml文档、所有的图像格式资源。</li>\n</ul>\n<blockquote>\n<p><code>q</code>是权重系数，范围0 =&lt; q &lt;= 1，<code>q</code>值越大，请求越倾向于获得其“<code>;</code>”之前的类型表示的内容。若没有指定<code>q</code>值，则默认为1，按照从左到右排序顺序；若被赋值为0，则用于表示浏览器不接收此内容类型。</p>\n<p><code>Text</code>：用于标准化的表示的文本信息，文本消息可以是多种字符集和或者多种格式的。</p>\n<p><code>Application</code>：用于传输应用程序数据或者二进制数据。</p>\n</blockquote>\n<h5 id=\"6-Referer（页面跳转处）\"><a href=\"#6-Referer（页面跳转处）\" class=\"headerlink\" title=\"6.Referer（页面跳转处）\"></a>6.Referer（页面跳转处）</h5><blockquote>\n<p><strong>Referer</strong>：表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的等。例如防盗链原理。</p>\n</blockquote>\n<h5 id=\"7-Accept-Encoding（文件编解码格式）\"><a href=\"#7-Accept-Encoding（文件编解码格式）\" class=\"headerlink\" title=\"7.Accept-Encoding（文件编解码格式）\"></a>7.Accept-Encoding（文件编解码格式）</h5><blockquote>\n<p><strong>Accept-Encoding</strong>：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式，许多情形下这可以减少大量的下载时间。</p>\n</blockquote>\n<ul>\n<li><code>Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0</code>：如果有多个Encoding同时匹配, 按照q值顺序排列，本例中按顺序支持 gzip, identity压缩编码，支持gzip的浏览器会返回经过gzip编码的HTML页面。 如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。</li>\n</ul>\n<h5 id=\"8-Accept-Language（语言种类）\"><a href=\"#8-Accept-Language（语言种类）\" class=\"headerlink\" title=\"8.Accept-Language（语言种类）\"></a>8.Accept-Language（语言种类）</h5><blockquote>\n<p><strong>Accept-Langeuage</strong>：指出浏览器可以接受的语言种类，如en或en-us指英语，zh或者zh-cn指中文，当服务器能够提供一种以上的语言版本时要用到。</p>\n</blockquote>\n<h5 id=\"9-Accept-Charset（字符编码）\"><a href=\"#9-Accept-Charset（字符编码）\" class=\"headerlink\" title=\"9.Accept-Charset（字符编码）\"></a>9.Accept-Charset（字符编码）</h5><blockquote>\n<p><strong>Accept-Charset</strong>：指出浏览器可以接受的字符编码。</p>\n</blockquote>\n<ul>\n<li><code>Accept-Charset:iso-8859-1,gb2312,utf-8</code>：本例中支持<code>ISO8859-1</code>、<code>gb2312</code>、<code>utf-8</code>编码。如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。</li>\n</ul>\n<h5 id=\"10-Cookie\"><a href=\"#10-Cookie\" class=\"headerlink\" title=\"10.Cookie\"></a>10.Cookie</h5><blockquote>\n<p><strong>Cookie</strong>：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。</p>\n</blockquote>\n<h5 id=\"11-Content-Type-（POST数据类型）\"><a href=\"#11-Content-Type-（POST数据类型）\" class=\"headerlink\" title=\"11.Content-Type （POST数据类型）\"></a>11.Content-Type （POST数据类型）</h5><blockquote>\n<p><strong>Content-Type</strong>：POST请求里用来表示的内容类型。</p>\n</blockquote>\n<ul>\n<li><code>Content-Type = Text/XML; charset=gb2312</code>：指明该请求中的消息体中包含的是纯文本的<code>XML</code>类型的数据，字符编码采用<code>gb2312</code>。</li>\n</ul>\n<h5 id=\"5-服务端常用的响应报头\"><a href=\"#5-服务端常用的响应报头\" class=\"headerlink\" title=\"5.服务端常用的响应报头\"></a>5.服务端常用的响应报头</h5><blockquote>\n<p>HTTP响应由四个部分组成，分别是： <strong>状态行</strong>、<strong>消息报头</strong>、<strong>空行</strong>、<strong>响应正文</strong>。</p>\n</blockquote>\n<h5 id=\"1-Cache-Control-must-revalidate-no-cache-private\"><a href=\"#1-Cache-Control-must-revalidate-no-cache-private\" class=\"headerlink\" title=\"1.Cache-Control: must-revalidate, no-cache, private\"></a>1.Cache-Control: must-revalidate, no-cache, private</h5><blockquote>\n<p>这个值告诉客户端，服务端不希望客户端缓存资源，在下次请求资源时，必须要重新请求服务器，不能从缓存中获取资源。</p>\n</blockquote>\n<ul>\n<li><code>Cache-Control</code>是响应头中很重要的信息，当客户端请求头中包含<code>Cache-Control: max-age = 0</code>请求，明确表示不会缓存服务器资源时，<code>Cache-Control</code>作为回应信息，通常会返回<code>no-cache</code>。</li>\n<li>当客户端在请求头中没有包含<code>Cache-Control</code>时，服务端往往会定不同的资源不同的缓存策略，比如说oschina在缓存图片资源的策略是<code>Cache-Control: max-age = 86400</code>，这个意思是，从当前时间开始，在86400秒的时间内，客户端可以直接从缓存中读取资源，而不需要向服务器请求。</li>\n</ul>\n<h5 id=\"2-Connection-keep-alive\"><a href=\"#2-Connection-keep-alive\" class=\"headerlink\" title=\"2.Connection: keep-alive\"></a>2.Connection: keep-alive</h5><blockquote>\n<p>这个字段作为回应客户端的<code>Connection: keep-alive</code>，告诉客户端服务器的TCP连接也是一个长连接，客户端可以继续使用这个TCP连接发送HTTP请求。</p>\n</blockquote>\n<h5 id=\"3-Content-Encoding-gzip\"><a href=\"#3-Content-Encoding-gzip\" class=\"headerlink\" title=\"3.Content-Encoding: gzip\"></a>3.Content-Encoding: gzip</h5><blockquote>\n<p>告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。</p>\n</blockquote>\n<h5 id=\"4-Content-Type-text-html-charset-UTF-8\"><a href=\"#4-Content-Type-text-html-charset-UTF-8\" class=\"headerlink\" title=\"4.Content-Type: text/html; charset = UTF-8\"></a>4.Content-Type: text/html; charset = UTF-8</h5><blockquote>\n<p>告诉客户端，资源文件的类型和字符编码，客户端通过UTF-8对资源进行解码，然后对资源进行html解析。</p>\n</blockquote>\n<h5 id=\"5-Date-Sun-21-Sep-2016-06-18-21-GMT\"><a href=\"#5-Date-Sun-21-Sep-2016-06-18-21-GMT\" class=\"headerlink\" title=\"5.Date: Sun, 21 Sep 2016 06:18:21 GMT\"></a>5.Date: Sun, 21 Sep 2016 06:18:21 GMT</h5><blockquote>\n<p>服务端发送资源时的服务器时间。</p>\n</blockquote>\n<h5 id=\"6-Expires-Sun-1-Jan-2000-01-00-00-GMT\"><a href=\"#6-Expires-Sun-1-Jan-2000-01-00-00-GMT\" class=\"headerlink\" title=\"6.Expires: Sun, 1 Jan 2000 01:00:00 GMT\"></a>6.Expires: Sun, 1 Jan 2000 01:00:00 GMT</h5><blockquote>\n<p>告诉客户端可以在这个时间前直接访问缓存。该值存在问题，客户端和服务器的时间不一定都是相同的，所有没有<code>Cache-Control: max-age = *</code> 准确。</p>\n</blockquote>\n<h5 id=\"7-Pragma-no-cache\"><a href=\"#7-Pragma-no-cache\" class=\"headerlink\" title=\"7.Pragma: no-cache\"></a>7.Pragma: no-cache</h5><blockquote>\n<p>含义与<code>Cache-Control</code>相同</p>\n</blockquote>\n<h5 id=\"8-Server-Tengine-1-4-6\"><a href=\"#8-Server-Tengine-1-4-6\" class=\"headerlink\" title=\"8.Server: Tengine/1.4.6\"></a>8.Server: Tengine/1.4.6</h5><blockquote>\n<p>服务器和相对应的版本，告诉客户端服务器的信息。</p>\n</blockquote>\n<h5 id=\"9-Transfer-Encoding-chunked\"><a href=\"#9-Transfer-Encoding-chunked\" class=\"headerlink\" title=\"9.Transfer-Encoding: chunked\"></a>9.Transfer-Encoding: chunked</h5><blockquote>\n<p>告诉客户端，服务器发送的资源方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。</p>\n</blockquote>\n<h5 id=\"10-Vary-Accept-Encoding\"><a href=\"#10-Vary-Accept-Encoding\" class=\"headerlink\" title=\"10.Vary: Accept-Encoding\"></a>10.Vary: Accept-Encoding</h5><blockquote>\n<p>告诉缓存服务器，缓存压缩文件和非压缩文件两个版本。</p>\n</blockquote>\n<h5 id=\"6-响应状态码\"><a href=\"#6-响应状态码\" class=\"headerlink\" title=\"6.响应状态码\"></a>6.响应状态码</h5><ul>\n<li><code>100～199</code>：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。</li>\n<li><code>200～299</code>：表示服务器成功接收请求并 已完成整个处理过程。常用<code>200</code>（OK请求成功）。</li>\n<li><code>300～399</code>：为完成请求，客户端需进一步细化请求。例如：请求的资源已经移动一个新地址，常用<code>302</code>（所请求的页面已经临时转移至新的URL）、<code>307</code>和<code>304</code>（使用缓存资源）。</li>\n<li><code>400～499</code>：客户端的请求有错误，常用<code>404</code>（服务器无法找到被请求的页面）、<code>403</code>（服务器拒绝访问，权限不够）。</li>\n<li><code>500～599</code>：服务端出现错误，常用<code>500</code>（请求未完成。服务器遇到不可预知的情况）。</li>\n</ul>\n<h5 id=\"7-Cookie和Session\"><a href=\"#7-Cookie和Session\" class=\"headerlink\" title=\"7.Cookie和Session\"></a>7.Cookie和Session</h5><blockquote>\n<p>服务器和客户端的交互仅限于请求/响应过程，结束之后便断开，在下一次请求时，服务器会认为新的客户端。为了维护他们之间的连接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息。</p>\n</blockquote>\n<ul>\n<li><code>Cooke</code>：通过在客户端记录的信息确定用户的身份。</li>\n<li><code>Session</code>：通过在服务端记录的信息确定用户的身份。</li>\n</ul>\n<h3 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h3><blockquote>\n<p>HTTPS = HTTP + SSL/TLS</p>\n<p>SSL：Secure Sockets Layer 安全套接层</p>\n<p>TLS：ransport Layer Security 安全传输层协议。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）</p>\n</blockquote>\n<h5 id=\"1-客户端发起HTTPS请求\"><a href=\"#1-客户端发起HTTPS请求\" class=\"headerlink\" title=\"1.客户端发起HTTPS请求\"></a>1.客户端发起HTTPS请求</h5><h5 id=\"2-服务端的配置\"><a href=\"#2-服务端的配置\" class=\"headerlink\" title=\"2.服务端的配置\"></a>2.服务端的配置</h5><blockquote>\n<p>采用HTTPS协议的服务器必须有一套数字证书，包含一对公钥和私钥。</p>\n</blockquote>\n<h5 id=\"3-传送证书\"><a href=\"#3-传送证书\" class=\"headerlink\" title=\"3.传送证书\"></a>3.传送证书</h5><blockquote>\n<p>该证书是公钥，包含证书的颁发机构、过期时间等等。</p>\n</blockquote>\n<h5 id=\"4-客户端解析证书\"><a href=\"#4-客户端解析证书\" class=\"headerlink\" title=\"4.客户端解析证书\"></a>4.客户端解析证书</h5><blockquote>\n<p>由客户端的TLS完成，首先验证公钥是否有效，比如颁发机构、过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密。</p>\n</blockquote>\n<h5 id=\"5-传送加密信息\"><a href=\"#5-传送加密信息\" class=\"headerlink\" title=\"5.传送加密信息\"></a>5.传送加密信息</h5><blockquote>\n<p>传送的是用证书加密后的随机值，目的是让服务端得到这个随机值，以后客户端和服务端通信就可以通过这个随机值来进行加密解密了。</p>\n</blockquote>\n<h5 id=\"6-服务端解密信息\"><a href=\"#6-服务端解密信息\" class=\"headerlink\" title=\"6.服务端解密信息\"></a>6.服务端解密信息</h5><blockquote>\n<p>服务端用私钥解密后，得到了客户端传过来的随机值（私钥），然后把内容通过该值进行对称加密。</p>\n</blockquote>\n<h5 id=\"7-传输加密后的信息\"><a href=\"#7-传输加密后的信息\" class=\"headerlink\" title=\"7.传输加密后的信息\"></a>7.传输加密后的信息</h5><h5 id=\"8-客户端解密信息\"><a href=\"#8-客户端解密信息\" class=\"headerlink\" title=\"8.客户端解密信息\"></a>8.客户端解密信息</h5><blockquote>\n<p>客户端用之前生成的私钥解密服务端传过来的信息，于是获取了解密后的内容。</p>\n</blockquote>\n<p><img src=\"/assets/blogImg/http-https.jpg\" alt=\"RSA密钥交换过程\"></p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li>HTTP协议是运行在TCP之上，所有传输的内容都是明文，客户端和服务端都无法验证对方的身份。</li>\n<li>HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS是运行在TCP之上。所有传输的内容都是经过加密，加密采用对称加密，但对称加密的密钥用服务器的证书进行了非对称加密。</li>\n</ul>\n<h3 id=\"TCP建立连接的三次握手\"><a href=\"#TCP建立连接的三次握手\" class=\"headerlink\" title=\"TCP建立连接的三次握手\"></a>TCP建立连接的三次握手</h3><blockquote>\n<p><strong>FLAGS字段：</strong></p>\n<p>SYN：表示建立连接。</p>\n<p>FIN：表示关闭连接。</p>\n<p>ACK：表示响应。</p>\n<p>PSH：表示有DATA数据传输。</p>\n<p>RST：表示连接重置。</p>\n</blockquote>\n<ul>\n<li>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机。</li>\n<li>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包。</li>\n<li>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li>\n</ul>\n<p>完成三次握手，主机A与主机B开始传送数据。</p>\n<h3 id=\"TCP断开连接的四次握手\"><a href=\"#TCP断开连接的四次握手\" class=\"headerlink\" title=\"TCP断开连接的四次握手\"></a>TCP断开连接的四次握手</h3><blockquote>\n<p>TCP断开连接有两种方式，第一种是正常的四次握手断开的，第二种是RST异常断开的</p>\n</blockquote>\n<h5 id=\"1-正常断开\"><a href=\"#1-正常断开\" class=\"headerlink\" title=\"1.正常断开\"></a>1.正常断开</h5><ul>\n<li>服务器80端口向41826端口发出FIN的断开连接请求。</li>\n<li>41826端口收到请求之后向服务器80端口回复了一个ACK。</li>\n<li>41826端口向服务器80端口发送断开请求FIN。</li>\n<li>服务器80向客户端发送断开的回复ACK。</li>\n</ul>\n<h5 id=\"2-异常断开\"><a href=\"#2-异常断开\" class=\"headerlink\" title=\"2.异常断开\"></a>2.异常断开</h5><ul>\n<li>服务器80端口向41826端口发出FIN的断开连接请求。</li>\n<li>41826端口收到请求之后向服务器80端口回复了一个ACK。</li>\n<li>41826端口向服务器80端口发送了GET请求。</li>\n<li>41826端口向服务器80端口发送断开请求FIN。</li>\n<li>服务器端口80因为原因没有确认客户端发送的确认请求而断开，因此返回了RST。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImg/HTTP-and-HTTPS/http-https-top.jpg\" alt=\"top\"></p>","more":"<blockquote>\n<p><strong>HTTP协议（HyperText Transfer Protocol，超文本传输协议）</strong>：是一种用于分布式、协作式和超媒体信息系统的应用层协议。目的是为了提供一种发布和接收HTML页面的方法。默认端口号为<code>80</code>。</p>\n<p><strong>HTTPS协议（Hypertext Transfer Protocol Secure）</strong>：是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。默认端口号为<code>443</code>。</p>\n<blockquote>\n<p>引自维基百科<a href=\"https://zh.wikipedia.org/wiki/超文本传输协议\" target=\"_blank\" rel=\"noopener\">HTTP</a>和<a href=\"https://zh.wikipedia.org/wiki/超文本传输安全协议\" target=\"_blank\" rel=\"noopener\">HTTPS</a></p>\n</blockquote>\n</blockquote>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><h5 id=\"1-协议概述\"><a href=\"#1-协议概述\" class=\"headerlink\" title=\"1. 协议概述\"></a>1. 协议概述</h5><p>​    由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p>\n<h5 id=\"2-URL\"><a href=\"#2-URL\" class=\"headerlink\" title=\"2. URL\"></a>2. URL</h5><blockquote>\n<p><strong>URL（Uniform / Universal Resource Locator）</strong>：统一资源定位符，是用于完整地描述Internet上网页和其他资源的地址的一种标识方法。</p>\n</blockquote>\n<p><strong>基本格式</strong>：<code>scheme://host[:port#]/path/…/[?query-string][#anchor]</code></p>\n<ul>\n<li><strong>scheme</strong>：协议(例如：http, https, ftp)</li>\n<li><strong>host</strong>：服务器的IP地址或者域名</li>\n<li><strong>port</strong>#：服务器的端口（如果是走协议默认端口，缺省端口80）</li>\n<li><strong>path</strong>：访问资源的路径</li>\n<li><strong>query-string</strong>：参数，发送给http服务器的数据</li>\n<li><strong>anchor</strong>：锚（跳转到网页的指定锚点位置）</li>\n</ul>\n<h5 id=\"3-请求方法（HTTP-1-1）\"><a href=\"#3-请求方法（HTTP-1-1）\" class=\"headerlink\" title=\"3. 请求方法（HTTP/1.1）\"></a>3. 请求方法（HTTP/1.1）</h5><ol>\n<li><strong>GET</strong>：请求指定的页面信息，并返回实体主体。参数显示在URL中。</li>\n<li><strong>HEAD</strong>：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。</li>\n<li><strong>POST</strong>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。参数在请求体中。</li>\n<li><strong>PUT</strong>：从客户端向服务器传达的数据取代指定的文档的内容。</li>\n<li><strong>DELETE</strong>：请求服务器删除指定的页面。</li>\n<li><strong>CONNECT</strong>：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li>\n<li><strong>OPTIONS</strong>：允许客户端查看服务器的性能。</li>\n<li><strong>TRACE</strong>：回显服务器收到的请求，主要用于测试或诊断。</li>\n</ol>\n<blockquote>\n<p>避免使用<code>GET</code>方式提交表单，因为有可能会导致安全问题。比如说在登陆表单中用Get方式，用户输入的用户名和密码将在地址栏中暴露无遗。</p>\n</blockquote>\n<h5 id=\"4-常用的请求报头\"><a href=\"#4-常用的请求报头\" class=\"headerlink\" title=\"4.常用的请求报头\"></a>4.常用的请求报头</h5><blockquote>\n<p>HTTP请求由四个部分组成，分别是：<strong>请求行</strong>、<strong>请求头部</strong>、<strong>空行</strong>、<strong>请求数据</strong>。</p>\n</blockquote>\n<h5 id=\"1-Host（主机和端口号）\"><a href=\"#1-Host（主机和端口号）\" class=\"headerlink\" title=\"1.Host（主机和端口号）\"></a>1.Host（主机和端口号）</h5><blockquote>\n<p><strong>Host</strong>：对应网址URL中的Web名称和端口号，用于指定被请求资源的Internet主机和端口号，通常属于URL的一部分。</p>\n</blockquote>\n<h5 id=\"2-Connection-链接类型\"><a href=\"#2-Connection-链接类型\" class=\"headerlink\" title=\"2.Connection (链接类型)\"></a>2.Connection (链接类型)</h5><blockquote>\n<p><strong>Connection</strong>：表示客户端与服务连接类型.</p>\n</blockquote>\n<ol>\n<li>Client 发起一个包含 <code>Connection:keep-alive</code> 的请求，HTTP/1.1使用 <code>keep-alive</code> 为默认值。</li>\n<li>Server收到请求后：<ul>\n<li>如果 Server 支持 <code>keep-alive</code>，回复一个包含 <code>Connection:keep-alive</code> 的响应，不关闭连接；</li>\n<li>如果 Server 不支持 <code>keep-alive</code>，回复一个包含 <code>Connection:close</code> 的响应，关闭连接。</li>\n</ul>\n</li>\n<li>如果client收到包含 <code>Connection:keep-alive</code> 的响应，向同一个连接发送下一个请求，直到一方主动关闭连接。</li>\n</ol>\n<blockquote>\n<p><code>keep-alive</code>在很多情况下能够重用连接，减少资源消耗，缩短响应时间，比如当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都去请求建立连接。</p>\n</blockquote>\n<h5 id=\"3-Upgrade-Insecure-Requests-升级为HTTPS请求\"><a href=\"#3-Upgrade-Insecure-Requests-升级为HTTPS请求\" class=\"headerlink\" title=\"3.Upgrade-Insecure-Requests (升级为HTTPS请求)\"></a>3.Upgrade-Insecure-Requests (升级为HTTPS请求)</h5><blockquote>\n<p><strong>Upgrade-Insecure-Requests</strong>：升级不安全的请求，意思是会在加载 http 资源时自动替换成 https 请求，让浏览器不再显示https页面中的http请求警报。</p>\n</blockquote>\n<h5 id=\"4-User-Agent-浏览器名称\"><a href=\"#4-User-Agent-浏览器名称\" class=\"headerlink\" title=\"4.User-Agent(浏览器名称)\"></a>4.User-Agent(浏览器名称)</h5><blockquote>\n<p><strong>User-Agent</strong>：是客户浏览器的名称。</p>\n</blockquote>\n<h5 id=\"5-Accept（传输文件类型）\"><a href=\"#5-Accept（传输文件类型）\" class=\"headerlink\" title=\"5.Accept（传输文件类型）\"></a>5.Accept（传输文件类型）</h5><blockquote>\n<p><strong>Accept</strong>：指浏览器或其他客户端可以接受的MIME（Multipurpose Internet Mail Extensions（多用途互联网邮件扩展））文件类型，服务器可以根据它判断并返回适当的文件格式。</p>\n</blockquote>\n<ul>\n<li><code>Accept: \\*/\\*</code>：表示什么都可以接收。</li>\n<li><code>Accept: image/gif</code>：表示客户端希望接收GIF图像格式的资源。</li>\n<li><code>Accept: text/html</code>：表示客户端希望接收html文本。</li>\n<li><code>Accept: text/html, application/xhtml+xml;q=0.9, image/*;q=0.8</code>：表示浏览器支持的MIME类型分别是html文本、xhtml和xml文档、所有的图像格式资源。</li>\n</ul>\n<blockquote>\n<p><code>q</code>是权重系数，范围0 =&lt; q &lt;= 1，<code>q</code>值越大，请求越倾向于获得其“<code>;</code>”之前的类型表示的内容。若没有指定<code>q</code>值，则默认为1，按照从左到右排序顺序；若被赋值为0，则用于表示浏览器不接收此内容类型。</p>\n<p><code>Text</code>：用于标准化的表示的文本信息，文本消息可以是多种字符集和或者多种格式的。</p>\n<p><code>Application</code>：用于传输应用程序数据或者二进制数据。</p>\n</blockquote>\n<h5 id=\"6-Referer（页面跳转处）\"><a href=\"#6-Referer（页面跳转处）\" class=\"headerlink\" title=\"6.Referer（页面跳转处）\"></a>6.Referer（页面跳转处）</h5><blockquote>\n<p><strong>Referer</strong>：表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的等。例如防盗链原理。</p>\n</blockquote>\n<h5 id=\"7-Accept-Encoding（文件编解码格式）\"><a href=\"#7-Accept-Encoding（文件编解码格式）\" class=\"headerlink\" title=\"7.Accept-Encoding（文件编解码格式）\"></a>7.Accept-Encoding（文件编解码格式）</h5><blockquote>\n<p><strong>Accept-Encoding</strong>：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式，许多情形下这可以减少大量的下载时间。</p>\n</blockquote>\n<ul>\n<li><code>Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0</code>：如果有多个Encoding同时匹配, 按照q值顺序排列，本例中按顺序支持 gzip, identity压缩编码，支持gzip的浏览器会返回经过gzip编码的HTML页面。 如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。</li>\n</ul>\n<h5 id=\"8-Accept-Language（语言种类）\"><a href=\"#8-Accept-Language（语言种类）\" class=\"headerlink\" title=\"8.Accept-Language（语言种类）\"></a>8.Accept-Language（语言种类）</h5><blockquote>\n<p><strong>Accept-Langeuage</strong>：指出浏览器可以接受的语言种类，如en或en-us指英语，zh或者zh-cn指中文，当服务器能够提供一种以上的语言版本时要用到。</p>\n</blockquote>\n<h5 id=\"9-Accept-Charset（字符编码）\"><a href=\"#9-Accept-Charset（字符编码）\" class=\"headerlink\" title=\"9.Accept-Charset（字符编码）\"></a>9.Accept-Charset（字符编码）</h5><blockquote>\n<p><strong>Accept-Charset</strong>：指出浏览器可以接受的字符编码。</p>\n</blockquote>\n<ul>\n<li><code>Accept-Charset:iso-8859-1,gb2312,utf-8</code>：本例中支持<code>ISO8859-1</code>、<code>gb2312</code>、<code>utf-8</code>编码。如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。</li>\n</ul>\n<h5 id=\"10-Cookie\"><a href=\"#10-Cookie\" class=\"headerlink\" title=\"10.Cookie\"></a>10.Cookie</h5><blockquote>\n<p><strong>Cookie</strong>：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。</p>\n</blockquote>\n<h5 id=\"11-Content-Type-（POST数据类型）\"><a href=\"#11-Content-Type-（POST数据类型）\" class=\"headerlink\" title=\"11.Content-Type （POST数据类型）\"></a>11.Content-Type （POST数据类型）</h5><blockquote>\n<p><strong>Content-Type</strong>：POST请求里用来表示的内容类型。</p>\n</blockquote>\n<ul>\n<li><code>Content-Type = Text/XML; charset=gb2312</code>：指明该请求中的消息体中包含的是纯文本的<code>XML</code>类型的数据，字符编码采用<code>gb2312</code>。</li>\n</ul>\n<h5 id=\"5-服务端常用的响应报头\"><a href=\"#5-服务端常用的响应报头\" class=\"headerlink\" title=\"5.服务端常用的响应报头\"></a>5.服务端常用的响应报头</h5><blockquote>\n<p>HTTP响应由四个部分组成，分别是： <strong>状态行</strong>、<strong>消息报头</strong>、<strong>空行</strong>、<strong>响应正文</strong>。</p>\n</blockquote>\n<h5 id=\"1-Cache-Control-must-revalidate-no-cache-private\"><a href=\"#1-Cache-Control-must-revalidate-no-cache-private\" class=\"headerlink\" title=\"1.Cache-Control: must-revalidate, no-cache, private\"></a>1.Cache-Control: must-revalidate, no-cache, private</h5><blockquote>\n<p>这个值告诉客户端，服务端不希望客户端缓存资源，在下次请求资源时，必须要重新请求服务器，不能从缓存中获取资源。</p>\n</blockquote>\n<ul>\n<li><code>Cache-Control</code>是响应头中很重要的信息，当客户端请求头中包含<code>Cache-Control: max-age = 0</code>请求，明确表示不会缓存服务器资源时，<code>Cache-Control</code>作为回应信息，通常会返回<code>no-cache</code>。</li>\n<li>当客户端在请求头中没有包含<code>Cache-Control</code>时，服务端往往会定不同的资源不同的缓存策略，比如说oschina在缓存图片资源的策略是<code>Cache-Control: max-age = 86400</code>，这个意思是，从当前时间开始，在86400秒的时间内，客户端可以直接从缓存中读取资源，而不需要向服务器请求。</li>\n</ul>\n<h5 id=\"2-Connection-keep-alive\"><a href=\"#2-Connection-keep-alive\" class=\"headerlink\" title=\"2.Connection: keep-alive\"></a>2.Connection: keep-alive</h5><blockquote>\n<p>这个字段作为回应客户端的<code>Connection: keep-alive</code>，告诉客户端服务器的TCP连接也是一个长连接，客户端可以继续使用这个TCP连接发送HTTP请求。</p>\n</blockquote>\n<h5 id=\"3-Content-Encoding-gzip\"><a href=\"#3-Content-Encoding-gzip\" class=\"headerlink\" title=\"3.Content-Encoding: gzip\"></a>3.Content-Encoding: gzip</h5><blockquote>\n<p>告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。</p>\n</blockquote>\n<h5 id=\"4-Content-Type-text-html-charset-UTF-8\"><a href=\"#4-Content-Type-text-html-charset-UTF-8\" class=\"headerlink\" title=\"4.Content-Type: text/html; charset = UTF-8\"></a>4.Content-Type: text/html; charset = UTF-8</h5><blockquote>\n<p>告诉客户端，资源文件的类型和字符编码，客户端通过UTF-8对资源进行解码，然后对资源进行html解析。</p>\n</blockquote>\n<h5 id=\"5-Date-Sun-21-Sep-2016-06-18-21-GMT\"><a href=\"#5-Date-Sun-21-Sep-2016-06-18-21-GMT\" class=\"headerlink\" title=\"5.Date: Sun, 21 Sep 2016 06:18:21 GMT\"></a>5.Date: Sun, 21 Sep 2016 06:18:21 GMT</h5><blockquote>\n<p>服务端发送资源时的服务器时间。</p>\n</blockquote>\n<h5 id=\"6-Expires-Sun-1-Jan-2000-01-00-00-GMT\"><a href=\"#6-Expires-Sun-1-Jan-2000-01-00-00-GMT\" class=\"headerlink\" title=\"6.Expires: Sun, 1 Jan 2000 01:00:00 GMT\"></a>6.Expires: Sun, 1 Jan 2000 01:00:00 GMT</h5><blockquote>\n<p>告诉客户端可以在这个时间前直接访问缓存。该值存在问题，客户端和服务器的时间不一定都是相同的，所有没有<code>Cache-Control: max-age = *</code> 准确。</p>\n</blockquote>\n<h5 id=\"7-Pragma-no-cache\"><a href=\"#7-Pragma-no-cache\" class=\"headerlink\" title=\"7.Pragma: no-cache\"></a>7.Pragma: no-cache</h5><blockquote>\n<p>含义与<code>Cache-Control</code>相同</p>\n</blockquote>\n<h5 id=\"8-Server-Tengine-1-4-6\"><a href=\"#8-Server-Tengine-1-4-6\" class=\"headerlink\" title=\"8.Server: Tengine/1.4.6\"></a>8.Server: Tengine/1.4.6</h5><blockquote>\n<p>服务器和相对应的版本，告诉客户端服务器的信息。</p>\n</blockquote>\n<h5 id=\"9-Transfer-Encoding-chunked\"><a href=\"#9-Transfer-Encoding-chunked\" class=\"headerlink\" title=\"9.Transfer-Encoding: chunked\"></a>9.Transfer-Encoding: chunked</h5><blockquote>\n<p>告诉客户端，服务器发送的资源方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。</p>\n</blockquote>\n<h5 id=\"10-Vary-Accept-Encoding\"><a href=\"#10-Vary-Accept-Encoding\" class=\"headerlink\" title=\"10.Vary: Accept-Encoding\"></a>10.Vary: Accept-Encoding</h5><blockquote>\n<p>告诉缓存服务器，缓存压缩文件和非压缩文件两个版本。</p>\n</blockquote>\n<h5 id=\"6-响应状态码\"><a href=\"#6-响应状态码\" class=\"headerlink\" title=\"6.响应状态码\"></a>6.响应状态码</h5><ul>\n<li><code>100～199</code>：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。</li>\n<li><code>200～299</code>：表示服务器成功接收请求并 已完成整个处理过程。常用<code>200</code>（OK请求成功）。</li>\n<li><code>300～399</code>：为完成请求，客户端需进一步细化请求。例如：请求的资源已经移动一个新地址，常用<code>302</code>（所请求的页面已经临时转移至新的URL）、<code>307</code>和<code>304</code>（使用缓存资源）。</li>\n<li><code>400～499</code>：客户端的请求有错误，常用<code>404</code>（服务器无法找到被请求的页面）、<code>403</code>（服务器拒绝访问，权限不够）。</li>\n<li><code>500～599</code>：服务端出现错误，常用<code>500</code>（请求未完成。服务器遇到不可预知的情况）。</li>\n</ul>\n<h5 id=\"7-Cookie和Session\"><a href=\"#7-Cookie和Session\" class=\"headerlink\" title=\"7.Cookie和Session\"></a>7.Cookie和Session</h5><blockquote>\n<p>服务器和客户端的交互仅限于请求/响应过程，结束之后便断开，在下一次请求时，服务器会认为新的客户端。为了维护他们之间的连接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息。</p>\n</blockquote>\n<ul>\n<li><code>Cooke</code>：通过在客户端记录的信息确定用户的身份。</li>\n<li><code>Session</code>：通过在服务端记录的信息确定用户的身份。</li>\n</ul>\n<h3 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h3><blockquote>\n<p>HTTPS = HTTP + SSL/TLS</p>\n<p>SSL：Secure Sockets Layer 安全套接层</p>\n<p>TLS：ransport Layer Security 安全传输层协议。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）</p>\n</blockquote>\n<h5 id=\"1-客户端发起HTTPS请求\"><a href=\"#1-客户端发起HTTPS请求\" class=\"headerlink\" title=\"1.客户端发起HTTPS请求\"></a>1.客户端发起HTTPS请求</h5><h5 id=\"2-服务端的配置\"><a href=\"#2-服务端的配置\" class=\"headerlink\" title=\"2.服务端的配置\"></a>2.服务端的配置</h5><blockquote>\n<p>采用HTTPS协议的服务器必须有一套数字证书，包含一对公钥和私钥。</p>\n</blockquote>\n<h5 id=\"3-传送证书\"><a href=\"#3-传送证书\" class=\"headerlink\" title=\"3.传送证书\"></a>3.传送证书</h5><blockquote>\n<p>该证书是公钥，包含证书的颁发机构、过期时间等等。</p>\n</blockquote>\n<h5 id=\"4-客户端解析证书\"><a href=\"#4-客户端解析证书\" class=\"headerlink\" title=\"4.客户端解析证书\"></a>4.客户端解析证书</h5><blockquote>\n<p>由客户端的TLS完成，首先验证公钥是否有效，比如颁发机构、过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密。</p>\n</blockquote>\n<h5 id=\"5-传送加密信息\"><a href=\"#5-传送加密信息\" class=\"headerlink\" title=\"5.传送加密信息\"></a>5.传送加密信息</h5><blockquote>\n<p>传送的是用证书加密后的随机值，目的是让服务端得到这个随机值，以后客户端和服务端通信就可以通过这个随机值来进行加密解密了。</p>\n</blockquote>\n<h5 id=\"6-服务端解密信息\"><a href=\"#6-服务端解密信息\" class=\"headerlink\" title=\"6.服务端解密信息\"></a>6.服务端解密信息</h5><blockquote>\n<p>服务端用私钥解密后，得到了客户端传过来的随机值（私钥），然后把内容通过该值进行对称加密。</p>\n</blockquote>\n<h5 id=\"7-传输加密后的信息\"><a href=\"#7-传输加密后的信息\" class=\"headerlink\" title=\"7.传输加密后的信息\"></a>7.传输加密后的信息</h5><h5 id=\"8-客户端解密信息\"><a href=\"#8-客户端解密信息\" class=\"headerlink\" title=\"8.客户端解密信息\"></a>8.客户端解密信息</h5><blockquote>\n<p>客户端用之前生成的私钥解密服务端传过来的信息，于是获取了解密后的内容。</p>\n</blockquote>\n<p><img src=\"/assets/blogImg/http-https.jpg\" alt=\"RSA密钥交换过程\"></p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li>HTTP协议是运行在TCP之上，所有传输的内容都是明文，客户端和服务端都无法验证对方的身份。</li>\n<li>HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS是运行在TCP之上。所有传输的内容都是经过加密，加密采用对称加密，但对称加密的密钥用服务器的证书进行了非对称加密。</li>\n</ul>\n<h3 id=\"TCP建立连接的三次握手\"><a href=\"#TCP建立连接的三次握手\" class=\"headerlink\" title=\"TCP建立连接的三次握手\"></a>TCP建立连接的三次握手</h3><blockquote>\n<p><strong>FLAGS字段：</strong></p>\n<p>SYN：表示建立连接。</p>\n<p>FIN：表示关闭连接。</p>\n<p>ACK：表示响应。</p>\n<p>PSH：表示有DATA数据传输。</p>\n<p>RST：表示连接重置。</p>\n</blockquote>\n<ul>\n<li>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机。</li>\n<li>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包。</li>\n<li>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li>\n</ul>\n<p>完成三次握手，主机A与主机B开始传送数据。</p>\n<h3 id=\"TCP断开连接的四次握手\"><a href=\"#TCP断开连接的四次握手\" class=\"headerlink\" title=\"TCP断开连接的四次握手\"></a>TCP断开连接的四次握手</h3><blockquote>\n<p>TCP断开连接有两种方式，第一种是正常的四次握手断开的，第二种是RST异常断开的</p>\n</blockquote>\n<h5 id=\"1-正常断开\"><a href=\"#1-正常断开\" class=\"headerlink\" title=\"1.正常断开\"></a>1.正常断开</h5><ul>\n<li>服务器80端口向41826端口发出FIN的断开连接请求。</li>\n<li>41826端口收到请求之后向服务器80端口回复了一个ACK。</li>\n<li>41826端口向服务器80端口发送断开请求FIN。</li>\n<li>服务器80向客户端发送断开的回复ACK。</li>\n</ul>\n<h5 id=\"2-异常断开\"><a href=\"#2-异常断开\" class=\"headerlink\" title=\"2.异常断开\"></a>2.异常断开</h5><ul>\n<li>服务器80端口向41826端口发出FIN的断开连接请求。</li>\n<li>41826端口收到请求之后向服务器80端口回复了一个ACK。</li>\n<li>41826端口向服务器80端口发送了GET请求。</li>\n<li>41826端口向服务器80端口发送断开请求FIN。</li>\n<li>服务器端口80因为原因没有确认客户端发送的确认请求而断开，因此返回了RST。</li>\n</ul>"},{"title":"约瑟夫环问题解法","declare":false,"comments":1,"reward":false,"date":"2018-05-07T02:23:31.000Z","_content":"\n> 问题描述：\n>\n> ​\t**约瑟夫环问题(Josephus)**\n>\n> - `n`个数字（0、1 … 、 n-1）排成一个圈。\n> - 从数字0开始，每次从 圆圏里删除第 `m`个数字，求圈里剩下的最后1个数字。\n\n### 解法\n\n- [解法一：环链表](#1)\n- [解法二：数学推理最优解](#2)\n\n<!-- more -->\n\n<h3 id=\"1\">解法一：环链表</h3>\n\n**思想：**建立一个有`n`个元素的循环链表，然后从链表头开始遍历并记数，如果计数`i==m`(i初始为1)踢出元素，继续循环，当当前元素与下一元素相同时退出循环。\n\n**算法实现(Swift版)：**\n\n```swift\nfunc JosephusSol_1(_ n : Int, _ m : Int) -> Int {\n    \n    // 判断输入数据的合法性\n    if (n < 1 || m < 1) {\n        return -1\n    }\n    \n    // 创建n个节点的环链表\n    let ringList = List()\n    for i in 0..<n {\n        ringList.appendToTail(i)\n    }\n    \n    var index = 0 // 要删除元素的位置\n    \n    while ringList.size() > 1 {\n        //只要移动(m-1)次就可移动到下1个要删除的元素上\n        index = (index + m - 1) % ringList.size()\n        ringList.remove(index: index)\n    }\n    \n    return (ringList.head?.val)!\n}\n```\n\n**结论：**时间效率低，需要消耗额外的空间创建环链表，空间复杂度 = O(n)。\n\n<h3 id=\"2\">解法二：数学推理最优解</h3>\n\n**思想：**令`f[i]`表示`i`个元素报`m`时推出最后胜利者的编号，最后的结果自然是`f[n]`。\n\n递推公式：\n`f[1]=0;`\n`f[i]=(f[i-1]+m)%i;  (i>1)`\n\n**算法实现(Swift版)：**\n\n```swift\nfunc JosephusSol_2(_ n : Int, _ m : Int) -> Int {\n    \n    // 判断输入数据的合法性\n    if (n < 1 || m < 1) {\n        return -1\n    }\n    \n    // s:移除之后的第一位编号\n    var s = 0\n    for i in 2...n {\n        s = (s + m) % i\n    }\n    return s\n}\n```\n\n**结论：**效率高，时间复杂度 = O(n)，空间复杂度 = O(1)。\n\n> 本文[Demo - Josephus.swift](https://github.com/liuzhida33/AlgorithmLearning.git)","source":"_posts/JosephusSolution.md","raw":"---\ntitle: 约瑟夫环问题解法\ndeclare: false\ncomments: true\nreward: false\ndate: 2018-05-07 10:23:31\ntags:\n- Algorithm\n---\n\n> 问题描述：\n>\n> ​\t**约瑟夫环问题(Josephus)**\n>\n> - `n`个数字（0、1 … 、 n-1）排成一个圈。\n> - 从数字0开始，每次从 圆圏里删除第 `m`个数字，求圈里剩下的最后1个数字。\n\n### 解法\n\n- [解法一：环链表](#1)\n- [解法二：数学推理最优解](#2)\n\n<!-- more -->\n\n<h3 id=\"1\">解法一：环链表</h3>\n\n**思想：**建立一个有`n`个元素的循环链表，然后从链表头开始遍历并记数，如果计数`i==m`(i初始为1)踢出元素，继续循环，当当前元素与下一元素相同时退出循环。\n\n**算法实现(Swift版)：**\n\n```swift\nfunc JosephusSol_1(_ n : Int, _ m : Int) -> Int {\n    \n    // 判断输入数据的合法性\n    if (n < 1 || m < 1) {\n        return -1\n    }\n    \n    // 创建n个节点的环链表\n    let ringList = List()\n    for i in 0..<n {\n        ringList.appendToTail(i)\n    }\n    \n    var index = 0 // 要删除元素的位置\n    \n    while ringList.size() > 1 {\n        //只要移动(m-1)次就可移动到下1个要删除的元素上\n        index = (index + m - 1) % ringList.size()\n        ringList.remove(index: index)\n    }\n    \n    return (ringList.head?.val)!\n}\n```\n\n**结论：**时间效率低，需要消耗额外的空间创建环链表，空间复杂度 = O(n)。\n\n<h3 id=\"2\">解法二：数学推理最优解</h3>\n\n**思想：**令`f[i]`表示`i`个元素报`m`时推出最后胜利者的编号，最后的结果自然是`f[n]`。\n\n递推公式：\n`f[1]=0;`\n`f[i]=(f[i-1]+m)%i;  (i>1)`\n\n**算法实现(Swift版)：**\n\n```swift\nfunc JosephusSol_2(_ n : Int, _ m : Int) -> Int {\n    \n    // 判断输入数据的合法性\n    if (n < 1 || m < 1) {\n        return -1\n    }\n    \n    // s:移除之后的第一位编号\n    var s = 0\n    for i in 2...n {\n        s = (s + m) % i\n    }\n    return s\n}\n```\n\n**结论：**效率高，时间复杂度 = O(n)，空间复杂度 = O(1)。\n\n> 本文[Demo - Josephus.swift](https://github.com/liuzhida33/AlgorithmLearning.git)","slug":"JosephusSolution","published":1,"updated":"2018-05-10T07:18:45.902Z","layout":"post","photos":[],"link":"","_id":"cjhebauxa000bofxfqugf35a3","content":"<blockquote>\n<p>问题描述：</p>\n<p>​    <strong>约瑟夫环问题(Josephus)</strong></p>\n<ul>\n<li><code>n</code>个数字（0、1 … 、 n-1）排成一个圈。</li>\n<li>从数字0开始，每次从 圆圏里删除第 <code>m</code>个数字，求圈里剩下的最后1个数字。</li>\n</ul>\n</blockquote>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><ul>\n<li><a href=\"#1\">解法一：环链表</a></li>\n<li><a href=\"#2\">解法二：数学推理最优解</a></li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1\">解法一：环链表</h3>\n\n<p><strong>思想：</strong>建立一个有<code>n</code>个元素的循环链表，然后从链表头开始遍历并记数，如果计数<code>i==m</code>(i初始为1)踢出元素，继续循环，当当前元素与下一元素相同时退出循环。</p>\n<p><strong>算法实现(Swift版)：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">JosephusSol_1</span><span class=\"params\">(<span class=\"number\">_</span> n : Int, <span class=\"number\">_</span> m : Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断输入数据的合法性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建n个节点的环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ringList = <span class=\"type\">List</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;n &#123;</span><br><span class=\"line\">        ringList.appendToTail(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span> <span class=\"comment\">// 要删除元素的位置</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ringList.size() &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//只要移动(m-1)次就可移动到下1个要删除的元素上</span></span><br><span class=\"line\">        index = (index + m - <span class=\"number\">1</span>) % ringList.size()</span><br><span class=\"line\">        ringList.remove(index: index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ringList.head?.val)!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结论：</strong>时间效率低，需要消耗额外的空间创建环链表，空间复杂度 = O(n)。</p>\n<h3 id=\"2\">解法二：数学推理最优解</h3>\n\n<p><strong>思想：</strong>令<code>f[i]</code>表示<code>i</code>个元素报<code>m</code>时推出最后胜利者的编号，最后的结果自然是<code>f[n]</code>。</p>\n<p>递推公式：<br><code>f[1]=0;</code><br><code>f[i]=(f[i-1]+m)%i;  (i&gt;1)</code></p>\n<p><strong>算法实现(Swift版)：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">JosephusSol_2</span><span class=\"params\">(<span class=\"number\">_</span> n : Int, <span class=\"number\">_</span> m : Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断输入数据的合法性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// s:移除之后的第一位编号</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">2</span>...n &#123;</span><br><span class=\"line\">        s = (s + m) % i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结论：</strong>效率高，时间复杂度 = O(n)，空间复杂度 = O(1)。</p>\n<blockquote>\n<p>本文<a href=\"https://github.com/liuzhida33/AlgorithmLearning.git\" target=\"_blank\" rel=\"noopener\">Demo - Josephus.swift</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>问题描述：</p>\n<p>​    <strong>约瑟夫环问题(Josephus)</strong></p>\n<ul>\n<li><code>n</code>个数字（0、1 … 、 n-1）排成一个圈。</li>\n<li>从数字0开始，每次从 圆圏里删除第 <code>m</code>个数字，求圈里剩下的最后1个数字。</li>\n</ul>\n</blockquote>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><ul>\n<li><a href=\"#1\">解法一：环链表</a></li>\n<li><a href=\"#2\">解法二：数学推理最优解</a></li>\n</ul>","more":"<h3 id=\"1\">解法一：环链表</h3>\n\n<p><strong>思想：</strong>建立一个有<code>n</code>个元素的循环链表，然后从链表头开始遍历并记数，如果计数<code>i==m</code>(i初始为1)踢出元素，继续循环，当当前元素与下一元素相同时退出循环。</p>\n<p><strong>算法实现(Swift版)：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">JosephusSol_1</span><span class=\"params\">(<span class=\"number\">_</span> n : Int, <span class=\"number\">_</span> m : Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断输入数据的合法性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建n个节点的环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ringList = <span class=\"type\">List</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;n &#123;</span><br><span class=\"line\">        ringList.appendToTail(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span> <span class=\"comment\">// 要删除元素的位置</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ringList.size() &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//只要移动(m-1)次就可移动到下1个要删除的元素上</span></span><br><span class=\"line\">        index = (index + m - <span class=\"number\">1</span>) % ringList.size()</span><br><span class=\"line\">        ringList.remove(index: index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ringList.head?.val)!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结论：</strong>时间效率低，需要消耗额外的空间创建环链表，空间复杂度 = O(n)。</p>\n<h3 id=\"2\">解法二：数学推理最优解</h3>\n\n<p><strong>思想：</strong>令<code>f[i]</code>表示<code>i</code>个元素报<code>m</code>时推出最后胜利者的编号，最后的结果自然是<code>f[n]</code>。</p>\n<p>递推公式：<br><code>f[1]=0;</code><br><code>f[i]=(f[i-1]+m)%i;  (i&gt;1)</code></p>\n<p><strong>算法实现(Swift版)：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">JosephusSol_2</span><span class=\"params\">(<span class=\"number\">_</span> n : Int, <span class=\"number\">_</span> m : Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断输入数据的合法性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// s:移除之后的第一位编号</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">2</span>...n &#123;</span><br><span class=\"line\">        s = (s + m) % i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结论：</strong>效率高，时间复杂度 = O(n)，空间复杂度 = O(1)。</p>\n<blockquote>\n<p>本文<a href=\"https://github.com/liuzhida33/AlgorithmLearning.git\" target=\"_blank\" rel=\"noopener\">Demo - Josephus.swift</a></p>\n</blockquote>"},{"layout":"post","title":"我遇到的一些面试题（2）","date":"2018-04-20T03:01:00.000Z","comments":0,"toc":true,"_content":"![top](/assets/blogImg/InterviewQuestions/interview-top.jpg)\n\n<!-- more -->\n\n### 1. KVC的底层实现？\n\n当一个对象调用`setValue`方法时，方法内部会做如下处理：\n\n- 检查是否存在相应key的`setter`方法，如果存在，就调用`setter`方法。\n- 如果`setter`方法不存在，就会查找与`key`相同名称并且带下划线的成员属性，如果有，则直接给成员属性赋值。\n- 如果没有找到`_key`，就会查找相同名称的属性`key`，如果有就直接赋值。\n- 如果还没找到，则调用`valueForUnderfinekey:`和`setValue:forUnderfinedkey:`方法。这些方法默认抛出异常，可根据需要进行重写。\n\n### 2. KVO的底层实现？\n\n- `KVO`基于`runtime`机制实现。\n\n- 使用`isa`混写（`isa-swizzling`），当一个对象发生改变时，系统会自动生成一个类，继承自该类的属性制，在这个类的`setter`方法里面，调用`[super setX:x]`、`[self willChangeValueForKey:@\"x\"]`  和`[self didChangeValueForKey:@\"x\"]`，这两个方法内部会主动调用监听者内部的 `- (void)observeValueForKeyPath`这个方法。\n\n\n### 3. 数据库建表时索引有什么用（优点和缺点）？\n\n**优点：**\n\n- 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\n- 可以大大加快数据的检索速度。\n- 可以加速表与表之间的链接。\n- 使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。\n- 可以在查询过程中，使用优化隐藏器，提高系统的性能。\n\n**缺点：**\n\n- 创建索引和维护索引需要耗费时间，这种时间随着数据量的增加而增加。\n- 索引需要占用物理内存。\n- 当对表中的数据进行增加、删除和修改时，需要动态维护相应的索引，降低了数据的维护速度。\n\n### 4. 通过[UIImage imageNamed:] 成的对象 么时候被释放?\n\n如果没有使用局部释放池，并且在主线程，则是当前主线程Runloop一次循环结束前释放。\n\n### 5. selector、SEL、Method和IMP分别指什么？\n\n- selector：`selector`是一个方法的名称。\n- SEL：`SEL`是类成员方法的指针，只是一个方法编号。\n- Method：`Method`是一个组合体，包含了方法名和实现。\n- IMP：`IMP`是一个函数指针，保存了方法的地址。\n\n### 6. isa指针的作用？\n\n当我们向一个对象发送消息时，`runtime`会根据这个对象的`isa`指针找到该对象所属的类。\n\n### 7. 多线程中栈与堆是公有的还是私有的？\n\n在多线程环境下，每个线程拥有一个栈和一个程序计数器。栈和程序计数器用来保存线程的执行历史和线程的执行状态，是线程私有的资源。其他的资源（比如堆、地址空间、全局变量）是由同一个进程内的多个线程共享。\n\n### 8. @property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？\n\n`get`方法中的同步锁@`synchronized`还有，`set`方法不会有。\n\n### 9. Session 和 Cookie 的区别。\n\n- `session`在服务器端，`cookie` 在客户端（浏览器）。\n- `session` 默认被存在在服务器的一个文件里（不是内存）。\n- `session` 的运行依赖 `session id`，而 `session id` 是存在 `cookie` 中的，也就是说，如果浏览器禁用了 `cookie` ，同时 `session` 也会失效（但是可以通过其它方式实现，比如在 `url` 中传递 `session_id`）。\n- `session` 可以放在 文件、数据库、或内存中都可以。\n- 用户验证这种场合一般会用 `session`。\n\n","source":"_posts/InterviewQuestions-20180420.md","raw":"---\nlayout: post\ntitle: \"我遇到的一些面试题（2）\"\ndate: 2018-04-020 11:01\ncomments: false\ntoc: true\ntags: \n\n\t- 面试\n---\n![top](/assets/blogImg/InterviewQuestions/interview-top.jpg)\n\n<!-- more -->\n\n### 1. KVC的底层实现？\n\n当一个对象调用`setValue`方法时，方法内部会做如下处理：\n\n- 检查是否存在相应key的`setter`方法，如果存在，就调用`setter`方法。\n- 如果`setter`方法不存在，就会查找与`key`相同名称并且带下划线的成员属性，如果有，则直接给成员属性赋值。\n- 如果没有找到`_key`，就会查找相同名称的属性`key`，如果有就直接赋值。\n- 如果还没找到，则调用`valueForUnderfinekey:`和`setValue:forUnderfinedkey:`方法。这些方法默认抛出异常，可根据需要进行重写。\n\n### 2. KVO的底层实现？\n\n- `KVO`基于`runtime`机制实现。\n\n- 使用`isa`混写（`isa-swizzling`），当一个对象发生改变时，系统会自动生成一个类，继承自该类的属性制，在这个类的`setter`方法里面，调用`[super setX:x]`、`[self willChangeValueForKey:@\"x\"]`  和`[self didChangeValueForKey:@\"x\"]`，这两个方法内部会主动调用监听者内部的 `- (void)observeValueForKeyPath`这个方法。\n\n\n### 3. 数据库建表时索引有什么用（优点和缺点）？\n\n**优点：**\n\n- 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\n- 可以大大加快数据的检索速度。\n- 可以加速表与表之间的链接。\n- 使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。\n- 可以在查询过程中，使用优化隐藏器，提高系统的性能。\n\n**缺点：**\n\n- 创建索引和维护索引需要耗费时间，这种时间随着数据量的增加而增加。\n- 索引需要占用物理内存。\n- 当对表中的数据进行增加、删除和修改时，需要动态维护相应的索引，降低了数据的维护速度。\n\n### 4. 通过[UIImage imageNamed:] 成的对象 么时候被释放?\n\n如果没有使用局部释放池，并且在主线程，则是当前主线程Runloop一次循环结束前释放。\n\n### 5. selector、SEL、Method和IMP分别指什么？\n\n- selector：`selector`是一个方法的名称。\n- SEL：`SEL`是类成员方法的指针，只是一个方法编号。\n- Method：`Method`是一个组合体，包含了方法名和实现。\n- IMP：`IMP`是一个函数指针，保存了方法的地址。\n\n### 6. isa指针的作用？\n\n当我们向一个对象发送消息时，`runtime`会根据这个对象的`isa`指针找到该对象所属的类。\n\n### 7. 多线程中栈与堆是公有的还是私有的？\n\n在多线程环境下，每个线程拥有一个栈和一个程序计数器。栈和程序计数器用来保存线程的执行历史和线程的执行状态，是线程私有的资源。其他的资源（比如堆、地址空间、全局变量）是由同一个进程内的多个线程共享。\n\n### 8. @property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？\n\n`get`方法中的同步锁@`synchronized`还有，`set`方法不会有。\n\n### 9. Session 和 Cookie 的区别。\n\n- `session`在服务器端，`cookie` 在客户端（浏览器）。\n- `session` 默认被存在在服务器的一个文件里（不是内存）。\n- `session` 的运行依赖 `session id`，而 `session id` 是存在 `cookie` 中的，也就是说，如果浏览器禁用了 `cookie` ，同时 `session` 也会失效（但是可以通过其它方式实现，比如在 `url` 中传递 `session_id`）。\n- `session` 可以放在 文件、数据库、或内存中都可以。\n- 用户验证这种场合一般会用 `session`。\n\n","slug":"InterviewQuestions-20180420","published":1,"updated":"2018-04-29T07:05:23.161Z","photos":[],"link":"","_id":"cjhebauxe000dofxfnlqoh2hc","content":"<p><img src=\"/assets/blogImg/InterviewQuestions/interview-top.jpg\" alt=\"top\"></p>\n<a id=\"more\"></a>\n<h3 id=\"1-KVC的底层实现？\"><a href=\"#1-KVC的底层实现？\" class=\"headerlink\" title=\"1. KVC的底层实现？\"></a>1. KVC的底层实现？</h3><p>当一个对象调用<code>setValue</code>方法时，方法内部会做如下处理：</p>\n<ul>\n<li>检查是否存在相应key的<code>setter</code>方法，如果存在，就调用<code>setter</code>方法。</li>\n<li>如果<code>setter</code>方法不存在，就会查找与<code>key</code>相同名称并且带下划线的成员属性，如果有，则直接给成员属性赋值。</li>\n<li>如果没有找到<code>_key</code>，就会查找相同名称的属性<code>key</code>，如果有就直接赋值。</li>\n<li>如果还没找到，则调用<code>valueForUnderfinekey:</code>和<code>setValue:forUnderfinedkey:</code>方法。这些方法默认抛出异常，可根据需要进行重写。</li>\n</ul>\n<h3 id=\"2-KVO的底层实现？\"><a href=\"#2-KVO的底层实现？\" class=\"headerlink\" title=\"2. KVO的底层实现？\"></a>2. KVO的底层实现？</h3><ul>\n<li><p><code>KVO</code>基于<code>runtime</code>机制实现。</p>\n</li>\n<li><p>使用<code>isa</code>混写（<code>isa-swizzling</code>），当一个对象发生改变时，系统会自动生成一个类，继承自该类的属性制，在这个类的<code>setter</code>方法里面，调用<code>[super setX:x]</code>、<code>[self willChangeValueForKey:@&quot;x&quot;]</code>  和<code>[self didChangeValueForKey:@&quot;x&quot;]</code>，这两个方法内部会主动调用监听者内部的 <code>- (void)observeValueForKeyPath</code>这个方法。</p>\n</li>\n</ul>\n<h3 id=\"3-数据库建表时索引有什么用（优点和缺点）？\"><a href=\"#3-数据库建表时索引有什么用（优点和缺点）？\" class=\"headerlink\" title=\"3. 数据库建表时索引有什么用（优点和缺点）？\"></a>3. 数据库建表时索引有什么用（优点和缺点）？</h3><p><strong>优点：</strong></p>\n<ul>\n<li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li>\n<li>可以大大加快数据的检索速度。</li>\n<li>可以加速表与表之间的链接。</li>\n<li>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。</li>\n<li>可以在查询过程中，使用优化隐藏器，提高系统的性能。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>创建索引和维护索引需要耗费时间，这种时间随着数据量的增加而增加。</li>\n<li>索引需要占用物理内存。</li>\n<li>当对表中的数据进行增加、删除和修改时，需要动态维护相应的索引，降低了数据的维护速度。</li>\n</ul>\n<h3 id=\"4-通过-UIImage-imageNamed-成的对象-么时候被释放\"><a href=\"#4-通过-UIImage-imageNamed-成的对象-么时候被释放\" class=\"headerlink\" title=\"4. 通过[UIImage imageNamed:] 成的对象 么时候被释放?\"></a>4. 通过[UIImage imageNamed:] 成的对象 么时候被释放?</h3><p>如果没有使用局部释放池，并且在主线程，则是当前主线程Runloop一次循环结束前释放。</p>\n<h3 id=\"5-selector、SEL、Method和IMP分别指什么？\"><a href=\"#5-selector、SEL、Method和IMP分别指什么？\" class=\"headerlink\" title=\"5. selector、SEL、Method和IMP分别指什么？\"></a>5. selector、SEL、Method和IMP分别指什么？</h3><ul>\n<li>selector：<code>selector</code>是一个方法的名称。</li>\n<li>SEL：<code>SEL</code>是类成员方法的指针，只是一个方法编号。</li>\n<li>Method：<code>Method</code>是一个组合体，包含了方法名和实现。</li>\n<li>IMP：<code>IMP</code>是一个函数指针，保存了方法的地址。</li>\n</ul>\n<h3 id=\"6-isa指针的作用？\"><a href=\"#6-isa指针的作用？\" class=\"headerlink\" title=\"6. isa指针的作用？\"></a>6. isa指针的作用？</h3><p>当我们向一个对象发送消息时，<code>runtime</code>会根据这个对象的<code>isa</code>指针找到该对象所属的类。</p>\n<h3 id=\"7-多线程中栈与堆是公有的还是私有的？\"><a href=\"#7-多线程中栈与堆是公有的还是私有的？\" class=\"headerlink\" title=\"7. 多线程中栈与堆是公有的还是私有的？\"></a>7. 多线程中栈与堆是公有的还是私有的？</h3><p>在多线程环境下，每个线程拥有一个栈和一个程序计数器。栈和程序计数器用来保存线程的执行历史和线程的执行状态，是线程私有的资源。其他的资源（比如堆、地址空间、全局变量）是由同一个进程内的多个线程共享。</p>\n<h3 id=\"8-property-atomic-strong-NSString-str-如果重写了str的set方法，那atomic还有效吗？\"><a href=\"#8-property-atomic-strong-NSString-str-如果重写了str的set方法，那atomic还有效吗？\" class=\"headerlink\" title=\"8. @property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？\"></a>8. @property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？</h3><p><code>get</code>方法中的同步锁@<code>synchronized</code>还有，<code>set</code>方法不会有。</p>\n<h3 id=\"9-Session-和-Cookie-的区别。\"><a href=\"#9-Session-和-Cookie-的区别。\" class=\"headerlink\" title=\"9. Session 和 Cookie 的区别。\"></a>9. Session 和 Cookie 的区别。</h3><ul>\n<li><code>session</code>在服务器端，<code>cookie</code> 在客户端（浏览器）。</li>\n<li><code>session</code> 默认被存在在服务器的一个文件里（不是内存）。</li>\n<li><code>session</code> 的运行依赖 <code>session id</code>，而 <code>session id</code> 是存在 <code>cookie</code> 中的，也就是说，如果浏览器禁用了 <code>cookie</code> ，同时 <code>session</code> 也会失效（但是可以通过其它方式实现，比如在 <code>url</code> 中传递 <code>session_id</code>）。</li>\n<li><code>session</code> 可以放在 文件、数据库、或内存中都可以。</li>\n<li>用户验证这种场合一般会用 <code>session</code>。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImg/InterviewQuestions/interview-top.jpg\" alt=\"top\"></p>","more":"<h3 id=\"1-KVC的底层实现？\"><a href=\"#1-KVC的底层实现？\" class=\"headerlink\" title=\"1. KVC的底层实现？\"></a>1. KVC的底层实现？</h3><p>当一个对象调用<code>setValue</code>方法时，方法内部会做如下处理：</p>\n<ul>\n<li>检查是否存在相应key的<code>setter</code>方法，如果存在，就调用<code>setter</code>方法。</li>\n<li>如果<code>setter</code>方法不存在，就会查找与<code>key</code>相同名称并且带下划线的成员属性，如果有，则直接给成员属性赋值。</li>\n<li>如果没有找到<code>_key</code>，就会查找相同名称的属性<code>key</code>，如果有就直接赋值。</li>\n<li>如果还没找到，则调用<code>valueForUnderfinekey:</code>和<code>setValue:forUnderfinedkey:</code>方法。这些方法默认抛出异常，可根据需要进行重写。</li>\n</ul>\n<h3 id=\"2-KVO的底层实现？\"><a href=\"#2-KVO的底层实现？\" class=\"headerlink\" title=\"2. KVO的底层实现？\"></a>2. KVO的底层实现？</h3><ul>\n<li><p><code>KVO</code>基于<code>runtime</code>机制实现。</p>\n</li>\n<li><p>使用<code>isa</code>混写（<code>isa-swizzling</code>），当一个对象发生改变时，系统会自动生成一个类，继承自该类的属性制，在这个类的<code>setter</code>方法里面，调用<code>[super setX:x]</code>、<code>[self willChangeValueForKey:@&quot;x&quot;]</code>  和<code>[self didChangeValueForKey:@&quot;x&quot;]</code>，这两个方法内部会主动调用监听者内部的 <code>- (void)observeValueForKeyPath</code>这个方法。</p>\n</li>\n</ul>\n<h3 id=\"3-数据库建表时索引有什么用（优点和缺点）？\"><a href=\"#3-数据库建表时索引有什么用（优点和缺点）？\" class=\"headerlink\" title=\"3. 数据库建表时索引有什么用（优点和缺点）？\"></a>3. 数据库建表时索引有什么用（优点和缺点）？</h3><p><strong>优点：</strong></p>\n<ul>\n<li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li>\n<li>可以大大加快数据的检索速度。</li>\n<li>可以加速表与表之间的链接。</li>\n<li>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。</li>\n<li>可以在查询过程中，使用优化隐藏器，提高系统的性能。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>创建索引和维护索引需要耗费时间，这种时间随着数据量的增加而增加。</li>\n<li>索引需要占用物理内存。</li>\n<li>当对表中的数据进行增加、删除和修改时，需要动态维护相应的索引，降低了数据的维护速度。</li>\n</ul>\n<h3 id=\"4-通过-UIImage-imageNamed-成的对象-么时候被释放\"><a href=\"#4-通过-UIImage-imageNamed-成的对象-么时候被释放\" class=\"headerlink\" title=\"4. 通过[UIImage imageNamed:] 成的对象 么时候被释放?\"></a>4. 通过[UIImage imageNamed:] 成的对象 么时候被释放?</h3><p>如果没有使用局部释放池，并且在主线程，则是当前主线程Runloop一次循环结束前释放。</p>\n<h3 id=\"5-selector、SEL、Method和IMP分别指什么？\"><a href=\"#5-selector、SEL、Method和IMP分别指什么？\" class=\"headerlink\" title=\"5. selector、SEL、Method和IMP分别指什么？\"></a>5. selector、SEL、Method和IMP分别指什么？</h3><ul>\n<li>selector：<code>selector</code>是一个方法的名称。</li>\n<li>SEL：<code>SEL</code>是类成员方法的指针，只是一个方法编号。</li>\n<li>Method：<code>Method</code>是一个组合体，包含了方法名和实现。</li>\n<li>IMP：<code>IMP</code>是一个函数指针，保存了方法的地址。</li>\n</ul>\n<h3 id=\"6-isa指针的作用？\"><a href=\"#6-isa指针的作用？\" class=\"headerlink\" title=\"6. isa指针的作用？\"></a>6. isa指针的作用？</h3><p>当我们向一个对象发送消息时，<code>runtime</code>会根据这个对象的<code>isa</code>指针找到该对象所属的类。</p>\n<h3 id=\"7-多线程中栈与堆是公有的还是私有的？\"><a href=\"#7-多线程中栈与堆是公有的还是私有的？\" class=\"headerlink\" title=\"7. 多线程中栈与堆是公有的还是私有的？\"></a>7. 多线程中栈与堆是公有的还是私有的？</h3><p>在多线程环境下，每个线程拥有一个栈和一个程序计数器。栈和程序计数器用来保存线程的执行历史和线程的执行状态，是线程私有的资源。其他的资源（比如堆、地址空间、全局变量）是由同一个进程内的多个线程共享。</p>\n<h3 id=\"8-property-atomic-strong-NSString-str-如果重写了str的set方法，那atomic还有效吗？\"><a href=\"#8-property-atomic-strong-NSString-str-如果重写了str的set方法，那atomic还有效吗？\" class=\"headerlink\" title=\"8. @property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？\"></a>8. @property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？</h3><p><code>get</code>方法中的同步锁@<code>synchronized</code>还有，<code>set</code>方法不会有。</p>\n<h3 id=\"9-Session-和-Cookie-的区别。\"><a href=\"#9-Session-和-Cookie-的区别。\" class=\"headerlink\" title=\"9. Session 和 Cookie 的区别。\"></a>9. Session 和 Cookie 的区别。</h3><ul>\n<li><code>session</code>在服务器端，<code>cookie</code> 在客户端（浏览器）。</li>\n<li><code>session</code> 默认被存在在服务器的一个文件里（不是内存）。</li>\n<li><code>session</code> 的运行依赖 <code>session id</code>，而 <code>session id</code> 是存在 <code>cookie</code> 中的，也就是说，如果浏览器禁用了 <code>cookie</code> ，同时 <code>session</code> 也会失效（但是可以通过其它方式实现，比如在 <code>url</code> 中传递 <code>session_id</code>）。</li>\n<li><code>session</code> 可以放在 文件、数据库、或内存中都可以。</li>\n<li>用户验证这种场合一般会用 <code>session</code>。</li>\n</ul>"},{"title":"Web开发那些好用的库","declare":true,"comments":1,"date":"2018-04-27T16:27:37.000Z","_content":"\n> 该文章记录了一些可能用的前端代码或开源库，方便有需要可以查阅。\n\n### Javascript\n\n##### 1. 可以实现ppt、动画、切换等功能\n\n- [impress](https://github.com/impress/impress.js)\n\n##### 2. 鼠标划过Div显示3D特效\n\n- [jQuery Hover3d](https://github.com/ariona/hover3d)\n\n\n<!-- more -->","source":"_posts/Web-Dev-Tools.md","raw":"---\ntitle: Web开发那些好用的库\ndeclare: true\ncomments: true\ndate: 2018-04-28 00:27:37\ntags:\n- Javascript\n- CSS\n---\n\n> 该文章记录了一些可能用的前端代码或开源库，方便有需要可以查阅。\n\n### Javascript\n\n##### 1. 可以实现ppt、动画、切换等功能\n\n- [impress](https://github.com/impress/impress.js)\n\n##### 2. 鼠标划过Div显示3D特效\n\n- [jQuery Hover3d](https://github.com/ariona/hover3d)\n\n\n<!-- more -->","slug":"Web-Dev-Tools","published":1,"updated":"2018-05-05T03:02:47.550Z","layout":"post","photos":[],"link":"","_id":"cjhebauxg000gofxfmou8adia","content":"<blockquote>\n<p>该文章记录了一些可能用的前端代码或开源库，方便有需要可以查阅。</p>\n</blockquote>\n<h3 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h3><h5 id=\"1-可以实现ppt、动画、切换等功能\"><a href=\"#1-可以实现ppt、动画、切换等功能\" class=\"headerlink\" title=\"1. 可以实现ppt、动画、切换等功能\"></a>1. 可以实现ppt、动画、切换等功能</h5><ul>\n<li><a href=\"https://github.com/impress/impress.js\" target=\"_blank\" rel=\"noopener\">impress</a></li>\n</ul>\n<h5 id=\"2-鼠标划过Div显示3D特效\"><a href=\"#2-鼠标划过Div显示3D特效\" class=\"headerlink\" title=\"2. 鼠标划过Div显示3D特效\"></a>2. 鼠标划过Div显示3D特效</h5><ul>\n<li><a href=\"https://github.com/ariona/hover3d\" target=\"_blank\" rel=\"noopener\">jQuery Hover3d</a></li>\n</ul>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<blockquote>\n<p>该文章记录了一些可能用的前端代码或开源库，方便有需要可以查阅。</p>\n</blockquote>\n<h3 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h3><h5 id=\"1-可以实现ppt、动画、切换等功能\"><a href=\"#1-可以实现ppt、动画、切换等功能\" class=\"headerlink\" title=\"1. 可以实现ppt、动画、切换等功能\"></a>1. 可以实现ppt、动画、切换等功能</h5><ul>\n<li><a href=\"https://github.com/impress/impress.js\" target=\"_blank\" rel=\"noopener\">impress</a></li>\n</ul>\n<h5 id=\"2-鼠标划过Div显示3D特效\"><a href=\"#2-鼠标划过Div显示3D特效\" class=\"headerlink\" title=\"2. 鼠标划过Div显示3D特效\"></a>2. 鼠标划过Div显示3D特效</h5><ul>\n<li><a href=\"https://github.com/ariona/hover3d\" target=\"_blank\" rel=\"noopener\">jQuery Hover3d</a></li>\n</ul>","more":""},{"layout":"post","title":"我遇到的一些面试题（1）","date":"2018-04-14T02:36:00.000Z","comments":0,"toc":true,"_content":"![top](/assets/blogImg/InterviewQuestions/interview-top.jpg)\n\n<!-- more -->\n\n### 1. 一个objc对象的isa的指针指向什么？\n\nisa指针指向它的类对象，类对象的isa指针指向该类对象元对象(meta class)，元对象的isa指针指向根元对象，根元对象的isa指针指向自身。\n\n> **类对象：**当向一个class发送消息时，class本身是一个对象，未编译时是一个结构体。\n\n### 2. 类对象的superclass指针指向什么？ \n\n类对象的superclass指针指向它的父类对象，如果该类为根类（NSObject），则指向nil。\n\n### 3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？\n\n- **堆区（heap）：**由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收。堆空间饿分配总是动态的，地址由低向高增长。\n\n- **栈区（stack）：**由编译器自动分配释放。栈空间分静态分配和动态分配两种，静态分配由编译器完成，动态分配由alloca函数分配（自动释放）,地址由高向低增长。\n- **静态区（全局区）（static）：**全局变量和静态变量的存储放在一起的，初始化的全局变量和静态变量是放在一块内存区域，未初始化的全局变量和静态变量放在相邻的另一块内存区域。程序结束后由系统自动释放。\n- **常量区：**由系统自动释放。\n- **代码区：**存放函数的二进制代码，只准许读取，不允许写入。\n\n### 4.  如何用GCD同步若干个异步调用？\n\n使用dispatch_group_enter和dispatch_group_level处理异步任务的同步。\n\n```objective-c\ndispatch_queue_t queue = dispatch_queue_create(\"com.queue.demo\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n\ndispatch_group_async(group, queue, ^{\n    /*模拟异步耗时操作 */\n    dispatch_group_enter(group);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        sleep(3);\n        NSLog(@\"任务1\");\n        dispatch_group_leave(group);\n    });\n});\ndispatch_group_async(group, queue, ^{\n    /*模拟异步耗时操作 */\n    dispatch_group_enter(group);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        sleep(1);\n        NSLog(@\"任务2\");\n        dispatch_group_leave(group);\n    });\n});\ndispatch_group_async(group, queue, ^{\n    /*模拟异步耗时操作 */\n    dispatch_group_enter(group);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        sleep(2);\n        NSLog(@\"任务3\");\n        dispatch_group_leave(group);\n    });\n});\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n    // 任务完成\n    NSLog(@\"任务完成\");\n});\n```\n\n### 5. 并发与并行的概念\n\n并发指能够让多个任务在逻辑上同时执行的程序设计，而并行则是指在物理上真正的同时执行。并行是并发的子集，属于并发的一种实现方式。通过时间片轮转实现的多任务同时执行是通过调度算法实现逻辑上的同步执行，属于并发。通过多核 CPU 实现并发时，多任务是真正物理上的同时执行，才属于并行。\n\n> [iOS中的多线程技术](http://xuyafei.cn/post/draft/ios-thread)\n\n### 6.集合对象的深复制实现方式 \n\n- 第一种方法：通过归解档生成两份完全独立的对象，但是前提是对象必须支持 NSCoding 协议。\n- 第二种方法：使用`initWithSet:copyItems:`第二个参数为`YES`实现深复制，集合里的每个对象都会收到 `copyWithZone:` 消息。如果集合里的对象遵循 `NSCopying` 协议，那么对象就会被深复制到新的集合。\n\n> [iOS 集合的深复制与浅复制](https://www.zybuluo.com/MicroCai/note/50592)\n\n### 7. `@autoreleasepool`如何实现的？释放时机是什么？什么时候需要显式使用@autoreleasepool{}？ \n\n- 对 autorelease 分别执行 push和 pop 操作。销毁对象时执行release操作。\n- 在没有手加Autorelease Pool的情况下，Autorelease对象是在当前的`runloop`迭代结束时释放的，而它能够释放的原因是**系统在每个runloop迭代中都加入了自动释放池Push和Pop**。\n- 1. 写非UI framework的程序时，需要自己管理对象生存周期。\n  2. autorelease 触发时机发生在下一次runloop的时候。\n  3. 自己创建的线程。\n\n> [黑幕背后的Autorelease](https://blog.sunnyxx.com/2014/10/15/behind-autorelease/)\n\n### 8. iOS事件是如何响应的？\n\niOS获取到了用户的“点击”这一行为后，把这个事件封装成UITouch和UIEvent形式的实例，然后找到当前运行的程序，并逐级寻找能够响应这个事件的对象，直到没有响应者响应。这个过程就叫做事件的响应链。\n\n> 示例：`UIButton` -> `UIView` -> `UIViewController` -> `UIWindow` -> `UIApplication` -> `AppDelegate`\n\n### 9. 数组和链表的区别？\n\n- 数组静态分配内存，链表动态分配内存。\n- 数组在内存中连续，链表不连续。\n- 数组元素在栈区，链表元素在堆区。\n- 数组元素利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度为O(n)。\n- 数组插入或删除元素的时间复杂度为O(n)，链表的时间复杂度为O(1)。\n\n\n","source":"_posts/InterviewQuestions-20180414.md","raw":"---\nlayout: post\ntitle: \"我遇到的一些面试题（1）\"\ndate: 2018-04-014 10:36\ncomments: false\ntoc: true\ntags: \n\n\t- 面试\n---\n![top](/assets/blogImg/InterviewQuestions/interview-top.jpg)\n\n<!-- more -->\n\n### 1. 一个objc对象的isa的指针指向什么？\n\nisa指针指向它的类对象，类对象的isa指针指向该类对象元对象(meta class)，元对象的isa指针指向根元对象，根元对象的isa指针指向自身。\n\n> **类对象：**当向一个class发送消息时，class本身是一个对象，未编译时是一个结构体。\n\n### 2. 类对象的superclass指针指向什么？ \n\n类对象的superclass指针指向它的父类对象，如果该类为根类（NSObject），则指向nil。\n\n### 3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？\n\n- **堆区（heap）：**由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收。堆空间饿分配总是动态的，地址由低向高增长。\n\n- **栈区（stack）：**由编译器自动分配释放。栈空间分静态分配和动态分配两种，静态分配由编译器完成，动态分配由alloca函数分配（自动释放）,地址由高向低增长。\n- **静态区（全局区）（static）：**全局变量和静态变量的存储放在一起的，初始化的全局变量和静态变量是放在一块内存区域，未初始化的全局变量和静态变量放在相邻的另一块内存区域。程序结束后由系统自动释放。\n- **常量区：**由系统自动释放。\n- **代码区：**存放函数的二进制代码，只准许读取，不允许写入。\n\n### 4.  如何用GCD同步若干个异步调用？\n\n使用dispatch_group_enter和dispatch_group_level处理异步任务的同步。\n\n```objective-c\ndispatch_queue_t queue = dispatch_queue_create(\"com.queue.demo\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n\ndispatch_group_async(group, queue, ^{\n    /*模拟异步耗时操作 */\n    dispatch_group_enter(group);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        sleep(3);\n        NSLog(@\"任务1\");\n        dispatch_group_leave(group);\n    });\n});\ndispatch_group_async(group, queue, ^{\n    /*模拟异步耗时操作 */\n    dispatch_group_enter(group);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        sleep(1);\n        NSLog(@\"任务2\");\n        dispatch_group_leave(group);\n    });\n});\ndispatch_group_async(group, queue, ^{\n    /*模拟异步耗时操作 */\n    dispatch_group_enter(group);\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        sleep(2);\n        NSLog(@\"任务3\");\n        dispatch_group_leave(group);\n    });\n});\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n    // 任务完成\n    NSLog(@\"任务完成\");\n});\n```\n\n### 5. 并发与并行的概念\n\n并发指能够让多个任务在逻辑上同时执行的程序设计，而并行则是指在物理上真正的同时执行。并行是并发的子集，属于并发的一种实现方式。通过时间片轮转实现的多任务同时执行是通过调度算法实现逻辑上的同步执行，属于并发。通过多核 CPU 实现并发时，多任务是真正物理上的同时执行，才属于并行。\n\n> [iOS中的多线程技术](http://xuyafei.cn/post/draft/ios-thread)\n\n### 6.集合对象的深复制实现方式 \n\n- 第一种方法：通过归解档生成两份完全独立的对象，但是前提是对象必须支持 NSCoding 协议。\n- 第二种方法：使用`initWithSet:copyItems:`第二个参数为`YES`实现深复制，集合里的每个对象都会收到 `copyWithZone:` 消息。如果集合里的对象遵循 `NSCopying` 协议，那么对象就会被深复制到新的集合。\n\n> [iOS 集合的深复制与浅复制](https://www.zybuluo.com/MicroCai/note/50592)\n\n### 7. `@autoreleasepool`如何实现的？释放时机是什么？什么时候需要显式使用@autoreleasepool{}？ \n\n- 对 autorelease 分别执行 push和 pop 操作。销毁对象时执行release操作。\n- 在没有手加Autorelease Pool的情况下，Autorelease对象是在当前的`runloop`迭代结束时释放的，而它能够释放的原因是**系统在每个runloop迭代中都加入了自动释放池Push和Pop**。\n- 1. 写非UI framework的程序时，需要自己管理对象生存周期。\n  2. autorelease 触发时机发生在下一次runloop的时候。\n  3. 自己创建的线程。\n\n> [黑幕背后的Autorelease](https://blog.sunnyxx.com/2014/10/15/behind-autorelease/)\n\n### 8. iOS事件是如何响应的？\n\niOS获取到了用户的“点击”这一行为后，把这个事件封装成UITouch和UIEvent形式的实例，然后找到当前运行的程序，并逐级寻找能够响应这个事件的对象，直到没有响应者响应。这个过程就叫做事件的响应链。\n\n> 示例：`UIButton` -> `UIView` -> `UIViewController` -> `UIWindow` -> `UIApplication` -> `AppDelegate`\n\n### 9. 数组和链表的区别？\n\n- 数组静态分配内存，链表动态分配内存。\n- 数组在内存中连续，链表不连续。\n- 数组元素在栈区，链表元素在堆区。\n- 数组元素利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度为O(n)。\n- 数组插入或删除元素的时间复杂度为O(n)，链表的时间复杂度为O(1)。\n\n\n","slug":"InterviewQuestions-20180414","published":1,"updated":"2018-04-29T07:05:12.738Z","photos":[],"link":"","_id":"cjhebauxj000hofxf4r8cpo4z","content":"<p><img src=\"/assets/blogImg/InterviewQuestions/interview-top.jpg\" alt=\"top\"></p>\n<a id=\"more\"></a>\n<h3 id=\"1-一个objc对象的isa的指针指向什么？\"><a href=\"#1-一个objc对象的isa的指针指向什么？\" class=\"headerlink\" title=\"1. 一个objc对象的isa的指针指向什么？\"></a>1. 一个objc对象的isa的指针指向什么？</h3><p>isa指针指向它的类对象，类对象的isa指针指向该类对象元对象(meta class)，元对象的isa指针指向根元对象，根元对象的isa指针指向自身。</p>\n<blockquote>\n<p><strong>类对象：</strong>当向一个class发送消息时，class本身是一个对象，未编译时是一个结构体。</p>\n</blockquote>\n<h3 id=\"2-类对象的superclass指针指向什么？\"><a href=\"#2-类对象的superclass指针指向什么？\" class=\"headerlink\" title=\"2. 类对象的superclass指针指向什么？\"></a>2. 类对象的superclass指针指向什么？</h3><p>类对象的superclass指针指向它的父类对象，如果该类为根类（NSObject），则指向nil。</p>\n<h3 id=\"3-一个由C-C-编译的程序占用的内存（内存分配方式）有哪几种？\"><a href=\"#3-一个由C-C-编译的程序占用的内存（内存分配方式）有哪几种？\" class=\"headerlink\" title=\"3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？\"></a>3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？</h3><ul>\n<li><p><strong>堆区（heap）：</strong>由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收。堆空间饿分配总是动态的，地址由低向高增长。</p>\n</li>\n<li><p><strong>栈区（stack）：</strong>由编译器自动分配释放。栈空间分静态分配和动态分配两种，静态分配由编译器完成，动态分配由alloca函数分配（自动释放）,地址由高向低增长。</p>\n</li>\n<li><strong>静态区（全局区）（static）：</strong>全局变量和静态变量的存储放在一起的，初始化的全局变量和静态变量是放在一块内存区域，未初始化的全局变量和静态变量放在相邻的另一块内存区域。程序结束后由系统自动释放。</li>\n<li><strong>常量区：</strong>由系统自动释放。</li>\n<li><strong>代码区：</strong>存放函数的二进制代码，只准许读取，不允许写入。</li>\n</ul>\n<h3 id=\"4-如何用GCD同步若干个异步调用？\"><a href=\"#4-如何用GCD同步若干个异步调用？\" class=\"headerlink\" title=\"4.  如何用GCD同步若干个异步调用？\"></a>4.  如何用GCD同步若干个异步调用？</h3><p>使用dispatch_group_enter和dispatch_group_level处理异步任务的同步。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;com.queue.demo&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">dispatch_group_t group = dispatch_group_create();</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    /*模拟异步耗时操作 */</span><br><span class=\"line\">    dispatch_group_enter(group);</span><br><span class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">        sleep(3);</span><br><span class=\"line\">        NSLog(@&quot;任务1&quot;);</span><br><span class=\"line\">        dispatch_group_leave(group);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    /*模拟异步耗时操作 */</span><br><span class=\"line\">    dispatch_group_enter(group);</span><br><span class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">        sleep(1);</span><br><span class=\"line\">        NSLog(@&quot;任务2&quot;);</span><br><span class=\"line\">        dispatch_group_leave(group);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    /*模拟异步耗时操作 */</span><br><span class=\"line\">    dispatch_group_enter(group);</span><br><span class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">        sleep(2);</span><br><span class=\"line\">        NSLog(@&quot;任务3&quot;);</span><br><span class=\"line\">        dispatch_group_leave(group);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    // 任务完成</span><br><span class=\"line\">    NSLog(@&quot;任务完成&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-并发与并行的概念\"><a href=\"#5-并发与并行的概念\" class=\"headerlink\" title=\"5. 并发与并行的概念\"></a>5. 并发与并行的概念</h3><p>并发指能够让多个任务在逻辑上同时执行的程序设计，而并行则是指在物理上真正的同时执行。并行是并发的子集，属于并发的一种实现方式。通过时间片轮转实现的多任务同时执行是通过调度算法实现逻辑上的同步执行，属于并发。通过多核 CPU 实现并发时，多任务是真正物理上的同时执行，才属于并行。</p>\n<blockquote>\n<p><a href=\"http://xuyafei.cn/post/draft/ios-thread\" target=\"_blank\" rel=\"noopener\">iOS中的多线程技术</a></p>\n</blockquote>\n<h3 id=\"6-集合对象的深复制实现方式\"><a href=\"#6-集合对象的深复制实现方式\" class=\"headerlink\" title=\"6.集合对象的深复制实现方式\"></a>6.集合对象的深复制实现方式</h3><ul>\n<li>第一种方法：通过归解档生成两份完全独立的对象，但是前提是对象必须支持 NSCoding 协议。</li>\n<li>第二种方法：使用<code>initWithSet:copyItems:</code>第二个参数为<code>YES</code>实现深复制，集合里的每个对象都会收到 <code>copyWithZone:</code> 消息。如果集合里的对象遵循 <code>NSCopying</code> 协议，那么对象就会被深复制到新的集合。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">iOS 集合的深复制与浅复制</a></p>\n</blockquote>\n<h3 id=\"7-autoreleasepool如何实现的？释放时机是什么？什么时候需要显式使用-autoreleasepool-？\"><a href=\"#7-autoreleasepool如何实现的？释放时机是什么？什么时候需要显式使用-autoreleasepool-？\" class=\"headerlink\" title=\"7. @autoreleasepool如何实现的？释放时机是什么？什么时候需要显式使用@autoreleasepool{}？\"></a>7. <code>@autoreleasepool</code>如何实现的？释放时机是什么？什么时候需要显式使用@autoreleasepool{}？</h3><ul>\n<li>对 autorelease 分别执行 push和 pop 操作。销毁对象时执行release操作。</li>\n<li>在没有手加Autorelease Pool的情况下，Autorelease对象是在当前的<code>runloop</code>迭代结束时释放的，而它能够释放的原因是<strong>系统在每个runloop迭代中都加入了自动释放池Push和Pop</strong>。</li>\n<li><ol>\n<li>写非UI framework的程序时，需要自己管理对象生存周期。</li>\n<li>autorelease 触发时机发生在下一次runloop的时候。</li>\n<li>自己创建的线程。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.sunnyxx.com/2014/10/15/behind-autorelease/\" target=\"_blank\" rel=\"noopener\">黑幕背后的Autorelease</a></p>\n</blockquote>\n<h3 id=\"8-iOS事件是如何响应的？\"><a href=\"#8-iOS事件是如何响应的？\" class=\"headerlink\" title=\"8. iOS事件是如何响应的？\"></a>8. iOS事件是如何响应的？</h3><p>iOS获取到了用户的“点击”这一行为后，把这个事件封装成UITouch和UIEvent形式的实例，然后找到当前运行的程序，并逐级寻找能够响应这个事件的对象，直到没有响应者响应。这个过程就叫做事件的响应链。</p>\n<blockquote>\n<p>示例：<code>UIButton</code> -&gt; <code>UIView</code> -&gt; <code>UIViewController</code> -&gt; <code>UIWindow</code> -&gt; <code>UIApplication</code> -&gt; <code>AppDelegate</code></p>\n</blockquote>\n<h3 id=\"9-数组和链表的区别？\"><a href=\"#9-数组和链表的区别？\" class=\"headerlink\" title=\"9. 数组和链表的区别？\"></a>9. 数组和链表的区别？</h3><ul>\n<li>数组静态分配内存，链表动态分配内存。</li>\n<li>数组在内存中连续，链表不连续。</li>\n<li>数组元素在栈区，链表元素在堆区。</li>\n<li>数组元素利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度为O(n)。</li>\n<li>数组插入或删除元素的时间复杂度为O(n)，链表的时间复杂度为O(1)。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImg/InterviewQuestions/interview-top.jpg\" alt=\"top\"></p>","more":"<h3 id=\"1-一个objc对象的isa的指针指向什么？\"><a href=\"#1-一个objc对象的isa的指针指向什么？\" class=\"headerlink\" title=\"1. 一个objc对象的isa的指针指向什么？\"></a>1. 一个objc对象的isa的指针指向什么？</h3><p>isa指针指向它的类对象，类对象的isa指针指向该类对象元对象(meta class)，元对象的isa指针指向根元对象，根元对象的isa指针指向自身。</p>\n<blockquote>\n<p><strong>类对象：</strong>当向一个class发送消息时，class本身是一个对象，未编译时是一个结构体。</p>\n</blockquote>\n<h3 id=\"2-类对象的superclass指针指向什么？\"><a href=\"#2-类对象的superclass指针指向什么？\" class=\"headerlink\" title=\"2. 类对象的superclass指针指向什么？\"></a>2. 类对象的superclass指针指向什么？</h3><p>类对象的superclass指针指向它的父类对象，如果该类为根类（NSObject），则指向nil。</p>\n<h3 id=\"3-一个由C-C-编译的程序占用的内存（内存分配方式）有哪几种？\"><a href=\"#3-一个由C-C-编译的程序占用的内存（内存分配方式）有哪几种？\" class=\"headerlink\" title=\"3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？\"></a>3. 一个由C/C++编译的程序占用的内存（内存分配方式）有哪几种？</h3><ul>\n<li><p><strong>堆区（heap）：</strong>由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收。堆空间饿分配总是动态的，地址由低向高增长。</p>\n</li>\n<li><p><strong>栈区（stack）：</strong>由编译器自动分配释放。栈空间分静态分配和动态分配两种，静态分配由编译器完成，动态分配由alloca函数分配（自动释放）,地址由高向低增长。</p>\n</li>\n<li><strong>静态区（全局区）（static）：</strong>全局变量和静态变量的存储放在一起的，初始化的全局变量和静态变量是放在一块内存区域，未初始化的全局变量和静态变量放在相邻的另一块内存区域。程序结束后由系统自动释放。</li>\n<li><strong>常量区：</strong>由系统自动释放。</li>\n<li><strong>代码区：</strong>存放函数的二进制代码，只准许读取，不允许写入。</li>\n</ul>\n<h3 id=\"4-如何用GCD同步若干个异步调用？\"><a href=\"#4-如何用GCD同步若干个异步调用？\" class=\"headerlink\" title=\"4.  如何用GCD同步若干个异步调用？\"></a>4.  如何用GCD同步若干个异步调用？</h3><p>使用dispatch_group_enter和dispatch_group_level处理异步任务的同步。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;com.queue.demo&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">dispatch_group_t group = dispatch_group_create();</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    /*模拟异步耗时操作 */</span><br><span class=\"line\">    dispatch_group_enter(group);</span><br><span class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">        sleep(3);</span><br><span class=\"line\">        NSLog(@&quot;任务1&quot;);</span><br><span class=\"line\">        dispatch_group_leave(group);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    /*模拟异步耗时操作 */</span><br><span class=\"line\">    dispatch_group_enter(group);</span><br><span class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">        sleep(1);</span><br><span class=\"line\">        NSLog(@&quot;任务2&quot;);</span><br><span class=\"line\">        dispatch_group_leave(group);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    /*模拟异步耗时操作 */</span><br><span class=\"line\">    dispatch_group_enter(group);</span><br><span class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">        sleep(2);</span><br><span class=\"line\">        NSLog(@&quot;任务3&quot;);</span><br><span class=\"line\">        dispatch_group_leave(group);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    // 任务完成</span><br><span class=\"line\">    NSLog(@&quot;任务完成&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-并发与并行的概念\"><a href=\"#5-并发与并行的概念\" class=\"headerlink\" title=\"5. 并发与并行的概念\"></a>5. 并发与并行的概念</h3><p>并发指能够让多个任务在逻辑上同时执行的程序设计，而并行则是指在物理上真正的同时执行。并行是并发的子集，属于并发的一种实现方式。通过时间片轮转实现的多任务同时执行是通过调度算法实现逻辑上的同步执行，属于并发。通过多核 CPU 实现并发时，多任务是真正物理上的同时执行，才属于并行。</p>\n<blockquote>\n<p><a href=\"http://xuyafei.cn/post/draft/ios-thread\" target=\"_blank\" rel=\"noopener\">iOS中的多线程技术</a></p>\n</blockquote>\n<h3 id=\"6-集合对象的深复制实现方式\"><a href=\"#6-集合对象的深复制实现方式\" class=\"headerlink\" title=\"6.集合对象的深复制实现方式\"></a>6.集合对象的深复制实现方式</h3><ul>\n<li>第一种方法：通过归解档生成两份完全独立的对象，但是前提是对象必须支持 NSCoding 协议。</li>\n<li>第二种方法：使用<code>initWithSet:copyItems:</code>第二个参数为<code>YES</code>实现深复制，集合里的每个对象都会收到 <code>copyWithZone:</code> 消息。如果集合里的对象遵循 <code>NSCopying</code> 协议，那么对象就会被深复制到新的集合。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">iOS 集合的深复制与浅复制</a></p>\n</blockquote>\n<h3 id=\"7-autoreleasepool如何实现的？释放时机是什么？什么时候需要显式使用-autoreleasepool-？\"><a href=\"#7-autoreleasepool如何实现的？释放时机是什么？什么时候需要显式使用-autoreleasepool-？\" class=\"headerlink\" title=\"7. @autoreleasepool如何实现的？释放时机是什么？什么时候需要显式使用@autoreleasepool{}？\"></a>7. <code>@autoreleasepool</code>如何实现的？释放时机是什么？什么时候需要显式使用@autoreleasepool{}？</h3><ul>\n<li>对 autorelease 分别执行 push和 pop 操作。销毁对象时执行release操作。</li>\n<li>在没有手加Autorelease Pool的情况下，Autorelease对象是在当前的<code>runloop</code>迭代结束时释放的，而它能够释放的原因是<strong>系统在每个runloop迭代中都加入了自动释放池Push和Pop</strong>。</li>\n<li><ol>\n<li>写非UI framework的程序时，需要自己管理对象生存周期。</li>\n<li>autorelease 触发时机发生在下一次runloop的时候。</li>\n<li>自己创建的线程。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.sunnyxx.com/2014/10/15/behind-autorelease/\" target=\"_blank\" rel=\"noopener\">黑幕背后的Autorelease</a></p>\n</blockquote>\n<h3 id=\"8-iOS事件是如何响应的？\"><a href=\"#8-iOS事件是如何响应的？\" class=\"headerlink\" title=\"8. iOS事件是如何响应的？\"></a>8. iOS事件是如何响应的？</h3><p>iOS获取到了用户的“点击”这一行为后，把这个事件封装成UITouch和UIEvent形式的实例，然后找到当前运行的程序，并逐级寻找能够响应这个事件的对象，直到没有响应者响应。这个过程就叫做事件的响应链。</p>\n<blockquote>\n<p>示例：<code>UIButton</code> -&gt; <code>UIView</code> -&gt; <code>UIViewController</code> -&gt; <code>UIWindow</code> -&gt; <code>UIApplication</code> -&gt; <code>AppDelegate</code></p>\n</blockquote>\n<h3 id=\"9-数组和链表的区别？\"><a href=\"#9-数组和链表的区别？\" class=\"headerlink\" title=\"9. 数组和链表的区别？\"></a>9. 数组和链表的区别？</h3><ul>\n<li>数组静态分配内存，链表动态分配内存。</li>\n<li>数组在内存中连续，链表不连续。</li>\n<li>数组元素在栈区，链表元素在堆区。</li>\n<li>数组元素利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度为O(n)。</li>\n<li>数组插入或删除元素的时间复杂度为O(n)，链表的时间复杂度为O(1)。</li>\n</ul>"},{"title":"NSDictionary内部实现","declare":false,"comments":1,"reward":false,"date":"2018-04-29T07:00:09.000Z","_content":"\n> `NSDictionary`（字典）是使用 `hash`表来实现`key`和`value`之间的映射和存储的， `hash`函数设计的好坏影响着数据的查找访问效率。数据在`hash`表中分布的越均匀，其访问效率越高。而在`Objective-C`中，通常都是利用`NSString` 来作为键值，其内部使用的`hash`函数也是通过使用 `NSString`对象作为键值来保证数据的各个节点在`hash`表中均匀分布。\n\n<!-- more -->\n\n### 思考\n\n首先，看下给一个`Dictionary`赋值的方法：\n\n```objective-c\n- (void)setObject:(id)anObject forKey:(id <NSCopying>)aKey; \n```\n\n从这个方法中可以知道， 要作为 `Key` 值，必须遵循 `NSCopying` 协议。也就是说在`NSDictionary`内部，会对 `aKey` 对象 `copy` 一份新的。而  `anObject` 对象在其内部是作为强引用（`retain`或`strong`)。所以在`MRC`下，向该方法发送消息之后，我们会向`anObject`发送 `release` 消息进行释放。\n\n既然知道了作为 `key` 值，必须遵循 `NSCopying` 协议，说明除了 `NSString` 对象之外，我们还可以使用其他类型对象来作为 `NSDictionary` 的 key值。不过这还不够，作为 `key` 值，该类型还必须继承于 `NSObject` 并且要重载一下两个方法：\n\n```objective-c\n- (NSUInteger)hash; \n- (BOOL)isEqual:(id)object;  \n```\n\n其中，`hash` 方法是用来计算该对象的 `hash` 值，最终的 hash 值决定了该对象在 hash 表中存储的位置。使用`isEqual`方法来通过`hash`值查找对象在`hash`表中的位置。\n\n因此，`NSDictionary`在调用`setObject: forKey:` 后，内部会去调用 `key` 对象的 `hash` 方法确定 `object` 在`hash`表内的入口位置，然后会调用 `isEqual :` 来确定该值是否已经存在于 `NSDictionary`中。\n\n### 内部实现\n\n`NSDictionary`是使用`NSMapTable`实现。`NSMapTable`同样是一个`key－value`的容器。\n\n```objective-c\ntypedef struct {\n   NSMapTable        *table;\n   NSInteger                i;\n   struct _NSMapNode *j;\n} NSMapEnumerator;\n```\n\n上述结构体描述了遍历一个`NSMapTable`时的一个指针对象，其中包含`table`对象自身的指针，计数值，和节点指针。\n\n```objective-c\ntypedef struct {\n   NSUInteger (*hash)(NSMapTable *table,const void *);\n   BOOL (*isEqual)(NSMapTable *table,const void *,const void *);\n   void (*retain)(NSMapTable *table,const void *);\n   void (*release)(NSMapTable *table,void *);\n   NSString  *(*describe)(NSMapTable *table,const void *);\n   const void *notAKeyMarker;\n} NSMapTableKeyCallBacks;\n```\n\n上述结构体中存放的是几个函数指针，用于计算`key`的`hash`值，判断`key`是否相等，`retain`，`release`操作。\n\n```objective-c\ntypedef struct {\n   void       (*retain)(NSMapTable *table,const void *);\n   void       (*release)(NSMapTable *table,void *);\n   NSString  *(*describe)(NSMapTable *table, const void *);\n} NSMapTableValueCallBacks;\n```\n\n上述存放的三个函数指针，定义在对`NSMaptable`插入一对`key－value`时，对`value`对象的操作。\n\n```objective-c\n@interface NSMapTable : NSObject {\n   NSMapTableKeyCallBacks   *keyCallBacks;\n   NSMapTableValueCallBacks *valueCallBacks;\n   NSUInteger             count;\n   NSUInteger             nBuckets;\n   struct _NSMapNode  **buckets;\n}\n```\n\n上面是`NSMtabtable`真正的描述，可以看出来`NSMapTable`是一个**哈希＋链表**的数据结构，因此在`NSMapTable`中插入或者删除一对对象时寻找的时间是`O（1）＋O（m）`，m最坏时可能为n。\n\n- O（1）：为对`key`进行`hash`得到`bucket`的位置\n- O（m）：遍历该`bucket`后面冲突的`value`，通过链表连接起来。\n\n因此：`NSDictionary`中的`Key - Value`遍历时是无序的，至如按照什么样的顺序，跟`hash`函数相关。`NSMapTable`使用`NSObject`的哈希函数。\n\n```objective-c\n-(NSUInteger)hash {\n   return (NSUInteger)self>>4;\n}\n```\n\n上述是`NSObject`的哈希值的计算方式，简单通过移位实现。右移4位，左边补0.\n\n因为对象大多存于堆中，地址相差4位应该很正常。\n\n### setValue和setObject的区别：\n\n```objective-c\n- (void)setObject:(ObjectType)anObject forKey:(KeyType <NSCopying>)aKey;\n- (void)setValue:(nullable ObjectType)value forKey:(NSString *)key;\n```\n\n首先：`setObject: ForKey:`是NSMutableDictionary特有的；`setValue: ForKey:`是KVC的主要方法。\n\n- `setValue: ForKey:`的`value`是可以为`nil`的（但是当`value`为`nil`的时候，方法内部会有`if`判断自动调用`removeObject：forKey`方法）；\n\n  `setObject: ForKey:`的`value`则不可以为`nil`。\n\n- `setValue: ForKey:`的`key`必须是不为`nil`的字符串类型；\n  `setObject: ForKey:`的`key`可以是不为`nil`的所有继承`NSCopying`的类型。\n\n\n\n> ⚠️本篇文章是为了方便自己查阅整理，如有冒犯原作者，可以联系本人删除。\n>\n> 参考链接：\n>\n> [ 1 ] : [https://blog.csdn.net/linshaolie/article/details/41494303](https://blog.csdn.net/linshaolie/article/details/41494303)\n> [ 2 ] : [https://www.cnblogs.com/doudouyoutang/p/4379068.html](https://www.cnblogs.com/doudouyoutang/p/4379068.html)\n\n","source":"_posts/NSDictionary-Principle-of-realization.md","raw":"---\ntitle: NSDictionary内部实现\ndeclare: false\ncomments: true\nreward: false\ndate: 2018-04-29 15:00:09\ntags:\n- NSDictionary\n---\n\n> `NSDictionary`（字典）是使用 `hash`表来实现`key`和`value`之间的映射和存储的， `hash`函数设计的好坏影响着数据的查找访问效率。数据在`hash`表中分布的越均匀，其访问效率越高。而在`Objective-C`中，通常都是利用`NSString` 来作为键值，其内部使用的`hash`函数也是通过使用 `NSString`对象作为键值来保证数据的各个节点在`hash`表中均匀分布。\n\n<!-- more -->\n\n### 思考\n\n首先，看下给一个`Dictionary`赋值的方法：\n\n```objective-c\n- (void)setObject:(id)anObject forKey:(id <NSCopying>)aKey; \n```\n\n从这个方法中可以知道， 要作为 `Key` 值，必须遵循 `NSCopying` 协议。也就是说在`NSDictionary`内部，会对 `aKey` 对象 `copy` 一份新的。而  `anObject` 对象在其内部是作为强引用（`retain`或`strong`)。所以在`MRC`下，向该方法发送消息之后，我们会向`anObject`发送 `release` 消息进行释放。\n\n既然知道了作为 `key` 值，必须遵循 `NSCopying` 协议，说明除了 `NSString` 对象之外，我们还可以使用其他类型对象来作为 `NSDictionary` 的 key值。不过这还不够，作为 `key` 值，该类型还必须继承于 `NSObject` 并且要重载一下两个方法：\n\n```objective-c\n- (NSUInteger)hash; \n- (BOOL)isEqual:(id)object;  \n```\n\n其中，`hash` 方法是用来计算该对象的 `hash` 值，最终的 hash 值决定了该对象在 hash 表中存储的位置。使用`isEqual`方法来通过`hash`值查找对象在`hash`表中的位置。\n\n因此，`NSDictionary`在调用`setObject: forKey:` 后，内部会去调用 `key` 对象的 `hash` 方法确定 `object` 在`hash`表内的入口位置，然后会调用 `isEqual :` 来确定该值是否已经存在于 `NSDictionary`中。\n\n### 内部实现\n\n`NSDictionary`是使用`NSMapTable`实现。`NSMapTable`同样是一个`key－value`的容器。\n\n```objective-c\ntypedef struct {\n   NSMapTable        *table;\n   NSInteger                i;\n   struct _NSMapNode *j;\n} NSMapEnumerator;\n```\n\n上述结构体描述了遍历一个`NSMapTable`时的一个指针对象，其中包含`table`对象自身的指针，计数值，和节点指针。\n\n```objective-c\ntypedef struct {\n   NSUInteger (*hash)(NSMapTable *table,const void *);\n   BOOL (*isEqual)(NSMapTable *table,const void *,const void *);\n   void (*retain)(NSMapTable *table,const void *);\n   void (*release)(NSMapTable *table,void *);\n   NSString  *(*describe)(NSMapTable *table,const void *);\n   const void *notAKeyMarker;\n} NSMapTableKeyCallBacks;\n```\n\n上述结构体中存放的是几个函数指针，用于计算`key`的`hash`值，判断`key`是否相等，`retain`，`release`操作。\n\n```objective-c\ntypedef struct {\n   void       (*retain)(NSMapTable *table,const void *);\n   void       (*release)(NSMapTable *table,void *);\n   NSString  *(*describe)(NSMapTable *table, const void *);\n} NSMapTableValueCallBacks;\n```\n\n上述存放的三个函数指针，定义在对`NSMaptable`插入一对`key－value`时，对`value`对象的操作。\n\n```objective-c\n@interface NSMapTable : NSObject {\n   NSMapTableKeyCallBacks   *keyCallBacks;\n   NSMapTableValueCallBacks *valueCallBacks;\n   NSUInteger             count;\n   NSUInteger             nBuckets;\n   struct _NSMapNode  **buckets;\n}\n```\n\n上面是`NSMtabtable`真正的描述，可以看出来`NSMapTable`是一个**哈希＋链表**的数据结构，因此在`NSMapTable`中插入或者删除一对对象时寻找的时间是`O（1）＋O（m）`，m最坏时可能为n。\n\n- O（1）：为对`key`进行`hash`得到`bucket`的位置\n- O（m）：遍历该`bucket`后面冲突的`value`，通过链表连接起来。\n\n因此：`NSDictionary`中的`Key - Value`遍历时是无序的，至如按照什么样的顺序，跟`hash`函数相关。`NSMapTable`使用`NSObject`的哈希函数。\n\n```objective-c\n-(NSUInteger)hash {\n   return (NSUInteger)self>>4;\n}\n```\n\n上述是`NSObject`的哈希值的计算方式，简单通过移位实现。右移4位，左边补0.\n\n因为对象大多存于堆中，地址相差4位应该很正常。\n\n### setValue和setObject的区别：\n\n```objective-c\n- (void)setObject:(ObjectType)anObject forKey:(KeyType <NSCopying>)aKey;\n- (void)setValue:(nullable ObjectType)value forKey:(NSString *)key;\n```\n\n首先：`setObject: ForKey:`是NSMutableDictionary特有的；`setValue: ForKey:`是KVC的主要方法。\n\n- `setValue: ForKey:`的`value`是可以为`nil`的（但是当`value`为`nil`的时候，方法内部会有`if`判断自动调用`removeObject：forKey`方法）；\n\n  `setObject: ForKey:`的`value`则不可以为`nil`。\n\n- `setValue: ForKey:`的`key`必须是不为`nil`的字符串类型；\n  `setObject: ForKey:`的`key`可以是不为`nil`的所有继承`NSCopying`的类型。\n\n\n\n> ⚠️本篇文章是为了方便自己查阅整理，如有冒犯原作者，可以联系本人删除。\n>\n> 参考链接：\n>\n> [ 1 ] : [https://blog.csdn.net/linshaolie/article/details/41494303](https://blog.csdn.net/linshaolie/article/details/41494303)\n> [ 2 ] : [https://www.cnblogs.com/doudouyoutang/p/4379068.html](https://www.cnblogs.com/doudouyoutang/p/4379068.html)\n\n","slug":"NSDictionary-Principle-of-realization","published":1,"updated":"2018-05-20T04:40:54.444Z","_id":"cjhebauxl000jofxf5vcj4b08","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><code>NSDictionary</code>（字典）是使用 <code>hash</code>表来实现<code>key</code>和<code>value</code>之间的映射和存储的， <code>hash</code>函数设计的好坏影响着数据的查找访问效率。数据在<code>hash</code>表中分布的越均匀，其访问效率越高。而在<code>Objective-C</code>中，通常都是利用<code>NSString</code> 来作为键值，其内部使用的<code>hash</code>函数也是通过使用 <code>NSString</code>对象作为键值来保证数据的各个节点在<code>hash</code>表中均匀分布。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>首先，看下给一个<code>Dictionary</code>赋值的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setObject:(id)anObject forKey:(id &lt;NSCopying&gt;)aKey;</span><br></pre></td></tr></table></figure>\n<p>从这个方法中可以知道， 要作为 <code>Key</code> 值，必须遵循 <code>NSCopying</code> 协议。也就是说在<code>NSDictionary</code>内部，会对 <code>aKey</code> 对象 <code>copy</code> 一份新的。而  <code>anObject</code> 对象在其内部是作为强引用（<code>retain</code>或<code>strong</code>)。所以在<code>MRC</code>下，向该方法发送消息之后，我们会向<code>anObject</code>发送 <code>release</code> 消息进行释放。</p>\n<p>既然知道了作为 <code>key</code> 值，必须遵循 <code>NSCopying</code> 协议，说明除了 <code>NSString</code> 对象之外，我们还可以使用其他类型对象来作为 <code>NSDictionary</code> 的 key值。不过这还不够，作为 <code>key</code> 值，该类型还必须继承于 <code>NSObject</code> 并且要重载一下两个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)hash; </span><br><span class=\"line\">- (BOOL)isEqual:(id)object;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>hash</code> 方法是用来计算该对象的 <code>hash</code> 值，最终的 hash 值决定了该对象在 hash 表中存储的位置。使用<code>isEqual</code>方法来通过<code>hash</code>值查找对象在<code>hash</code>表中的位置。</p>\n<p>因此，<code>NSDictionary</code>在调用<code>setObject: forKey:</code> 后，内部会去调用 <code>key</code> 对象的 <code>hash</code> 方法确定 <code>object</code> 在<code>hash</code>表内的入口位置，然后会调用 <code>isEqual :</code> 来确定该值是否已经存在于 <code>NSDictionary</code>中。</p>\n<h3 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h3><p><code>NSDictionary</code>是使用<code>NSMapTable</code>实现。<code>NSMapTable</code>同样是一个<code>key－value</code>的容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">   NSMapTable        *table;</span><br><span class=\"line\">   NSInteger                i;</span><br><span class=\"line\">   struct _NSMapNode *j;</span><br><span class=\"line\">&#125; NSMapEnumerator;</span><br></pre></td></tr></table></figure>\n<p>上述结构体描述了遍历一个<code>NSMapTable</code>时的一个指针对象，其中包含<code>table</code>对象自身的指针，计数值，和节点指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">   NSUInteger (*hash)(NSMapTable *table,const void *);</span><br><span class=\"line\">   BOOL (*isEqual)(NSMapTable *table,const void *,const void *);</span><br><span class=\"line\">   void (*retain)(NSMapTable *table,const void *);</span><br><span class=\"line\">   void (*release)(NSMapTable *table,void *);</span><br><span class=\"line\">   NSString  *(*describe)(NSMapTable *table,const void *);</span><br><span class=\"line\">   const void *notAKeyMarker;</span><br><span class=\"line\">&#125; NSMapTableKeyCallBacks;</span><br></pre></td></tr></table></figure>\n<p>上述结构体中存放的是几个函数指针，用于计算<code>key</code>的<code>hash</code>值，判断<code>key</code>是否相等，<code>retain</code>，<code>release</code>操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">   void       (*retain)(NSMapTable *table,const void *);</span><br><span class=\"line\">   void       (*release)(NSMapTable *table,void *);</span><br><span class=\"line\">   NSString  *(*describe)(NSMapTable *table, const void *);</span><br><span class=\"line\">&#125; NSMapTableValueCallBacks;</span><br></pre></td></tr></table></figure>\n<p>上述存放的三个函数指针，定义在对<code>NSMaptable</code>插入一对<code>key－value</code>时，对<code>value</code>对象的操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSMapTable : NSObject &#123;</span><br><span class=\"line\">   NSMapTableKeyCallBacks   *keyCallBacks;</span><br><span class=\"line\">   NSMapTableValueCallBacks *valueCallBacks;</span><br><span class=\"line\">   NSUInteger             count;</span><br><span class=\"line\">   NSUInteger             nBuckets;</span><br><span class=\"line\">   struct _NSMapNode  **buckets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是<code>NSMtabtable</code>真正的描述，可以看出来<code>NSMapTable</code>是一个<strong>哈希＋链表</strong>的数据结构，因此在<code>NSMapTable</code>中插入或者删除一对对象时寻找的时间是<code>O（1）＋O（m）</code>，m最坏时可能为n。</p>\n<ul>\n<li>O（1）：为对<code>key</code>进行<code>hash</code>得到<code>bucket</code>的位置</li>\n<li>O（m）：遍历该<code>bucket</code>后面冲突的<code>value</code>，通过链表连接起来。</li>\n</ul>\n<p>因此：<code>NSDictionary</code>中的<code>Key - Value</code>遍历时是无序的，至如按照什么样的顺序，跟<code>hash</code>函数相关。<code>NSMapTable</code>使用<code>NSObject</code>的哈希函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(NSUInteger)hash &#123;</span><br><span class=\"line\">   return (NSUInteger)self&gt;&gt;4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述是<code>NSObject</code>的哈希值的计算方式，简单通过移位实现。右移4位，左边补0.</p>\n<p>因为对象大多存于堆中，地址相差4位应该很正常。</p>\n<h3 id=\"setValue和setObject的区别：\"><a href=\"#setValue和setObject的区别：\" class=\"headerlink\" title=\"setValue和setObject的区别：\"></a>setValue和setObject的区别：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setObject:(ObjectType)anObject forKey:(KeyType &lt;NSCopying&gt;)aKey;</span><br><span class=\"line\">- (void)setValue:(nullable ObjectType)value forKey:(NSString *)key;</span><br></pre></td></tr></table></figure>\n<p>首先：<code>setObject: ForKey:</code>是NSMutableDictionary特有的；<code>setValue: ForKey:</code>是KVC的主要方法。</p>\n<ul>\n<li><p><code>setValue: ForKey:</code>的<code>value</code>是可以为<code>nil</code>的（但是当<code>value</code>为<code>nil</code>的时候，方法内部会有<code>if</code>判断自动调用<code>removeObject：forKey</code>方法）；</p>\n<p><code>setObject: ForKey:</code>的<code>value</code>则不可以为<code>nil</code>。</p>\n</li>\n<li><p><code>setValue: ForKey:</code>的<code>key</code>必须是不为<code>nil</code>的字符串类型；<br><code>setObject: ForKey:</code>的<code>key</code>可以是不为<code>nil</code>的所有继承<code>NSCopying</code>的类型。</p>\n</li>\n</ul>\n<blockquote>\n<p>⚠️本篇文章是为了方便自己查阅整理，如有冒犯原作者，可以联系本人删除。</p>\n<p>参考链接：</p>\n<p>[ 1 ] : <a href=\"https://blog.csdn.net/linshaolie/article/details/41494303\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/linshaolie/article/details/41494303</a><br>[ 2 ] : <a href=\"https://www.cnblogs.com/doudouyoutang/p/4379068.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/doudouyoutang/p/4379068.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><code>NSDictionary</code>（字典）是使用 <code>hash</code>表来实现<code>key</code>和<code>value</code>之间的映射和存储的， <code>hash</code>函数设计的好坏影响着数据的查找访问效率。数据在<code>hash</code>表中分布的越均匀，其访问效率越高。而在<code>Objective-C</code>中，通常都是利用<code>NSString</code> 来作为键值，其内部使用的<code>hash</code>函数也是通过使用 <code>NSString</code>对象作为键值来保证数据的各个节点在<code>hash</code>表中均匀分布。</p>\n</blockquote>","more":"<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>首先，看下给一个<code>Dictionary</code>赋值的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setObject:(id)anObject forKey:(id &lt;NSCopying&gt;)aKey;</span><br></pre></td></tr></table></figure>\n<p>从这个方法中可以知道， 要作为 <code>Key</code> 值，必须遵循 <code>NSCopying</code> 协议。也就是说在<code>NSDictionary</code>内部，会对 <code>aKey</code> 对象 <code>copy</code> 一份新的。而  <code>anObject</code> 对象在其内部是作为强引用（<code>retain</code>或<code>strong</code>)。所以在<code>MRC</code>下，向该方法发送消息之后，我们会向<code>anObject</code>发送 <code>release</code> 消息进行释放。</p>\n<p>既然知道了作为 <code>key</code> 值，必须遵循 <code>NSCopying</code> 协议，说明除了 <code>NSString</code> 对象之外，我们还可以使用其他类型对象来作为 <code>NSDictionary</code> 的 key值。不过这还不够，作为 <code>key</code> 值，该类型还必须继承于 <code>NSObject</code> 并且要重载一下两个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)hash; </span><br><span class=\"line\">- (BOOL)isEqual:(id)object;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>hash</code> 方法是用来计算该对象的 <code>hash</code> 值，最终的 hash 值决定了该对象在 hash 表中存储的位置。使用<code>isEqual</code>方法来通过<code>hash</code>值查找对象在<code>hash</code>表中的位置。</p>\n<p>因此，<code>NSDictionary</code>在调用<code>setObject: forKey:</code> 后，内部会去调用 <code>key</code> 对象的 <code>hash</code> 方法确定 <code>object</code> 在<code>hash</code>表内的入口位置，然后会调用 <code>isEqual :</code> 来确定该值是否已经存在于 <code>NSDictionary</code>中。</p>\n<h3 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h3><p><code>NSDictionary</code>是使用<code>NSMapTable</code>实现。<code>NSMapTable</code>同样是一个<code>key－value</code>的容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">   NSMapTable        *table;</span><br><span class=\"line\">   NSInteger                i;</span><br><span class=\"line\">   struct _NSMapNode *j;</span><br><span class=\"line\">&#125; NSMapEnumerator;</span><br></pre></td></tr></table></figure>\n<p>上述结构体描述了遍历一个<code>NSMapTable</code>时的一个指针对象，其中包含<code>table</code>对象自身的指针，计数值，和节点指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">   NSUInteger (*hash)(NSMapTable *table,const void *);</span><br><span class=\"line\">   BOOL (*isEqual)(NSMapTable *table,const void *,const void *);</span><br><span class=\"line\">   void (*retain)(NSMapTable *table,const void *);</span><br><span class=\"line\">   void (*release)(NSMapTable *table,void *);</span><br><span class=\"line\">   NSString  *(*describe)(NSMapTable *table,const void *);</span><br><span class=\"line\">   const void *notAKeyMarker;</span><br><span class=\"line\">&#125; NSMapTableKeyCallBacks;</span><br></pre></td></tr></table></figure>\n<p>上述结构体中存放的是几个函数指针，用于计算<code>key</code>的<code>hash</code>值，判断<code>key</code>是否相等，<code>retain</code>，<code>release</code>操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">   void       (*retain)(NSMapTable *table,const void *);</span><br><span class=\"line\">   void       (*release)(NSMapTable *table,void *);</span><br><span class=\"line\">   NSString  *(*describe)(NSMapTable *table, const void *);</span><br><span class=\"line\">&#125; NSMapTableValueCallBacks;</span><br></pre></td></tr></table></figure>\n<p>上述存放的三个函数指针，定义在对<code>NSMaptable</code>插入一对<code>key－value</code>时，对<code>value</code>对象的操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSMapTable : NSObject &#123;</span><br><span class=\"line\">   NSMapTableKeyCallBacks   *keyCallBacks;</span><br><span class=\"line\">   NSMapTableValueCallBacks *valueCallBacks;</span><br><span class=\"line\">   NSUInteger             count;</span><br><span class=\"line\">   NSUInteger             nBuckets;</span><br><span class=\"line\">   struct _NSMapNode  **buckets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是<code>NSMtabtable</code>真正的描述，可以看出来<code>NSMapTable</code>是一个<strong>哈希＋链表</strong>的数据结构，因此在<code>NSMapTable</code>中插入或者删除一对对象时寻找的时间是<code>O（1）＋O（m）</code>，m最坏时可能为n。</p>\n<ul>\n<li>O（1）：为对<code>key</code>进行<code>hash</code>得到<code>bucket</code>的位置</li>\n<li>O（m）：遍历该<code>bucket</code>后面冲突的<code>value</code>，通过链表连接起来。</li>\n</ul>\n<p>因此：<code>NSDictionary</code>中的<code>Key - Value</code>遍历时是无序的，至如按照什么样的顺序，跟<code>hash</code>函数相关。<code>NSMapTable</code>使用<code>NSObject</code>的哈希函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(NSUInteger)hash &#123;</span><br><span class=\"line\">   return (NSUInteger)self&gt;&gt;4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述是<code>NSObject</code>的哈希值的计算方式，简单通过移位实现。右移4位，左边补0.</p>\n<p>因为对象大多存于堆中，地址相差4位应该很正常。</p>\n<h3 id=\"setValue和setObject的区别：\"><a href=\"#setValue和setObject的区别：\" class=\"headerlink\" title=\"setValue和setObject的区别：\"></a>setValue和setObject的区别：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setObject:(ObjectType)anObject forKey:(KeyType &lt;NSCopying&gt;)aKey;</span><br><span class=\"line\">- (void)setValue:(nullable ObjectType)value forKey:(NSString *)key;</span><br></pre></td></tr></table></figure>\n<p>首先：<code>setObject: ForKey:</code>是NSMutableDictionary特有的；<code>setValue: ForKey:</code>是KVC的主要方法。</p>\n<ul>\n<li><p><code>setValue: ForKey:</code>的<code>value</code>是可以为<code>nil</code>的（但是当<code>value</code>为<code>nil</code>的时候，方法内部会有<code>if</code>判断自动调用<code>removeObject：forKey</code>方法）；</p>\n<p><code>setObject: ForKey:</code>的<code>value</code>则不可以为<code>nil</code>。</p>\n</li>\n<li><p><code>setValue: ForKey:</code>的<code>key</code>必须是不为<code>nil</code>的字符串类型；<br><code>setObject: ForKey:</code>的<code>key</code>可以是不为<code>nil</code>的所有继承<code>NSCopying</code>的类型。</p>\n</li>\n</ul>\n<blockquote>\n<p>⚠️本篇文章是为了方便自己查阅整理，如有冒犯原作者，可以联系本人删除。</p>\n<p>参考链接：</p>\n<p>[ 1 ] : <a href=\"https://blog.csdn.net/linshaolie/article/details/41494303\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/linshaolie/article/details/41494303</a><br>[ 2 ] : <a href=\"https://www.cnblogs.com/doudouyoutang/p/4379068.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/doudouyoutang/p/4379068.html</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhebauwb0001ofxflb5mpwfr","tag_id":"cjhebauwu0003ofxftcg083mf","_id":"cjhebauxd000cofxf7309h1ev"},{"post_id":"cjhebauwb0001ofxflb5mpwfr","tag_id":"cjhebaux50007ofxfq0bloto6","_id":"cjhebauxf000eofxfnyevmfbn"},{"post_id":"cjhebauwr0002ofxfojkwltsj","tag_id":"cjhebaux9000aofxf2vfph7fs","_id":"cjhebauxo000kofxftg1k3z12"},{"post_id":"cjhebauwr0002ofxfojkwltsj","tag_id":"cjhebauxg000fofxfkl7v72ys","_id":"cjhebauxp000lofxf82rlfsw8"},{"post_id":"cjhebauwy0004ofxfth2er7f1","tag_id":"cjhebauxk000iofxf9ttj61qk","_id":"cjhebauxt000oofxfa6l69sd7"},{"post_id":"cjhebauwy0004ofxfth2er7f1","tag_id":"cjhebauxq000mofxfnc3vpgma","_id":"cjhebauxt000pofxftfb5qdhy"},{"post_id":"cjhebaux00005ofxf20s2jt7q","tag_id":"cjhebauxr000nofxfg53uakfm","_id":"cjhebauy1000sofxffyx3rece"},{"post_id":"cjhebaux00005ofxf20s2jt7q","tag_id":"cjhebauxk000iofxf9ttj61qk","_id":"cjhebauy1000tofxfqqhswxp7"},{"post_id":"cjhebaux30006ofxfpzilrmt5","tag_id":"cjhebauxk000iofxf9ttj61qk","_id":"cjhebauy5000wofxfxfgy3vom"},{"post_id":"cjhebaux30006ofxfpzilrmt5","tag_id":"cjhebauxr000nofxfg53uakfm","_id":"cjhebauy5000xofxfzuue31lr"},{"post_id":"cjhebaux60008ofxfcb4h6e66","tag_id":"cjhebauxk000iofxf9ttj61qk","_id":"cjhebauy6000zofxf8gctrbu5"},{"post_id":"cjhebaux80009ofxfladp2o4u","tag_id":"cjhebauy6000yofxfilafwxod","_id":"cjhebauy70013ofxfnwqmz4bd"},{"post_id":"cjhebaux80009ofxfladp2o4u","tag_id":"cjhebauy60010ofxfi1smd3pm","_id":"cjhebauy70014ofxfbi71d3z0"},{"post_id":"cjhebaux80009ofxfladp2o4u","tag_id":"cjhebauy70011ofxfluqidu6w","_id":"cjhebauy80016ofxf998qsif8"},{"post_id":"cjhebauxa000bofxfqugf35a3","tag_id":"cjhebauy70012ofxfl62mf8es","_id":"cjhebauy80017ofxfr7pag9xj"},{"post_id":"cjhebauxe000dofxfnlqoh2hc","tag_id":"cjhebauy80015ofxf0fbyxncf","_id":"cjhebauy90019ofxfmt09sae6"},{"post_id":"cjhebauxg000gofxfmou8adia","tag_id":"cjhebauy90018ofxfqw2t2kp0","_id":"cjhebauya001cofxf38sstmtu"},{"post_id":"cjhebauxg000gofxfmou8adia","tag_id":"cjhebauy9001aofxf3u17yw9o","_id":"cjhebauya001dofxfpejoeqhh"},{"post_id":"cjhebauxj000hofxf4r8cpo4z","tag_id":"cjhebauy80015ofxf0fbyxncf","_id":"cjhebauyb001fofxflgx4ol2c"},{"post_id":"cjhebauxl000jofxf5vcj4b08","tag_id":"cjhebauya001eofxfzpflxxgr","_id":"cjhebauyb001gofxfaqmf6r0b"}],"Tag":[{"name":"Podfile","_id":"cjhebauwu0003ofxftcg083mf"},{"name":"Cocoapods","_id":"cjhebaux50007ofxfq0bloto6"},{"name":"XCode","_id":"cjhebaux9000aofxf2vfph7fs"},{"name":"Templates","_id":"cjhebauxg000fofxfkl7v72ys"},{"name":"Hexo","_id":"cjhebauxk000iofxf9ttj61qk"},{"name":"yilia","_id":"cjhebauxq000mofxfnc3vpgma"},{"name":"NexT","_id":"cjhebauxr000nofxfg53uakfm"},{"name":"HTTP","_id":"cjhebauy6000yofxfilafwxod"},{"name":"HTTPS","_id":"cjhebauy60010ofxfi1smd3pm"},{"name":"握手","_id":"cjhebauy70011ofxfluqidu6w"},{"name":"Algorithm","_id":"cjhebauy70012ofxfl62mf8es"},{"name":"面试","_id":"cjhebauy80015ofxf0fbyxncf"},{"name":"Javascript","_id":"cjhebauy90018ofxfqw2t2kp0"},{"name":"CSS","_id":"cjhebauy9001aofxf3u17yw9o"},{"name":"NSDictionary","_id":"cjhebauya001eofxfzpflxxgr"}]}}